// This file is auto-generated by @hey-api/openapi-ts

export type GetRootData = {
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetRootResponse = ({
    /**
     * The Mailchimp account ID.
     */
    readonly account_id?: string;
    /**
     * The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account.
     */
    readonly login_id?: string;
    /**
     * The name of the account.
     */
    readonly account_name?: string;
    /**
     * The account email address.
     */
    readonly email?: string;
    /**
     * The first name tied to the account.
     */
    readonly first_name?: string;
    /**
     * The last name tied to the account.
     */
    readonly last_name?: string;
    /**
     * The username tied to the account.
     */
    readonly username?: string;
    /**
     * URL of the avatar for the user.
     */
    readonly avatar_url?: string;
    /**
     * The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account.
     */
    readonly role?: string;
    /**
     * The date and time that the account was created in ISO 8601 format.
     */
    readonly member_since?: string;
    /**
     * The type of pricing plan the account is on.
     */
    readonly pricing_plan_type?: 'monthly' | 'pay_as_you_go' | 'forever_free';
    /**
     * Date of first payment for monthly plans.
     */
    readonly first_payment?: string;
    /**
     * The timezone currently set for the account.
     */
    readonly account_timezone?: string;
    /**
     * The user-specified industry associated with the account.
     */
    readonly account_industry?: string;
    /**
     * Information about the account contact.
     */
    readonly contact?: {
        /**
         * The company name for the account.
         */
        readonly company?: string;
        /**
         * The street address for the account contact.
         */
        readonly addr1?: string;
        /**
         * The street address for the account contact.
         */
        readonly addr2?: string;
        /**
         * The city for the account contact.
         */
        readonly city?: string;
        /**
         * The state for the account contact.
         */
        readonly state?: string;
        /**
         * The zip code for the account contact.
         */
        readonly zip?: string;
        /**
         * The country for the account contact.
         */
        readonly country?: string;
    };
    /**
     * Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/).
     */
    readonly pro_enabled?: boolean;
    /**
     * The date and time of the last login for this account in ISO 8601 format.
     */
    readonly last_login?: string;
    /**
     * The total number of subscribers across all lists in the account.
     */
    readonly total_subscribers?: number;
    /**
     * The [average campaign statistics](https://mailchimp.com/resources/research/email-marketing-benchmarks/?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs) for all campaigns in the account's specified industry.
     */
    readonly industry_stats?: {
        /**
         * The average unique open rate for all campaigns in the account's specified industry.
         */
        readonly open_rate?: number;
        /**
         * The average bounce rate for all campaigns in the account's specified industry.
         */
        readonly bounce_rate?: number;
        /**
         * The average unique click rate for all campaigns in the account's specified industry.
         */
        readonly click_rate?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetRootError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetActivityFeedChimpChatterData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetActivityFeedChimpChatterResponse = ({
    /**
     * An array of Chimp Chatter messages. There's a maximum of 200 messages present for an account.
     */
    readonly chimp_chatter?: Array<{
        readonly title?: string;
        readonly message?: string;
        /**
         * The type of activity
         */
        readonly type?: 'lists:new-subscriber' | 'lists:unsubscribes' | 'lists:profile-updates' | 'campaigns:facebook-likes' | 'campaigns:forward-to-friend' | 'lists:imports';
        /**
         * The date and time this activity was updated.
         */
        readonly update_time?: string;
        /**
         * URL to a report that includes this activity
         */
        readonly url?: string;
        /**
         * If it exists, list ID for the associated list
         */
        readonly list_id?: string;
        /**
         * If it exists, campaign ID for the associated campaign
         */
        readonly campaign_id?: string;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetActivityFeedChimpChatterError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAccountExportsData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetAccountExportsResponse = ({
    /**
     * An array of objects, each representing an account export.
     */
    exports?: Array<{
        /**
         * The ID for the export.
         */
        export_id?: number;
        /**
         * Start time for the export.
         */
        started?: string;
        /**
         * If finished, the finish time for the export.
         */
        finished?: string;
        /**
         * The size of the uncompressed export in bytes.
         */
        size_in_bytes?: number;
        /**
         * If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes.
         */
        download_url?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAccountExportsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAccountExportData = {
    body: {
        /**
         * The stages of an account export to include.
         */
        include_stages: Array<('audiences' | 'campaigns' | 'events' | 'gallery_files' | 'reports' | 'templates')>;
        /**
         * An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit.
         */
        since_timestamp?: string;
    };
};

export type PostAccountExportResponse = ({
    /**
     * The ID for the export.
     */
    export_id?: number;
    /**
     * Start time for the export.
     */
    started?: string;
    /**
     * If finished, the finish time for the export.
     */
    finished?: string;
    /**
     * The size of the uncompressed export in bytes.
     */
    size_in_bytes?: number;
    /**
     * If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes.
     */
    download_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostAccountExportError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAccountExportIdData = {
    path: {
        /**
         * The unique id for the account export.
         */
        export_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetAccountExportIdResponse = ({
    /**
     * The ID for the export.
     */
    export_id?: number;
    /**
     * Start time for the export.
     */
    started?: string;
    /**
     * If finished, the finish time for the export.
     */
    finished?: string;
    /**
     * The size of the uncompressed export in bytes.
     */
    size_in_bytes?: number;
    /**
     * If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes.
     */
    download_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAccountExportIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAuthorizedAppsData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetAuthorizedAppsResponse = ({
    /**
     * An array of objects, each representing an authorized application.
     */
    apps?: Array<{
        /**
         * The ID for the application.
         */
        id?: number;
        /**
         * The name of the application.
         */
        name?: string;
        /**
         * A short description of the application.
         */
        description?: string;
        /**
         * An array of usernames for users who have linked the app.
         */
        users?: Array<(string)>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAuthorizedAppsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAuthorizedAppsIdData = {
    path: {
        /**
         * The unique id for the connected authorized application.
         */
        app_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetAuthorizedAppsIdResponse = ({
    /**
     * The ID for the application.
     */
    id?: number;
    /**
     * The name of the application.
     */
    name?: string;
    /**
     * A short description of the application.
     */
    description?: string;
    /**
     * An array of usernames for users who have linked the app.
     */
    users?: Array<(string)>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAuthorizedAppsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsData = {
    query?: {
        /**
         * Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_create_time?: string;
        /**
         * Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_start_time?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_create_time?: string;
        /**
         * Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_start_time?: string;
        /**
         * Restrict the results to automations with the specified status.
         */
        status?: 'save' | 'paused' | 'sending';
    };
};

export type GetAutomationsResponse = ({
    /**
     * An array of objects, each representing an Automation workflow.
     */
    automations?: Array<{
        /**
         * A string that identifies the Automation.
         */
        readonly id?: string;
        /**
         * The date and time the Automation was created in ISO 8601 format.
         */
        readonly create_time?: string;
        /**
         * The date and time the Automation was started in ISO 8601 format.
         */
        readonly start_time?: string;
        /**
         * The current status of the Automation.
         */
        readonly status?: 'save' | 'paused' | 'sending';
        /**
         * The total number of emails sent for the Automation.
         */
        readonly emails_sent?: number;
        /**
         * List settings for the Automation.
         */
        recipients?: {
            /**
             * The unique list id.
             */
            list_id?: string;
            /**
             * The status of the list used, namely if it's deleted or disabled.
             */
            readonly list_is_active?: boolean;
            /**
             * List Name.
             */
            list_name?: string;
            /**
             * An object representing all segmentation options.
             */
            segment_opts?: {
                /**
                 * The id for an existing saved segment.
                 */
                saved_segment_id?: number;
                /**
                 * Segment match type.
                 */
                match?: 'any' | 'all';
                /**
                 * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
                 */
                conditions?: Array<unknown>;
            };
            /**
             * The id of the store.
             */
            store_id?: string;
        };
        /**
         * The settings for the Automation workflow.
         */
        settings?: {
            /**
             * The title of the Automation.
             */
            title?: string;
            /**
             * The 'from' name for the Automation (not an email address).
             */
            from_name?: string;
            /**
             * The reply-to email address for the Automation.
             */
            reply_to?: string;
            /**
             * Whether to use Mailchimp Conversation feature to manage replies
             */
            use_conversation?: boolean;
            /**
             * The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
             */
            to_name?: string;
            /**
             * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`.
             */
            authenticate?: boolean;
            /**
             * Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation.
             */
            auto_footer?: boolean;
            /**
             * Whether to automatically inline the CSS included with the Automation content.
             */
            inline_css?: boolean;
        };
        /**
         * The tracking options for the Automation.
         */
        tracking?: {
            /**
             * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`.
             */
            opens?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`.
             */
            html_clicks?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`.
             */
            text_clicks?: boolean;
            /**
             * Deprecated
             */
            goal_tracking?: boolean;
            /**
             * Whether to enable e-commerce tracking.
             */
            ecomm360?: boolean;
            /**
             * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
             */
            google_analytics?: string;
            /**
             * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
             */
            clicktale?: string;
            /**
             * Deprecated
             */
            salesforce?: {
                /**
                 * Create a campaign in a connected Salesforce account.
                 */
                campaign?: boolean;
                /**
                 * Update contact notes for a campaign based on a subscriber's email address.
                 */
                notes?: boolean;
            };
            /**
             * Deprecated
             */
            capsule?: {
                /**
                 * Update contact notes for a campaign based on a subscriber's email addresses.
                 */
                notes?: boolean;
            };
        };
        /**
         * Available triggers for Automation workflows.
         */
        trigger_settings?: {
            /**
             * The type of Automation workflow.
             */
            workflow_type: 'abandonedBrowse' | 'abandonedCart' | 'api' | 'bestCustomers' | 'categoryFollowup' | 'dateAdded' | 'emailFollowup' | 'emailSeries' | 'groupAdd' | 'groupRemove' | 'mandrill' | 'productFollowup' | 'purchaseFollowup' | 'recurringEvent' | 'specialEvent' | 'visitUrl' | 'welcomeSeries';
            /**
             * The title of the workflow type.
             */
            readonly workflow_title?: string;
            /**
             * A workflow's runtime settings for an Automation.
             */
            runtime?: {
                /**
                 * The days an Automation workflow can send.
                 */
                days?: Array<('sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday')>;
                /**
                 * The hours an Automation workflow can send.
                 */
                hours?: {
                    /**
                     * When to send the Automation email.
                     */
                    type: 'send_asap' | 'send_between' | 'send_at';
                };
            };
            /**
             * The number of emails in the Automation workflow.
             */
            readonly workflow_emails_count?: number;
        };
        /**
         * A summary of opens and clicks for sent campaigns.
         */
        report_summary?: {
            /**
             * The total number of opens for a campaign.
             */
            readonly opens?: number;
            /**
             * The number of unique opens.
             */
            readonly unique_opens?: number;
            /**
             * The number of unique opens divided by the total number of successful deliveries.
             */
            readonly open_rate?: number;
            /**
             * The total number of clicks for an campaign.
             */
            readonly clicks?: number;
            /**
             * The number of unique clicks.
             */
            readonly subscriber_clicks?: number;
            /**
             * The number of unique clicks, divided by the total number of successful deliveries.
             */
            readonly click_rate?: number;
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAutomationsData = {
    body: {
        /**
         * List settings for the Automation.
         */
        recipients: {
            /**
             * The id of the List.
             */
            list_id?: string;
            /**
             * The id of the store.
             */
            store_id?: string;
        };
        /**
         * The settings for the Automation workflow.
         */
        settings?: {
            /**
             * The 'from' name for the Automation (not an email address).
             */
            from_name?: string;
            /**
             * The reply-to email address for the Automation.
             */
            reply_to?: string;
        };
        /**
         * Trigger settings for the Automation.
         */
        trigger_settings: {
            /**
             * The type of Automation workflow. Currently only supports 'abandonedCart'.
             */
            workflow_type: string;
        };
    };
};

export type PostAutomationsResponse = ({
    /**
     * A string that identifies the Automation.
     */
    readonly id?: string;
    /**
     * The date and time the Automation was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The date and time the Automation was started in ISO 8601 format.
     */
    readonly start_time?: string;
    /**
     * The current status of the Automation.
     */
    readonly status?: 'save' | 'paused' | 'sending';
    /**
     * The total number of emails sent for the Automation.
     */
    readonly emails_sent?: number;
    /**
     * List settings for the Automation.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * List Name.
         */
        list_name?: string;
        /**
         * An object representing all segmentation options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
        /**
         * The id of the store.
         */
        store_id?: string;
    };
    /**
     * The settings for the Automation workflow.
     */
    settings?: {
        /**
         * The title of the Automation.
         */
        title?: string;
        /**
         * The 'from' name for the Automation (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the Automation.
         */
        reply_to?: string;
        /**
         * Whether to use Mailchimp Conversation feature to manage replies
         */
        use_conversation?: boolean;
        /**
         * The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation.
         */
        auto_footer?: boolean;
        /**
         * Whether to automatically inline the CSS included with the Automation content.
         */
        inline_css?: boolean;
    };
    /**
     * The tracking options for the Automation.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on a subscriber's email address.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on a subscriber's email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * Available triggers for Automation workflows.
     */
    trigger_settings?: {
        /**
         * The type of Automation workflow.
         */
        workflow_type: 'abandonedBrowse' | 'abandonedCart' | 'api' | 'bestCustomers' | 'categoryFollowup' | 'dateAdded' | 'emailFollowup' | 'emailSeries' | 'groupAdd' | 'groupRemove' | 'mandrill' | 'productFollowup' | 'purchaseFollowup' | 'recurringEvent' | 'specialEvent' | 'visitUrl' | 'welcomeSeries';
        /**
         * The title of the workflow type.
         */
        readonly workflow_title?: string;
        /**
         * A workflow's runtime settings for an Automation.
         */
        runtime?: {
            /**
             * The days an Automation workflow can send.
             */
            days?: Array<('sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday')>;
            /**
             * The hours an Automation workflow can send.
             */
            hours?: {
                /**
                 * When to send the Automation email.
                 */
                type: 'send_asap' | 'send_between' | 'send_at';
            };
        };
        /**
         * The number of emails in the Automation workflow.
         */
        readonly workflow_emails_count?: number;
    };
    /**
     * A summary of opens and clicks for sent campaigns.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks, divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostAutomationsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsIdData = {
    path: {
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetAutomationsIdResponse = ({
    /**
     * A string that identifies the Automation.
     */
    readonly id?: string;
    /**
     * The date and time the Automation was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The date and time the Automation was started in ISO 8601 format.
     */
    readonly start_time?: string;
    /**
     * The current status of the Automation.
     */
    readonly status?: 'save' | 'paused' | 'sending';
    /**
     * The total number of emails sent for the Automation.
     */
    readonly emails_sent?: number;
    /**
     * List settings for the Automation.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * List Name.
         */
        list_name?: string;
        /**
         * An object representing all segmentation options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
        /**
         * The id of the store.
         */
        store_id?: string;
    };
    /**
     * The settings for the Automation workflow.
     */
    settings?: {
        /**
         * The title of the Automation.
         */
        title?: string;
        /**
         * The 'from' name for the Automation (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the Automation.
         */
        reply_to?: string;
        /**
         * Whether to use Mailchimp Conversation feature to manage replies
         */
        use_conversation?: boolean;
        /**
         * The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation.
         */
        auto_footer?: boolean;
        /**
         * Whether to automatically inline the CSS included with the Automation content.
         */
        inline_css?: boolean;
    };
    /**
     * The tracking options for the Automation.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on a subscriber's email address.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on a subscriber's email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * Available triggers for Automation workflows.
     */
    trigger_settings?: {
        /**
         * The type of Automation workflow.
         */
        workflow_type: 'abandonedBrowse' | 'abandonedCart' | 'api' | 'bestCustomers' | 'categoryFollowup' | 'dateAdded' | 'emailFollowup' | 'emailSeries' | 'groupAdd' | 'groupRemove' | 'mandrill' | 'productFollowup' | 'purchaseFollowup' | 'recurringEvent' | 'specialEvent' | 'visitUrl' | 'welcomeSeries';
        /**
         * The title of the workflow type.
         */
        readonly workflow_title?: string;
        /**
         * A workflow's runtime settings for an Automation.
         */
        runtime?: {
            /**
             * The days an Automation workflow can send.
             */
            days?: Array<('sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday')>;
            /**
             * The hours an Automation workflow can send.
             */
            hours?: {
                /**
                 * When to send the Automation email.
                 */
                type: 'send_asap' | 'send_between' | 'send_at';
            };
        };
        /**
         * The number of emails in the Automation workflow.
         */
        readonly workflow_emails_count?: number;
    };
    /**
     * A summary of opens and clicks for sent campaigns.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks, divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAutomationsIdActionsPauseAllEmailsData = {
    path: {
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type PostAutomationsIdActionsPauseAllEmailsResponse = (void);

export type PostAutomationsIdActionsPauseAllEmailsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAutomationsIdActionsStartAllEmailsData = {
    path: {
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type PostAutomationsIdActionsStartAllEmailsResponse = (void);

export type PostAutomationsIdActionsStartAllEmailsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type ArchiveAutomationsData = {
    path: {
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type ArchiveAutomationsResponse = (void);

export type ArchiveAutomationsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsIdEmailsData = {
    path: {
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type GetAutomationsIdEmailsResponse = ({
    /**
     * An array of objects, each representing an email in an Automation workflow.
     */
    emails?: Array<{
        /**
         * A string that uniquely identifies the Automation email.
         */
        readonly id?: string;
        /**
         * The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
         */
        readonly web_id?: number;
        /**
         * A string that uniquely identifies an Automation workflow.
         */
        readonly workflow_id?: string;
        /**
         * The position of an Automation email in a workflow.
         */
        readonly position?: number;
        /**
         * The delay settings for an Automation email.
         */
        delay?: {
            /**
             * The delay amount for an Automation email.
             */
            readonly amount?: number;
            /**
             * The type of delay for an Automation email.
             */
            type?: 'now' | 'day' | 'hour' | 'week';
            /**
             * Whether the delay settings describe before or after the delay action of an Automation email.
             */
            direction?: 'before' | 'after';
            /**
             * The action that triggers the delay of an Automation email.
             */
            action?: 'previous_campaign_sent' | 'previous_campaign_opened' | 'previous_campaign_not_opened' | 'previous_campaign_clicked_any' | 'previous_campaign_not_clicked_any' | 'previous_campaign_specific_clicked' | 'ecomm_bought_any' | 'ecomm_bought_product' | 'ecomm_bought_category' | 'ecomm_not_bought_any' | 'ecomm_abandoned_cart' | 'campaign_sent' | 'opened_email' | 'not_opened_email' | 'clicked_email' | 'not_clicked_email' | 'campaign_specific_clicked' | 'manual' | 'signup' | 'merge_changed' | 'group_add' | 'group_remove' | 'mandrill_sent' | 'mandrill_opened' | 'mandrill_clicked' | 'mandrill_any' | 'api' | 'goal' | 'annual' | 'birthday' | 'date' | 'date_added' | 'tag_add';
            /**
             * The user-friendly description of the action that triggers an Automation email.
             */
            readonly action_description?: string;
            /**
             * The user-friendly description of the delay and trigger action settings for an Automation email.
             */
            readonly full_description?: string;
        };
        /**
         * The date and time the campaign was created in ISO 8601 format.
         */
        readonly create_time?: string;
        /**
         * The date and time the campaign was started in ISO 8601 format.
         */
        readonly start_time?: string;
        /**
         * The link to the campaign's archive version in ISO 8601 format.
         */
        readonly archive_url?: string;
        /**
         * The current status of the campaign.
         */
        readonly status?: 'save' | 'paused' | 'sending';
        /**
         * The total number of emails sent for this campaign.
         */
        readonly emails_sent?: number;
        /**
         *  The date and time a campaign was sent in ISO 8601 format
         */
        readonly send_time?: string;
        /**
         * How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url').
         */
        readonly content_type?: string;
        /**
         * Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor.
         */
        readonly needs_block_refresh?: boolean;
        /**
         * Determines if the campaign contains the *|BRAND:LOGO|* merge tag.
         */
        readonly has_logo_merge_tag?: boolean;
        /**
         * List settings for the campaign.
         */
        recipients?: {
            /**
             * The unique list id.
             */
            list_id?: string;
            /**
             * The status of the list used, namely if it's deleted or disabled.
             */
            readonly list_is_active?: boolean;
            /**
             * The name of the list.
             */
            readonly list_name?: string;
            /**
             * A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML.
             */
            readonly segment_text?: string;
            /**
             * Count of the recipients on the associated list. Formatted as an integer.
             */
            readonly recipient_count?: number;
            /**
             * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
             */
            segment_opts?: {
                /**
                 * The id for an existing saved segment.
                 */
                saved_segment_id?: number;
                /**
                 * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
                 */
                prebuilt_segment_id?: string;
                /**
                 * Segment match type.
                 */
                match?: 'any' | 'all';
                /**
                 * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
                 */
                conditions?: Array<unknown>;
            };
        };
        /**
         * Settings for the campaign including the email subject, from name, and from email address.
         */
        settings?: {
            /**
             * The subject line for the campaign.
             */
            subject_line?: string;
            /**
             * The preview text for the campaign.
             */
            preview_text?: string;
            /**
             * The title of the campaign.
             */
            title?: string;
            /**
             * The 'from' name on the campaign (not an email address).
             */
            from_name?: string;
            /**
             * The reply-to email address for the campaign.
             */
            reply_to?: string;
            /**
             * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
             */
            authenticate?: boolean;
            /**
             * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
             */
            auto_footer?: boolean;
            /**
             * Automatically inline the CSS included with the campaign content.
             */
            inline_css?: boolean;
            /**
             * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
             */
            auto_tweet?: boolean;
            /**
             * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
             */
            auto_fb_post?: Array<(string)>;
            /**
             * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
             */
            fb_comments?: boolean;
            /**
             * The id for the template used in this campaign.
             */
            template_id?: number;
            /**
             * Whether the campaign uses the drag-and-drop editor.
             */
            readonly drag_and_drop?: boolean;
        };
        /**
         * The tracking options for a campaign.
         */
        tracking?: {
            /**
             * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`.
             */
            opens?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`.
             */
            html_clicks?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`.
             */
            text_clicks?: boolean;
            /**
             * Deprecated
             */
            goal_tracking?: boolean;
            /**
             * Whether to enable e-commerce tracking.
             */
            ecomm360?: boolean;
            /**
             * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
             */
            google_analytics?: string;
            /**
             * The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
             */
            clicktale?: string;
            /**
             * Deprecated
             */
            salesforce?: {
                /**
                 * Create a campaign in a connected Salesforce account.
                 */
                campaign?: boolean;
                /**
                 * Update contact notes for a campaign based on a subscriber's email address.
                 */
                notes?: boolean;
            };
            /**
             * Deprecated
             */
            capsule?: {
                /**
                 * Update contact notes for a campaign based on a subscriber's email address.
                 */
                notes?: boolean;
            };
        };
        /**
         * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
         */
        social_card?: {
            /**
             * The url for the header image for the card.
             */
            image_url?: string;
            /**
             * A short summary of the campaign to display.
             */
            description?: string;
            /**
             * The title for the card. Typically the subject line of the campaign.
             */
            title?: string;
        };
        /**
         * Available triggers for Automation workflows.
         */
        trigger_settings?: {
            /**
             * The type of Automation workflow.
             */
            workflow_type: 'abandonedBrowse' | 'abandonedCart' | 'api' | 'bestCustomers' | 'categoryFollowup' | 'dateAdded' | 'emailFollowup' | 'emailSeries' | 'groupAdd' | 'groupRemove' | 'mandrill' | 'productFollowup' | 'purchaseFollowup' | 'recurringEvent' | 'specialEvent' | 'visitUrl' | 'welcomeSeries';
            /**
             * The title of the workflow type.
             */
            readonly workflow_title?: string;
            /**
             * A workflow's runtime settings for an Automation.
             */
            runtime?: {
                /**
                 * The days an Automation workflow can send.
                 */
                days?: Array<('sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday')>;
                /**
                 * The hours an Automation workflow can send.
                 */
                hours?: {
                    /**
                     * When to send the Automation email.
                     */
                    type: 'send_asap' | 'send_between' | 'send_at';
                };
            };
            /**
             * The number of emails in the Automation workflow.
             */
            readonly workflow_emails_count?: number;
        };
        /**
         * For sent campaigns, a summary of opens and clicks.
         */
        report_summary?: {
            /**
             * The total number of opens for a campaign.
             */
            readonly opens?: number;
            /**
             * The number of unique opens.
             */
            readonly unique_opens?: number;
            /**
             * The number of unique opens divided by the total number of successful deliveries.
             */
            readonly open_rate?: number;
            /**
             * The total number of clicks for an campaign.
             */
            readonly clicks?: number;
            /**
             * The number of unique clicks.
             */
            readonly subscriber_clicks?: number;
            /**
             * The number of unique clicks divided by the total number of successful deliveries.
             */
            readonly click_rate?: number;
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsIdEmailsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsIdEmailsIdData = {
    path: {
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type GetAutomationsIdEmailsIdResponse = ({
    /**
     * A string that uniquely identifies the Automation email.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * The position of an Automation email in a workflow.
     */
    readonly position?: number;
    /**
     * The delay settings for an Automation email.
     */
    delay?: {
        /**
         * The delay amount for an Automation email.
         */
        readonly amount?: number;
        /**
         * The type of delay for an Automation email.
         */
        type?: 'now' | 'day' | 'hour' | 'week';
        /**
         * Whether the delay settings describe before or after the delay action of an Automation email.
         */
        direction?: 'before' | 'after';
        /**
         * The action that triggers the delay of an Automation email.
         */
        action?: 'previous_campaign_sent' | 'previous_campaign_opened' | 'previous_campaign_not_opened' | 'previous_campaign_clicked_any' | 'previous_campaign_not_clicked_any' | 'previous_campaign_specific_clicked' | 'ecomm_bought_any' | 'ecomm_bought_product' | 'ecomm_bought_category' | 'ecomm_not_bought_any' | 'ecomm_abandoned_cart' | 'campaign_sent' | 'opened_email' | 'not_opened_email' | 'clicked_email' | 'not_clicked_email' | 'campaign_specific_clicked' | 'manual' | 'signup' | 'merge_changed' | 'group_add' | 'group_remove' | 'mandrill_sent' | 'mandrill_opened' | 'mandrill_clicked' | 'mandrill_any' | 'api' | 'goal' | 'annual' | 'birthday' | 'date' | 'date_added' | 'tag_add';
        /**
         * The user-friendly description of the action that triggers an Automation email.
         */
        readonly action_description?: string;
        /**
         * The user-friendly description of the delay and trigger action settings for an Automation email.
         */
        readonly full_description?: string;
    };
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The date and time the campaign was started in ISO 8601 format.
     */
    readonly start_time?: string;
    /**
     * The link to the campaign's archive version in ISO 8601 format.
     */
    readonly archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'sending';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     *  The date and time a campaign was sent in ISO 8601 format
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url').
     */
    readonly content_type?: string;
    /**
     * Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign contains the *|BRAND:LOGO|* merge tag.
     */
    readonly has_logo_merge_tag?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * Settings for the campaign including the email subject, from name, and from email address.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on a subscriber's email address.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on a subscriber's email address.
             */
            notes?: boolean;
        };
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * Available triggers for Automation workflows.
     */
    trigger_settings?: {
        /**
         * The type of Automation workflow.
         */
        workflow_type: 'abandonedBrowse' | 'abandonedCart' | 'api' | 'bestCustomers' | 'categoryFollowup' | 'dateAdded' | 'emailFollowup' | 'emailSeries' | 'groupAdd' | 'groupRemove' | 'mandrill' | 'productFollowup' | 'purchaseFollowup' | 'recurringEvent' | 'specialEvent' | 'visitUrl' | 'welcomeSeries';
        /**
         * The title of the workflow type.
         */
        readonly workflow_title?: string;
        /**
         * A workflow's runtime settings for an Automation.
         */
        runtime?: {
            /**
             * The days an Automation workflow can send.
             */
            days?: Array<('sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday')>;
            /**
             * The hours an Automation workflow can send.
             */
            hours?: {
                /**
                 * When to send the Automation email.
                 */
                type: 'send_asap' | 'send_between' | 'send_at';
            };
        };
        /**
         * The number of emails in the Automation workflow.
         */
        readonly workflow_emails_count?: number;
    };
    /**
     * For sent campaigns, a summary of opens and clicks.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsIdEmailsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteAutomationsIdEmailsIdData = {
    path: {
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type DeleteAutomationsIdEmailsIdResponse = (void);

export type DeleteAutomationsIdEmailsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchAutomationEmailWorkflowIdData = {
    body: {
        /**
         * Settings for the campaign including the email subject, from name, and from email address.
         */
        settings?: {
            /**
             * The subject line for the campaign.
             */
            subject_line?: string;
            /**
             * The preview text for the campaign.
             */
            preview_text?: string;
            /**
             * The title of the Automation.
             */
            title?: string;
            /**
             * The 'from' name for the Automation (not an email address).
             */
            from_name?: string;
            /**
             * The reply-to email address for the Automation.
             */
            reply_to?: string;
        };
        /**
         * The delay settings for an automation email.
         */
        delay?: {
            /**
             * The delay amount for an automation email.
             */
            amount?: number;
            /**
             * The type of delay for an automation email.
             */
            type?: 'now' | 'day' | 'hour' | 'week';
            /**
             * Whether the delay settings describe before or after the delay action of an automation email.
             */
            direction?: 'after';
            /**
             * The action that triggers the delay of an automation emails.
             */
            action: 'signup' | 'ecomm_abandoned_browse' | 'ecomm_abandoned_cart';
        };
    };
    path: {
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type PatchAutomationEmailWorkflowIdResponse = ({
    /**
     * A string that uniquely identifies the Automation email.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * The position of an Automation email in a workflow.
     */
    readonly position?: number;
    /**
     * The delay settings for an Automation email.
     */
    delay?: {
        /**
         * The delay amount for an Automation email.
         */
        readonly amount?: number;
        /**
         * The type of delay for an Automation email.
         */
        type?: 'now' | 'day' | 'hour' | 'week';
        /**
         * Whether the delay settings describe before or after the delay action of an Automation email.
         */
        direction?: 'before' | 'after';
        /**
         * The action that triggers the delay of an Automation email.
         */
        action?: 'previous_campaign_sent' | 'previous_campaign_opened' | 'previous_campaign_not_opened' | 'previous_campaign_clicked_any' | 'previous_campaign_not_clicked_any' | 'previous_campaign_specific_clicked' | 'ecomm_bought_any' | 'ecomm_bought_product' | 'ecomm_bought_category' | 'ecomm_not_bought_any' | 'ecomm_abandoned_cart' | 'campaign_sent' | 'opened_email' | 'not_opened_email' | 'clicked_email' | 'not_clicked_email' | 'campaign_specific_clicked' | 'manual' | 'signup' | 'merge_changed' | 'group_add' | 'group_remove' | 'mandrill_sent' | 'mandrill_opened' | 'mandrill_clicked' | 'mandrill_any' | 'api' | 'goal' | 'annual' | 'birthday' | 'date' | 'date_added' | 'tag_add';
        /**
         * The user-friendly description of the action that triggers an Automation email.
         */
        readonly action_description?: string;
        /**
         * The user-friendly description of the delay and trigger action settings for an Automation email.
         */
        readonly full_description?: string;
    };
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The date and time the campaign was started in ISO 8601 format.
     */
    readonly start_time?: string;
    /**
     * The link to the campaign's archive version in ISO 8601 format.
     */
    readonly archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'sending';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     *  The date and time a campaign was sent in ISO 8601 format
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url').
     */
    readonly content_type?: string;
    /**
     * Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign contains the *|BRAND:LOGO|* merge tag.
     */
    readonly has_logo_merge_tag?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * Settings for the campaign including the email subject, from name, and from email address.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on a subscriber's email address.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on a subscriber's email address.
             */
            notes?: boolean;
        };
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * Available triggers for Automation workflows.
     */
    trigger_settings?: {
        /**
         * The type of Automation workflow.
         */
        workflow_type: 'abandonedBrowse' | 'abandonedCart' | 'api' | 'bestCustomers' | 'categoryFollowup' | 'dateAdded' | 'emailFollowup' | 'emailSeries' | 'groupAdd' | 'groupRemove' | 'mandrill' | 'productFollowup' | 'purchaseFollowup' | 'recurringEvent' | 'specialEvent' | 'visitUrl' | 'welcomeSeries';
        /**
         * The title of the workflow type.
         */
        readonly workflow_title?: string;
        /**
         * A workflow's runtime settings for an Automation.
         */
        runtime?: {
            /**
             * The days an Automation workflow can send.
             */
            days?: Array<('sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday')>;
            /**
             * The hours an Automation workflow can send.
             */
            hours?: {
                /**
                 * When to send the Automation email.
                 */
                type: 'send_asap' | 'send_between' | 'send_at';
            };
        };
        /**
         * The number of emails in the Automation workflow.
         */
        readonly workflow_emails_count?: number;
    };
    /**
     * For sent campaigns, a summary of opens and clicks.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchAutomationEmailWorkflowIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsIdEmailsIdQueueData = {
    path: {
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type GetAutomationsIdEmailsIdQueueResponse = ({
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * A string that uniquely identifies an email in an Automation workflow.
     */
    readonly email_id?: string;
    /**
     * An array of objects, each representing a subscriber queue for an email in an Automation workflow.
     */
    readonly queue?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * A string that uniquely identifies an Automation workflow.
         */
        readonly workflow_id?: string;
        /**
         * A string that uniquely identifies an email in an Automation workflow.
         */
        readonly email_id?: string;
        /**
         * A string that uniquely identifies a list.
         */
        readonly list_id?: string;
        /**
         * The list member's email address.
         */
        email_address: string;
        /**
         * The date and time of the next send for the workflow email in ISO 8601 format.
         */
        readonly next_send?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsIdEmailsIdQueueError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAutomationsIdEmailsIdQueueData = {
    body: {
        /**
         * The list member's email address.
         */
        email_address: string;
    };
    path: {
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type PostAutomationsIdEmailsIdQueueResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * A string that uniquely identifies an email in an Automation workflow.
     */
    readonly email_id?: string;
    /**
     * A string that uniquely identifies a list.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The list member's email address.
     */
    email_address?: string;
    /**
     * The date and time of the next send for the workflow email in ISO 8601 format.
     */
    readonly next_send?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostAutomationsIdEmailsIdQueueError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsIdEmailsIdQueueIdData = {
    path: {
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type GetAutomationsIdEmailsIdQueueIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * A string that uniquely identifies an email in an Automation workflow.
     */
    readonly email_id?: string;
    /**
     * A string that uniquely identifies a list.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The list member's email address.
     */
    email_address?: string;
    /**
     * The date and time of the next send for the workflow email in ISO 8601 format.
     */
    readonly next_send?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsIdEmailsIdQueueIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAutomationsIdEmailsIdActionsPauseData = {
    path: {
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type PostAutomationsIdEmailsIdActionsPauseResponse = (void);

export type PostAutomationsIdEmailsIdActionsPauseError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAutomationsIdEmailsIdActionsStartData = {
    path: {
        /**
         * The unique id for the Automation workflow email.
         */
        workflow_email_id: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type PostAutomationsIdEmailsIdActionsStartResponse = (void);

export type PostAutomationsIdEmailsIdActionsStartError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsIdRemovedSubscribersData = {
    path: {
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type GetAutomationsIdRemovedSubscribersResponse = ({
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * An array of objects, each representing a subscriber who was removed from an Automation workflow.
     */
    readonly subscribers?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * A string that uniquely identifies an Automation workflow.
         */
        readonly workflow_id?: string;
        /**
         * A string that uniquely identifies a list.
         */
        readonly list_id?: string;
        /**
         * The list member's email address.
         */
        email_address?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsIdRemovedSubscribersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAutomationsIdRemovedSubscribersData = {
    body: {
        /**
         * The list member's email address.
         */
        email_address: string;
    };
    path: {
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type PostAutomationsIdRemovedSubscribersResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * A string that uniquely identifies a list.
     */
    readonly list_id?: string;
    /**
     * The list member's email address.
     */
    email_address?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostAutomationsIdRemovedSubscribersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAutomationsIdRemovedSubscribersIdData = {
    path: {
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
        /**
         * The unique id for the Automation workflow.
         */
        workflow_id: string;
    };
};

export type GetAutomationsIdRemovedSubscribersIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * A string that uniquely identifies an Automation workflow.
     */
    readonly workflow_id?: string;
    /**
     * A string that uniquely identifies a list.
     */
    readonly list_id?: string;
    /**
     * The list member's email address.
     */
    email_address?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAutomationsIdRemovedSubscribersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetBatchesData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetBatchesResponse = ({
    /**
     * An array of objects representing batch calls.
     */
    batches?: Array<{
        /**
         * A string that uniquely identifies this batch request.
         */
        readonly id?: string;
        /**
         * The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.
         */
        readonly status?: 'pending' | 'preprocessing' | 'started' | 'finalizing' | 'finished';
        /**
         * The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation.
         */
        readonly total_operations?: number;
        /**
         * The number of completed operations. This includes operations that returned an error.
         */
        readonly finished_operations?: number;
        /**
         * The number of completed operations that returned an error.
         */
        readonly errored_operations?: number;
        /**
         * The date and time when the server received the batch request in ISO 8601 format.
         */
        readonly submitted_at?: string;
        /**
         * The date and time when all operations in the batch request completed in ISO 8601 format.
         */
        readonly completed_at?: string;
        /**
         * The URL of the gzipped archive of the results of all the operations.
         */
        readonly response_body_url?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetBatchesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostBatchesData = {
    body: {
        /**
         * An array of objects that describes operations to perform.
         */
        operations: Array<{
            /**
             * The HTTP method to use for the operation.
             */
            method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
            /**
             * The relative path to use for the operation.
             */
            path: string;
            /**
             * Any request query parameters. Example parameters: {"count":10, "offset":0}
             */
            params?: unknown;
            /**
             * A string containing the JSON body to use with the request.
             */
            body?: string;
            /**
             * An optional client-supplied id returned with the operation results.
             */
            operation_id?: string;
        }>;
    };
};

export type PostBatchesResponse = ({
    /**
     * A string that uniquely identifies this batch request.
     */
    readonly id?: string;
    /**
     * The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.
     */
    readonly status?: 'pending' | 'preprocessing' | 'started' | 'finalizing' | 'finished';
    /**
     * The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation.
     */
    readonly total_operations?: number;
    /**
     * The number of completed operations. This includes operations that returned an error.
     */
    readonly finished_operations?: number;
    /**
     * The number of completed operations that returned an error.
     */
    readonly errored_operations?: number;
    /**
     * The date and time when the server received the batch request in ISO 8601 format.
     */
    readonly submitted_at?: string;
    /**
     * The date and time when all operations in the batch request completed in ISO 8601 format.
     */
    readonly completed_at?: string;
    /**
     * The URL of the gzipped archive of the results of all the operations.
     */
    readonly response_body_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostBatchesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetBatchesIdData = {
    path: {
        /**
         * The unique id for the batch operation.
         */
        batch_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetBatchesIdResponse = ({
    /**
     * A string that uniquely identifies this batch request.
     */
    readonly id?: string;
    /**
     * The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.
     */
    readonly status?: 'pending' | 'preprocessing' | 'started' | 'finalizing' | 'finished';
    /**
     * The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation.
     */
    readonly total_operations?: number;
    /**
     * The number of completed operations. This includes operations that returned an error.
     */
    readonly finished_operations?: number;
    /**
     * The number of completed operations that returned an error.
     */
    readonly errored_operations?: number;
    /**
     * The date and time when the server received the batch request in ISO 8601 format.
     */
    readonly submitted_at?: string;
    /**
     * The date and time when all operations in the batch request completed in ISO 8601 format.
     */
    readonly completed_at?: string;
    /**
     * The URL of the gzipped archive of the results of all the operations.
     */
    readonly response_body_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetBatchesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteBatchesIdData = {
    path: {
        /**
         * The unique id for the batch operation.
         */
        batch_id: string;
    };
};

export type DeleteBatchesIdResponse = (void);

export type DeleteBatchesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetBatchWebhooksData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetBatchWebhooksResponse = ({
    /**
     * An array of objects, each representing a Batch Webhook.
     */
    webhooks?: Array<{
        /**
         * A string that uniquely identifies this Batch Webhook.
         */
        readonly id?: string;
        /**
         * A valid URL for the Webhook.
         */
        url?: string;
        /**
         * Whether the webhook receives requests or not.
         */
        enabled?: boolean;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetBatchWebhooksError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostBatchWebhooksData = {
    body: {
        /**
         * A valid URL for the Webhook.
         */
        url: string;
        /**
         * Whether the webhook receives requests or not.
         */
        enabled?: boolean;
    };
};

export type PostBatchWebhooksResponse = ({
    /**
     * A string that uniquely identifies this Batch Webhook.
     */
    readonly id?: string;
    /**
     * A valid URL for the Webhook.
     */
    url?: string;
    /**
     * Whether the webhook receives requests or not.
     */
    enabled?: boolean;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostBatchWebhooksError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetBatchWebhookData = {
    path: {
        /**
         * The unique id for the batch webhook.
         */
        batch_webhook_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetBatchWebhookResponse = ({
    /**
     * A string that uniquely identifies this Batch Webhook.
     */
    readonly id?: string;
    /**
     * A valid URL for the Webhook.
     */
    url?: string;
    /**
     * Whether the webhook receives requests or not.
     */
    enabled?: boolean;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetBatchWebhookError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchBatchWebhooksData = {
    body: {
        /**
         * A valid URL for the Webhook.
         */
        url?: string;
        /**
         * Whether the webhook receives requests or not.
         */
        enabled?: boolean;
    };
    path: {
        /**
         * The unique id for the batch webhook.
         */
        batch_webhook_id: string;
    };
};

export type PatchBatchWebhooksResponse = ({
    /**
     * A string that uniquely identifies this Batch Webhook.
     */
    readonly id?: string;
    /**
     * A valid URL for the Webhook.
     */
    url?: string;
    /**
     * Whether the webhook receives requests or not.
     */
    enabled?: boolean;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchBatchWebhooksError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteBatchWebhookIdData = {
    path: {
        /**
         * The unique id for the batch webhook.
         */
        batch_webhook_id: string;
    };
};

export type DeleteBatchWebhookIdResponse = (void);

export type DeleteBatchWebhookIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetTemplateFoldersData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetTemplateFoldersResponse = ({
    /**
     * An array of objects representing template folders.
     */
    folders?: Array<{
        /**
         * The name of the folder.
         */
        name?: string;
        /**
         * A string that uniquely identifies this template folder.
         */
        readonly id?: string;
        /**
         * The number of templates in the folder.
         */
        readonly count?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetTemplateFoldersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostTemplateFoldersData = {
    body: {
        /**
         * The name of the folder.
         */
        name: string;
    };
};

export type PostTemplateFoldersResponse = ({
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * A string that uniquely identifies this template folder.
     */
    readonly id?: string;
    /**
     * The number of templates in the folder.
     */
    readonly count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostTemplateFoldersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetTemplateFoldersIdData = {
    path: {
        /**
         * The unique id for the template folder.
         */
        folder_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetTemplateFoldersIdResponse = ({
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * A string that uniquely identifies this template folder.
     */
    readonly id?: string;
    /**
     * The number of templates in the folder.
     */
    readonly count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetTemplateFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchTemplateFoldersIdData = {
    body: {
        /**
         * The name of the folder.
         */
        name: string;
    };
    path: {
        /**
         * The unique id for the template folder.
         */
        folder_id: string;
    };
};

export type PatchTemplateFoldersIdResponse = ({
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * A string that uniquely identifies this template folder.
     */
    readonly id?: string;
    /**
     * The number of templates in the folder.
     */
    readonly count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchTemplateFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteTemplateFoldersIdData = {
    path: {
        /**
         * The unique id for the template folder.
         */
        folder_id: string;
    };
};

export type DeleteTemplateFoldersIdResponse = (void);

export type DeleteTemplateFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignFoldersData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetCampaignFoldersResponse = ({
    /**
     * An array of objects representing campaign folders.
     */
    folders?: Array<{
        /**
         * The name of the folder.
         */
        name?: string;
        /**
         * A string that uniquely identifies this campaign folder.
         */
        readonly id?: string;
        /**
         * The number of campaigns in the folder.
         */
        readonly count?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignFoldersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignFoldersData = {
    body: {
        /**
         * Name to associate with the folder.
         */
        name: string;
    };
};

export type PostCampaignFoldersResponse = ({
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * A string that uniquely identifies this campaign folder.
     */
    readonly id?: string;
    /**
     * The number of campaigns in the folder.
     */
    readonly count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostCampaignFoldersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignFoldersIdData = {
    path: {
        /**
         * The unique id for the campaign folder.
         */
        folder_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetCampaignFoldersIdResponse = ({
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * A string that uniquely identifies this campaign folder.
     */
    readonly id?: string;
    /**
     * The number of campaigns in the folder.
     */
    readonly count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchCampaignFoldersIdData = {
    body: {
        /**
         * Name to associate with the folder.
         */
        name: string;
    };
    path: {
        /**
         * The unique id for the campaign folder.
         */
        folder_id: string;
    };
};

export type PatchCampaignFoldersIdResponse = ({
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * A string that uniquely identifies this campaign folder.
     */
    readonly id?: string;
    /**
     * The number of campaigns in the folder.
     */
    readonly count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchCampaignFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteCampaignFoldersIdData = {
    path: {
        /**
         * The unique id for the campaign folder.
         */
        folder_id: string;
    };
};

export type DeleteCampaignFoldersIdResponse = (void);

export type DeleteCampaignFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignsData = {
    query?: {
        /**
         * Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_create_time?: string;
        /**
         * Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_send_time?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * The unique folder id.
         */
        folder_id?: string;
        /**
         * Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
         */
        include_resend_shortcut_eligibility?: boolean;
        /**
         * The unique id for the list.
         */
        list_id?: string;
        /**
         * Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.
         */
        member_id?: string;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_create_time?: string;
        /**
         * Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_send_time?: string;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'create_time' | 'send_time';
        /**
         * The status of the campaign.
         */
        status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent';
        /**
         * The campaign type.
         */
        type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    };
};

export type GetCampaignsResponse = ({
    /**
     * An array of campaigns.
     */
    campaigns?: Array<{
        /**
         * A string that uniquely identifies this campaign.
         */
        readonly id?: string;
        /**
         * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
         */
        readonly web_id?: number;
        /**
         * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
         */
        readonly parent_campaign_id?: string;
        /**
         * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
         */
        type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
        /**
         * The date and time the campaign was created in ISO 8601 format.
         */
        readonly create_time?: string;
        /**
         * The link to the campaign's archive version in ISO 8601 format.
         */
        readonly archive_url?: string;
        /**
         * The original link to the campaign's archive version.
         */
        readonly long_archive_url?: string;
        /**
         * The current status of the campaign.
         */
        readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
        /**
         * The total number of emails sent for this campaign.
         */
        readonly emails_sent?: number;
        /**
         * The date and time a campaign was sent.
         */
        readonly send_time?: string;
        /**
         * How the campaign's content is put together.
         */
        content_type?: 'template' | 'html' | 'url' | 'multichannel';
        /**
         * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
         */
        readonly needs_block_refresh?: boolean;
        /**
         * Determines if the campaign qualifies to be resent to non-openers.
         */
        readonly resendable?: boolean;
        /**
         * List settings for the campaign.
         */
        recipients?: {
            /**
             * The unique list id.
             */
            list_id?: string;
            /**
             * The status of the list used, namely if it's deleted or disabled.
             */
            readonly list_is_active?: boolean;
            /**
             * The name of the list.
             */
            readonly list_name?: string;
            /**
             * A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML.
             */
            readonly segment_text?: string;
            /**
             * Count of the recipients on the associated list. Formatted as an integer.
             */
            readonly recipient_count?: number;
            /**
             * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
             */
            segment_opts?: {
                /**
                 * The id for an existing saved segment.
                 */
                saved_segment_id?: number;
                /**
                 * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
                 */
                prebuilt_segment_id?: string;
                /**
                 * Segment match type.
                 */
                match?: 'any' | 'all';
                /**
                 * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
                 */
                conditions?: Array<unknown>;
            };
        };
        /**
         * The settings for your campaign, including subject, from name, reply-to address, and more.
         */
        settings?: {
            /**
             * The subject line for the campaign.
             */
            subject_line?: string;
            /**
             * The preview text for the campaign.
             */
            preview_text?: string;
            /**
             * The title of the campaign.
             */
            title?: string;
            /**
             * The 'from' name on the campaign (not an email address).
             */
            from_name?: string;
            /**
             * The reply-to email address for the campaign.
             */
            reply_to?: string;
            /**
             * Use Mailchimp Conversation feature to manage out-of-office replies.
             */
            use_conversation?: boolean;
            /**
             * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
             */
            to_name?: string;
            /**
             * If the campaign is listed in a folder, the id for that folder.
             */
            folder_id?: string;
            /**
             * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
             */
            authenticate?: boolean;
            /**
             * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
             */
            auto_footer?: boolean;
            /**
             * Automatically inline the CSS included with the campaign content.
             */
            inline_css?: boolean;
            /**
             * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
             */
            auto_tweet?: boolean;
            /**
             * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
             */
            auto_fb_post?: Array<(string)>;
            /**
             * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
             */
            fb_comments?: boolean;
            /**
             * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
             */
            readonly timewarp?: boolean;
            /**
             * The id for the template used in this campaign.
             */
            template_id?: number;
            /**
             * Whether the campaign uses the drag-and-drop editor.
             */
            readonly drag_and_drop?: boolean;
        };
        /**
         * The settings specific to A/B test campaigns.
         */
        variate_settings?: {
            /**
             * ID for the winning combination.
             */
            readonly winning_combination_id?: string;
            /**
             * ID of the campaign that was sent to the remaining recipients based on the winning combination.
             */
            readonly winning_campaign_id?: string;
            /**
             * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
             */
            winner_criteria?: 'opens' | 'clicks' | 'manual' | 'total_revenue';
            /**
             * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
             */
            wait_time?: number;
            /**
             * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
             */
            test_size?: number;
            /**
             * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
             */
            subject_lines?: Array<(string)>;
            /**
             * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
             */
            send_times?: Array<(string)>;
            /**
             * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
             */
            from_names?: Array<(string)>;
            /**
             * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
             */
            reply_to_addresses?: Array<(string)>;
            /**
             * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
             */
            readonly contents?: Array<(string)>;
            /**
             * Combinations of possible variables used to build emails.
             */
            readonly combinations?: Array<{
                /**
                 * Unique ID for the combination.
                 */
                id?: string;
                /**
                 * The index of `variate_settings.subject_lines` used.
                 */
                subject_line?: number;
                /**
                 * The index of `variate_settings.send_times` used.
                 */
                send_time?: number;
                /**
                 * The index of `variate_settings.from_names` used.
                 */
                from_name?: number;
                /**
                 * The index of `variate_settings.reply_to_addresses` used.
                 */
                reply_to?: number;
                /**
                 * The index of `variate_settings.contents` used.
                 */
                content_description?: number;
                /**
                 * The number of recipients for this combination.
                 */
                recipients?: number;
            }>;
        };
        /**
         * The tracking options for a campaign.
         */
        tracking?: {
            /**
             * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            opens?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            html_clicks?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            text_clicks?: boolean;
            /**
             * Deprecated
             */
            goal_tracking?: boolean;
            /**
             * Whether to enable e-commerce tracking.
             */
            ecomm360?: boolean;
            /**
             * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
             */
            google_analytics?: string;
            /**
             * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
             */
            clicktale?: string;
            /**
             * Deprecated
             */
            salesforce?: {
                /**
                 * Create a campaign in a connected Salesforce account.
                 */
                campaign?: boolean;
                /**
                 * Update contact notes for a campaign based on subscriber email addresses.
                 */
                notes?: boolean;
            };
            /**
             * Deprecated
             */
            capsule?: {
                /**
                 * Update contact notes for a campaign based on subscriber email addresses.
                 */
                notes?: boolean;
            };
        };
        /**
         * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
         */
        rss_opts?: {
            /**
             * The URL for the RSS feed.
             */
            feed_url?: string;
            /**
             * The frequency of the RSS Campaign.
             */
            frequency?: 'daily' | 'weekly' | 'monthly';
            /**
             * The schedule for sending the RSS Campaign.
             */
            schedule?: {
                /**
                 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
                 */
                hour?: number;
                /**
                 * The days of the week to send a daily RSS Campaign.
                 */
                daily_send?: {
                    /**
                     * Sends the daily RSS Campaign on Sundays.
                     */
                    sunday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Mondays.
                     */
                    monday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Tuesdays.
                     */
                    tuesday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Wednesdays.
                     */
                    wednesday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Thursdays.
                     */
                    thursday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Fridays.
                     */
                    friday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Saturdays.
                     */
                    saturday?: boolean;
                };
                /**
                 * The day of the week to send a weekly RSS Campaign.
                 */
                weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
                /**
                 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
                 */
                monthly_send_date?: number;
            };
            /**
             * The date the campaign was last sent.
             */
            readonly last_sent?: string;
            /**
             * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
             */
            constrain_rss_img?: boolean;
        };
        /**
         * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
         */
        readonly ab_split_opts?: {
            /**
             * The type of AB split to run.
             */
            split_test?: 'subject' | 'from_name' | 'schedule';
            /**
             * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
             */
            pick_winner?: 'opens' | 'clicks' | 'manual';
            /**
             * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
             */
            wait_units?: 'hours' | 'days';
            /**
             * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
             */
            wait_time?: number;
            /**
             * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
             */
            split_size?: number;
            /**
             * For campaigns split on 'From Name', the name for Group A.
             */
            from_name_a?: string;
            /**
             * For campaigns split on 'From Name', the name for Group B.
             */
            from_name_b?: string;
            /**
             * For campaigns split on 'From Name', the reply-to address for Group A.
             */
            reply_email_a?: string;
            /**
             * For campaigns split on 'From Name', the reply-to address for Group B.
             */
            reply_email_b?: string;
            /**
             * For campaigns split on 'Subject Line', the subject line for Group A.
             */
            subject_a?: string;
            /**
             * For campaigns split on 'Subject Line', the subject line for Group B.
             */
            subject_b?: string;
            /**
             * The send time for Group A.
             */
            send_time_a?: string;
            /**
             * The send time for Group B.
             */
            send_time_b?: string;
            /**
             * The send time for the winning version.
             */
            send_time_winner?: string;
        };
        /**
         * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
         */
        social_card?: {
            /**
             * The url for the header image for the card.
             */
            image_url?: string;
            /**
             * A short summary of the campaign to display.
             */
            description?: string;
            /**
             * The title for the card. Typically the subject line of the campaign.
             */
            title?: string;
        };
        /**
         * For sent campaigns, a summary of opens, clicks, and e-commerce data.
         */
        report_summary?: {
            /**
             * The total number of opens for a campaign.
             */
            readonly opens?: number;
            /**
             * The number of unique opens.
             */
            readonly unique_opens?: number;
            /**
             * The number of unique opens divided by the total number of successful deliveries.
             */
            readonly open_rate?: number;
            /**
             * The total number of clicks for an campaign.
             */
            readonly clicks?: number;
            /**
             * The number of unique clicks.
             */
            readonly subscriber_clicks?: number;
            /**
             * The number of unique clicks divided by the total number of successful deliveries.
             */
            readonly click_rate?: number;
            /**
             * E-Commerce stats for a campaign.
             */
            ecommerce?: {
                /**
                 * The total orders for a campaign.
                 */
                readonly total_orders?: number;
                /**
                 * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
                 */
                readonly total_spent?: number;
                /**
                 * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
                 */
                readonly total_revenue?: number;
            };
        };
        /**
         * Updates on campaigns in the process of sending.
         */
        delivery_status?: {
            /**
             * Whether Campaign Delivery Status is enabled for this account and campaign.
             */
            readonly enabled?: boolean;
            /**
             * Whether a campaign send can be canceled.
             */
            readonly can_cancel?: boolean;
            /**
             * The current state of a campaign delivery.
             */
            readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
            /**
             * The total number of emails confirmed sent for this campaign so far.
             */
            readonly emails_sent?: number;
            /**
             * The total number of emails canceled for this campaign.
             */
            readonly emails_canceled?: number;
        };
        /**
         * Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter `include_resend_shortcuts` is `true`.
         */
        resend_shortcut_eligibility?: {
            /**
             * Determines if the campaign qualifies to be resent to non-openers.
             */
            to_non_openers?: {
                /**
                 * Determines if the campaign qualifies to be resent to this segment.
                 */
                readonly is_eligible?: boolean;
                /**
                 * The reason the campaign is not eligible to be resent to this segment.
                 */
                readonly reason?: string;
            };
            /**
             * Determines if the campaign qualifies to be resent to new subscribers.
             */
            to_new_subscribers?: {
                /**
                 * Determines if the campaign qualifies to be resent to this segment.
                 */
                readonly is_eligible?: boolean;
                /**
                 * The reason the campaign is not eligible to be resent to this segment.
                 */
                readonly reason?: string;
            };
            /**
             * Determines if the campaign qualifies to be resent to non-clickers.
             */
            to_non_clickers?: {
                /**
                 * Determines if the campaign qualifies to be resent to this segment.
                 */
                readonly is_eligible?: boolean;
                /**
                 * The reason the campaign is not eligible to be resent to this segment.
                 */
                readonly reason?: string;
            };
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsData = {
    body: {
        /**
         * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
         */
        type: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
        /**
         * List settings for the campaign.
         */
        recipients?: {
            /**
             * The unique list id.
             */
            list_id: string;
            /**
             * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
             */
            segment_opts?: {
                /**
                 * The id for an existing saved segment.
                 */
                saved_segment_id?: number;
                /**
                 * Segment match type.
                 */
                match?: 'any' | 'all';
                /**
                 * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
                 */
                conditions?: Array<unknown>;
            };
        };
        /**
         * The settings for your campaign, including subject, from name, reply-to address, and more.
         */
        settings?: {
            /**
             * The subject line for the campaign.
             */
            subject_line?: string;
            /**
             * The preview text for the campaign.
             */
            preview_text?: string;
            /**
             * The title of the campaign.
             */
            title?: string;
            /**
             * The 'from' name on the campaign (not an email address).
             */
            from_name?: string;
            /**
             * The reply-to email address for the campaign. Note: while this field is not required for campaign creation, it is required for sending.
             */
            reply_to?: string;
            /**
             * Use Mailchimp Conversation feature to manage out-of-office replies.
             */
            use_conversation?: boolean;
            /**
             * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
             */
            to_name?: string;
            /**
             * If the campaign is listed in a folder, the id for that folder.
             */
            folder_id?: string;
            /**
             * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
             */
            authenticate?: boolean;
            /**
             * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
             */
            auto_footer?: boolean;
            /**
             * Automatically inline the CSS included with the campaign content.
             */
            inline_css?: boolean;
            /**
             * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
             */
            auto_tweet?: boolean;
            /**
             * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
             */
            auto_fb_post?: Array<(string)>;
            /**
             * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
             */
            fb_comments?: boolean;
            /**
             * The id of the template to use.
             */
            template_id?: number;
        };
        /**
         * The settings specific to A/B test campaigns.
         */
        variate_settings?: {
            /**
             * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
             */
            winner_criteria: 'opens' | 'clicks' | 'manual' | 'total_revenue';
            /**
             * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
             */
            wait_time?: number;
            /**
             * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
             */
            test_size?: number;
            /**
             * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
             */
            subject_lines?: Array<(string)>;
            /**
             * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
             */
            send_times?: Array<(string)>;
            /**
             * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
             */
            from_names?: Array<(string)>;
            /**
             * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
             */
            reply_to_addresses?: Array<(string)>;
        };
        /**
         * The tracking options for a campaign.
         */
        tracking?: {
            /**
             * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            opens?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            html_clicks?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            text_clicks?: boolean;
            /**
             * Deprecated
             */
            goal_tracking?: boolean;
            /**
             * Whether to enable e-commerce tracking.
             */
            ecomm360?: boolean;
            /**
             * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
             */
            google_analytics?: string;
            /**
             * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
             */
            clicktale?: string;
            /**
             * Deprecated
             */
            salesforce?: {
                /**
                 * Create a campaign in a connected Salesforce account.
                 */
                campaign?: boolean;
                /**
                 * Update contact notes for a campaign based on subscriber email addresses.
                 */
                notes?: boolean;
            };
            /**
             * Deprecated
             */
            capsule?: {
                /**
                 * Update contact notes for a campaign based on subscriber email addresses.
                 */
                notes?: boolean;
            };
        };
        /**
         * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options, specific to an RSS campaign.
         */
        rss_opts?: {
            /**
             * The URL for the RSS feed.
             */
            feed_url: string;
            /**
             * The frequency of the RSS Campaign.
             */
            frequency: 'daily' | 'weekly' | 'monthly';
            /**
             * The schedule for sending the RSS Campaign.
             */
            schedule?: {
                /**
                 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
                 */
                hour?: number;
                /**
                 * The days of the week to send a daily RSS Campaign.
                 */
                daily_send?: {
                    /**
                     * Sends the daily RSS Campaign on Sundays.
                     */
                    sunday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Mondays.
                     */
                    monday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Tuesdays.
                     */
                    tuesday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Wednesdays.
                     */
                    wednesday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Thursdays.
                     */
                    thursday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Fridays.
                     */
                    friday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Saturdays.
                     */
                    saturday?: boolean;
                };
                /**
                 * The day of the week to send a weekly RSS Campaign.
                 */
                weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
                /**
                 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
                 */
                monthly_send_date?: number;
            };
            /**
             * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
             */
            constrain_rss_img?: boolean;
        };
        /**
         * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
         */
        social_card?: {
            /**
             * The url for the header image for the card.
             */
            image_url?: string;
            /**
             * A short summary of the campaign to display.
             */
            description?: string;
            /**
             * The title for the card. Typically the subject line of the campaign.
             */
            title?: string;
        };
        /**
         * How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template.
         */
        content_type?: 'template' | 'multichannel';
    };
};

export type PostCampaignsResponse = ({
    /**
     * A string that uniquely identifies this campaign.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
     */
    readonly parent_campaign_id?: string;
    /**
     * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
     */
    type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The link to the campaign's archive version in ISO 8601 format.
     */
    readonly archive_url?: string;
    /**
     * The original link to the campaign's archive version.
     */
    readonly long_archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     * The date and time a campaign was sent.
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together.
     */
    content_type?: 'template' | 'html' | 'url' | 'multichannel';
    /**
     * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign qualifies to be resent to non-openers.
     */
    readonly resendable?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The settings for your campaign, including subject, from name, reply-to address, and more.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Use Mailchimp Conversation feature to manage out-of-office replies.
         */
        use_conversation?: boolean;
        /**
         * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * If the campaign is listed in a folder, the id for that folder.
         */
        folder_id?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
         */
        readonly timewarp?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The settings specific to A/B test campaigns.
     */
    variate_settings?: {
        /**
         * ID for the winning combination.
         */
        readonly winning_combination_id?: string;
        /**
         * ID of the campaign that was sent to the remaining recipients based on the winning combination.
         */
        readonly winning_campaign_id?: string;
        /**
         * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
         */
        winner_criteria?: 'opens' | 'clicks' | 'manual' | 'total_revenue';
        /**
         * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
         */
        wait_time?: number;
        /**
         * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
         */
        test_size?: number;
        /**
         * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
         */
        subject_lines?: Array<(string)>;
        /**
         * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
         */
        send_times?: Array<(string)>;
        /**
         * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
         */
        from_names?: Array<(string)>;
        /**
         * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
         */
        reply_to_addresses?: Array<(string)>;
        /**
         * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
         */
        readonly contents?: Array<(string)>;
        /**
         * Combinations of possible variables used to build emails.
         */
        readonly combinations?: Array<{
            /**
             * Unique ID for the combination.
             */
            id?: string;
            /**
             * The index of `variate_settings.subject_lines` used.
             */
            subject_line?: number;
            /**
             * The index of `variate_settings.send_times` used.
             */
            send_time?: number;
            /**
             * The index of `variate_settings.from_names` used.
             */
            from_name?: number;
            /**
             * The index of `variate_settings.reply_to_addresses` used.
             */
            reply_to?: number;
            /**
             * The index of `variate_settings.contents` used.
             */
            content_description?: number;
            /**
             * The number of recipients for this combination.
             */
            recipients?: number;
        }>;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
     */
    rss_opts?: {
        /**
         * The URL for the RSS feed.
         */
        feed_url?: string;
        /**
         * The frequency of the RSS Campaign.
         */
        frequency?: 'daily' | 'weekly' | 'monthly';
        /**
         * The schedule for sending the RSS Campaign.
         */
        schedule?: {
            /**
             * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
             */
            hour?: number;
            /**
             * The days of the week to send a daily RSS Campaign.
             */
            daily_send?: {
                /**
                 * Sends the daily RSS Campaign on Sundays.
                 */
                sunday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Mondays.
                 */
                monday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Tuesdays.
                 */
                tuesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Wednesdays.
                 */
                wednesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Thursdays.
                 */
                thursday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Fridays.
                 */
                friday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Saturdays.
                 */
                saturday?: boolean;
            };
            /**
             * The day of the week to send a weekly RSS Campaign.
             */
            weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
            /**
             * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
             */
            monthly_send_date?: number;
        };
        /**
         * The date the campaign was last sent.
         */
        readonly last_sent?: string;
        /**
         * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
         */
        constrain_rss_img?: boolean;
    };
    /**
     * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
     */
    readonly ab_split_opts?: {
        /**
         * The type of AB split to run.
         */
        split_test?: 'subject' | 'from_name' | 'schedule';
        /**
         * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
         */
        pick_winner?: 'opens' | 'clicks' | 'manual';
        /**
         * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
         */
        wait_units?: 'hours' | 'days';
        /**
         * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
         */
        wait_time?: number;
        /**
         * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
         */
        split_size?: number;
        /**
         * For campaigns split on 'From Name', the name for Group A.
         */
        from_name_a?: string;
        /**
         * For campaigns split on 'From Name', the name for Group B.
         */
        from_name_b?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group A.
         */
        reply_email_a?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group B.
         */
        reply_email_b?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group A.
         */
        subject_a?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group B.
         */
        subject_b?: string;
        /**
         * The send time for Group A.
         */
        send_time_a?: string;
        /**
         * The send time for Group B.
         */
        send_time_b?: string;
        /**
         * The send time for the winning version.
         */
        send_time_winner?: string;
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * For sent campaigns, a summary of opens, clicks, and e-commerce data.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
        };
    };
    /**
     * Updates on campaigns in the process of sending.
     */
    delivery_status?: {
        /**
         * Whether Campaign Delivery Status is enabled for this account and campaign.
         */
        readonly enabled?: boolean;
        /**
         * Whether a campaign send can be canceled.
         */
        readonly can_cancel?: boolean;
        /**
         * The current state of a campaign delivery.
         */
        readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
        /**
         * The total number of emails confirmed sent for this campaign so far.
         */
        readonly emails_sent?: number;
        /**
         * The total number of emails canceled for this campaign.
         */
        readonly emails_canceled?: number;
    };
    /**
     * Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter `include_resend_shortcuts` is `true`.
     */
    resend_shortcut_eligibility?: {
        /**
         * Determines if the campaign qualifies to be resent to non-openers.
         */
        to_non_openers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
        /**
         * Determines if the campaign qualifies to be resent to new subscribers.
         */
        to_new_subscribers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
        /**
         * Determines if the campaign qualifies to be resent to non-clickers.
         */
        to_non_clickers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostCampaignsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignsIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
         */
        include_resend_shortcut_eligibility?: boolean;
    };
};

export type GetCampaignsIdResponse = ({
    /**
     * A string that uniquely identifies this campaign.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
     */
    readonly parent_campaign_id?: string;
    /**
     * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
     */
    type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The link to the campaign's archive version in ISO 8601 format.
     */
    readonly archive_url?: string;
    /**
     * The original link to the campaign's archive version.
     */
    readonly long_archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     * The date and time a campaign was sent.
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together.
     */
    content_type?: 'template' | 'html' | 'url' | 'multichannel';
    /**
     * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign qualifies to be resent to non-openers.
     */
    readonly resendable?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The settings for your campaign, including subject, from name, reply-to address, and more.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Use Mailchimp Conversation feature to manage out-of-office replies.
         */
        use_conversation?: boolean;
        /**
         * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * If the campaign is listed in a folder, the id for that folder.
         */
        folder_id?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
         */
        readonly timewarp?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The settings specific to A/B test campaigns.
     */
    variate_settings?: {
        /**
         * ID for the winning combination.
         */
        readonly winning_combination_id?: string;
        /**
         * ID of the campaign that was sent to the remaining recipients based on the winning combination.
         */
        readonly winning_campaign_id?: string;
        /**
         * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
         */
        winner_criteria?: 'opens' | 'clicks' | 'manual' | 'total_revenue';
        /**
         * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
         */
        wait_time?: number;
        /**
         * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
         */
        test_size?: number;
        /**
         * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
         */
        subject_lines?: Array<(string)>;
        /**
         * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
         */
        send_times?: Array<(string)>;
        /**
         * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
         */
        from_names?: Array<(string)>;
        /**
         * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
         */
        reply_to_addresses?: Array<(string)>;
        /**
         * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
         */
        readonly contents?: Array<(string)>;
        /**
         * Combinations of possible variables used to build emails.
         */
        readonly combinations?: Array<{
            /**
             * Unique ID for the combination.
             */
            id?: string;
            /**
             * The index of `variate_settings.subject_lines` used.
             */
            subject_line?: number;
            /**
             * The index of `variate_settings.send_times` used.
             */
            send_time?: number;
            /**
             * The index of `variate_settings.from_names` used.
             */
            from_name?: number;
            /**
             * The index of `variate_settings.reply_to_addresses` used.
             */
            reply_to?: number;
            /**
             * The index of `variate_settings.contents` used.
             */
            content_description?: number;
            /**
             * The number of recipients for this combination.
             */
            recipients?: number;
        }>;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
     */
    rss_opts?: {
        /**
         * The URL for the RSS feed.
         */
        feed_url?: string;
        /**
         * The frequency of the RSS Campaign.
         */
        frequency?: 'daily' | 'weekly' | 'monthly';
        /**
         * The schedule for sending the RSS Campaign.
         */
        schedule?: {
            /**
             * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
             */
            hour?: number;
            /**
             * The days of the week to send a daily RSS Campaign.
             */
            daily_send?: {
                /**
                 * Sends the daily RSS Campaign on Sundays.
                 */
                sunday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Mondays.
                 */
                monday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Tuesdays.
                 */
                tuesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Wednesdays.
                 */
                wednesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Thursdays.
                 */
                thursday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Fridays.
                 */
                friday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Saturdays.
                 */
                saturday?: boolean;
            };
            /**
             * The day of the week to send a weekly RSS Campaign.
             */
            weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
            /**
             * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
             */
            monthly_send_date?: number;
        };
        /**
         * The date the campaign was last sent.
         */
        readonly last_sent?: string;
        /**
         * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
         */
        constrain_rss_img?: boolean;
    };
    /**
     * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
     */
    readonly ab_split_opts?: {
        /**
         * The type of AB split to run.
         */
        split_test?: 'subject' | 'from_name' | 'schedule';
        /**
         * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
         */
        pick_winner?: 'opens' | 'clicks' | 'manual';
        /**
         * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
         */
        wait_units?: 'hours' | 'days';
        /**
         * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
         */
        wait_time?: number;
        /**
         * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
         */
        split_size?: number;
        /**
         * For campaigns split on 'From Name', the name for Group A.
         */
        from_name_a?: string;
        /**
         * For campaigns split on 'From Name', the name for Group B.
         */
        from_name_b?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group A.
         */
        reply_email_a?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group B.
         */
        reply_email_b?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group A.
         */
        subject_a?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group B.
         */
        subject_b?: string;
        /**
         * The send time for Group A.
         */
        send_time_a?: string;
        /**
         * The send time for Group B.
         */
        send_time_b?: string;
        /**
         * The send time for the winning version.
         */
        send_time_winner?: string;
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * For sent campaigns, a summary of opens, clicks, and e-commerce data.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
        };
    };
    /**
     * Updates on campaigns in the process of sending.
     */
    delivery_status?: {
        /**
         * Whether Campaign Delivery Status is enabled for this account and campaign.
         */
        readonly enabled?: boolean;
        /**
         * Whether a campaign send can be canceled.
         */
        readonly can_cancel?: boolean;
        /**
         * The current state of a campaign delivery.
         */
        readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
        /**
         * The total number of emails confirmed sent for this campaign so far.
         */
        readonly emails_sent?: number;
        /**
         * The total number of emails canceled for this campaign.
         */
        readonly emails_canceled?: number;
    };
    /**
     * Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter `include_resend_shortcuts` is `true`.
     */
    resend_shortcut_eligibility?: {
        /**
         * Determines if the campaign qualifies to be resent to non-openers.
         */
        to_non_openers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
        /**
         * Determines if the campaign qualifies to be resent to new subscribers.
         */
        to_new_subscribers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
        /**
         * Determines if the campaign qualifies to be resent to non-clickers.
         */
        to_non_clickers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchCampaignsIdData = {
    body: {
        /**
         * List settings for the campaign.
         */
        recipients?: {
            /**
             * The unique list id.
             */
            list_id: string;
            /**
             * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
             */
            segment_opts?: {
                /**
                 * The id for an existing saved segment.
                 */
                saved_segment_id?: number;
                /**
                 * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
                 */
                prebuilt_segment_id?: string;
                /**
                 * Segment match type.
                 */
                match?: 'any' | 'all';
                /**
                 * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
                 */
                conditions?: Array<unknown>;
            };
        };
        /**
         * The settings for your campaign, including subject, from name, reply-to address, and more.
         */
        settings: {
            /**
             * The subject line for the campaign.
             */
            subject_line: string;
            /**
             * The preview text for the campaign.
             */
            preview_text?: string;
            /**
             * The title of the campaign.
             */
            title?: string;
            /**
             * The 'from' name on the campaign (not an email address).
             */
            from_name: string;
            /**
             * The reply-to email address for the campaign.
             */
            reply_to: string;
            /**
             * Use Mailchimp Conversation feature to manage out-of-office replies.
             */
            use_conversation?: boolean;
            /**
             * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
             */
            to_name?: string;
            /**
             * If the campaign is listed in a folder, the id for that folder.
             */
            folder_id?: string;
            /**
             * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
             */
            authenticate?: boolean;
            /**
             * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
             */
            auto_footer?: boolean;
            /**
             * Automatically inline the CSS included with the campaign content.
             */
            inline_css?: boolean;
            /**
             * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
             */
            auto_tweet?: boolean;
            /**
             * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
             */
            auto_fb_post?: Array<(string)>;
            /**
             * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
             */
            fb_comments?: boolean;
            /**
             * The id of the template to use.
             */
            template_id?: number;
        };
        /**
         * The settings specific to A/B test campaigns.
         */
        variate_settings?: {
            /**
             * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
             */
            winner_criteria: 'opens' | 'clicks' | 'manual' | 'total_revenue';
            /**
             * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
             */
            wait_time?: number;
            /**
             * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
             */
            test_size?: number;
            /**
             * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
             */
            subject_lines?: Array<(string)>;
            /**
             * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
             */
            send_times?: Array<(string)>;
            /**
             * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
             */
            from_names?: Array<(string)>;
            /**
             * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
             */
            reply_to_addresses?: Array<(string)>;
        };
        /**
         * The tracking options for a campaign.
         */
        tracking?: {
            /**
             * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            opens?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            html_clicks?: boolean;
            /**
             * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
             */
            text_clicks?: boolean;
            /**
             * Deprecated
             */
            goal_tracking?: boolean;
            /**
             * Whether to enable e-commerce tracking.
             */
            ecomm360?: boolean;
            /**
             * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
             */
            google_analytics?: string;
            /**
             * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
             */
            clicktale?: string;
            /**
             * Deprecated
             */
            salesforce?: {
                /**
                 * Create a campaign in a connected Salesforce account.
                 */
                campaign?: boolean;
                /**
                 * Update contact notes for a campaign based on subscriber email addresses.
                 */
                notes?: boolean;
            };
            /**
             * Deprecated
             */
            capsule?: {
                /**
                 * Update contact notes for a campaign based on subscriber email addresses.
                 */
                notes?: boolean;
            };
        };
        /**
         * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
         */
        rss_opts?: {
            /**
             * The URL for the RSS feed.
             */
            feed_url: string;
            /**
             * The frequency of the RSS Campaign.
             */
            frequency: 'daily' | 'weekly' | 'monthly';
            /**
             * The schedule for sending the RSS Campaign.
             */
            schedule?: {
                /**
                 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
                 */
                hour?: number;
                /**
                 * The days of the week to send a daily RSS Campaign.
                 */
                daily_send?: {
                    /**
                     * Sends the daily RSS Campaign on Sundays.
                     */
                    sunday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Mondays.
                     */
                    monday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Tuesdays.
                     */
                    tuesday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Wednesdays.
                     */
                    wednesday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Thursdays.
                     */
                    thursday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Fridays.
                     */
                    friday?: boolean;
                    /**
                     * Sends the daily RSS Campaign on Saturdays.
                     */
                    saturday?: boolean;
                };
                /**
                 * The day of the week to send a weekly RSS Campaign.
                 */
                weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
                /**
                 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
                 */
                monthly_send_date?: number;
            };
            /**
             * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
             */
            constrain_rss_img?: boolean;
        };
        /**
         * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
         */
        social_card?: {
            /**
             * The url for the header image for the card.
             */
            image_url?: string;
            /**
             * A short summary of the campaign to display.
             */
            description?: string;
            /**
             * The title for the card. Typically the subject line of the campaign.
             */
            title?: string;
        };
    };
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PatchCampaignsIdResponse = ({
    /**
     * A string that uniquely identifies this campaign.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
     */
    readonly parent_campaign_id?: string;
    /**
     * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
     */
    type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The link to the campaign's archive version in ISO 8601 format.
     */
    readonly archive_url?: string;
    /**
     * The original link to the campaign's archive version.
     */
    readonly long_archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     * The date and time a campaign was sent.
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together.
     */
    content_type?: 'template' | 'html' | 'url' | 'multichannel';
    /**
     * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign qualifies to be resent to non-openers.
     */
    readonly resendable?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The settings for your campaign, including subject, from name, reply-to address, and more.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Use Mailchimp Conversation feature to manage out-of-office replies.
         */
        use_conversation?: boolean;
        /**
         * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * If the campaign is listed in a folder, the id for that folder.
         */
        folder_id?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
         */
        readonly timewarp?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The settings specific to A/B test campaigns.
     */
    variate_settings?: {
        /**
         * ID for the winning combination.
         */
        readonly winning_combination_id?: string;
        /**
         * ID of the campaign that was sent to the remaining recipients based on the winning combination.
         */
        readonly winning_campaign_id?: string;
        /**
         * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
         */
        winner_criteria?: 'opens' | 'clicks' | 'manual' | 'total_revenue';
        /**
         * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
         */
        wait_time?: number;
        /**
         * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
         */
        test_size?: number;
        /**
         * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
         */
        subject_lines?: Array<(string)>;
        /**
         * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
         */
        send_times?: Array<(string)>;
        /**
         * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
         */
        from_names?: Array<(string)>;
        /**
         * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
         */
        reply_to_addresses?: Array<(string)>;
        /**
         * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
         */
        readonly contents?: Array<(string)>;
        /**
         * Combinations of possible variables used to build emails.
         */
        readonly combinations?: Array<{
            /**
             * Unique ID for the combination.
             */
            id?: string;
            /**
             * The index of `variate_settings.subject_lines` used.
             */
            subject_line?: number;
            /**
             * The index of `variate_settings.send_times` used.
             */
            send_time?: number;
            /**
             * The index of `variate_settings.from_names` used.
             */
            from_name?: number;
            /**
             * The index of `variate_settings.reply_to_addresses` used.
             */
            reply_to?: number;
            /**
             * The index of `variate_settings.contents` used.
             */
            content_description?: number;
            /**
             * The number of recipients for this combination.
             */
            recipients?: number;
        }>;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
     */
    rss_opts?: {
        /**
         * The URL for the RSS feed.
         */
        feed_url?: string;
        /**
         * The frequency of the RSS Campaign.
         */
        frequency?: 'daily' | 'weekly' | 'monthly';
        /**
         * The schedule for sending the RSS Campaign.
         */
        schedule?: {
            /**
             * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
             */
            hour?: number;
            /**
             * The days of the week to send a daily RSS Campaign.
             */
            daily_send?: {
                /**
                 * Sends the daily RSS Campaign on Sundays.
                 */
                sunday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Mondays.
                 */
                monday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Tuesdays.
                 */
                tuesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Wednesdays.
                 */
                wednesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Thursdays.
                 */
                thursday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Fridays.
                 */
                friday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Saturdays.
                 */
                saturday?: boolean;
            };
            /**
             * The day of the week to send a weekly RSS Campaign.
             */
            weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
            /**
             * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
             */
            monthly_send_date?: number;
        };
        /**
         * The date the campaign was last sent.
         */
        readonly last_sent?: string;
        /**
         * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
         */
        constrain_rss_img?: boolean;
    };
    /**
     * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
     */
    readonly ab_split_opts?: {
        /**
         * The type of AB split to run.
         */
        split_test?: 'subject' | 'from_name' | 'schedule';
        /**
         * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
         */
        pick_winner?: 'opens' | 'clicks' | 'manual';
        /**
         * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
         */
        wait_units?: 'hours' | 'days';
        /**
         * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
         */
        wait_time?: number;
        /**
         * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
         */
        split_size?: number;
        /**
         * For campaigns split on 'From Name', the name for Group A.
         */
        from_name_a?: string;
        /**
         * For campaigns split on 'From Name', the name for Group B.
         */
        from_name_b?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group A.
         */
        reply_email_a?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group B.
         */
        reply_email_b?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group A.
         */
        subject_a?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group B.
         */
        subject_b?: string;
        /**
         * The send time for Group A.
         */
        send_time_a?: string;
        /**
         * The send time for Group B.
         */
        send_time_b?: string;
        /**
         * The send time for the winning version.
         */
        send_time_winner?: string;
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * For sent campaigns, a summary of opens, clicks, and e-commerce data.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
        };
    };
    /**
     * Updates on campaigns in the process of sending.
     */
    delivery_status?: {
        /**
         * Whether Campaign Delivery Status is enabled for this account and campaign.
         */
        readonly enabled?: boolean;
        /**
         * Whether a campaign send can be canceled.
         */
        readonly can_cancel?: boolean;
        /**
         * The current state of a campaign delivery.
         */
        readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
        /**
         * The total number of emails confirmed sent for this campaign so far.
         */
        readonly emails_sent?: number;
        /**
         * The total number of emails canceled for this campaign.
         */
        readonly emails_canceled?: number;
    };
    /**
     * Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter `include_resend_shortcuts` is `true`.
     */
    resend_shortcut_eligibility?: {
        /**
         * Determines if the campaign qualifies to be resent to non-openers.
         */
        to_non_openers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
        /**
         * Determines if the campaign qualifies to be resent to new subscribers.
         */
        to_new_subscribers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
        /**
         * Determines if the campaign qualifies to be resent to non-clickers.
         */
        to_non_clickers?: {
            /**
             * Determines if the campaign qualifies to be resent to this segment.
             */
            readonly is_eligible?: boolean;
            /**
             * The reason the campaign is not eligible to be resent to this segment.
             */
            readonly reason?: string;
        };
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchCampaignsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteCampaignsIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type DeleteCampaignsIdResponse = (void);

export type DeleteCampaignsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsCancelSendData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsCancelSendResponse = (void);

export type PostCampaignsIdActionsCancelSendError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsReplicateData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsReplicateResponse = ({
    /**
     * A string that uniquely identifies this campaign.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
     */
    readonly parent_campaign_id?: string;
    /**
     * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
     */
    type: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The link to the campaign's archive version.
     */
    readonly archive_url?: string;
    /**
     * The original link to the campaign's archive version.
     */
    readonly long_archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     * The date and time a campaign was sent in ISO 8601 format.
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url').
     */
    readonly content_type?: string;
    /**
     * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign qualifies to be resent to non-openers.
     */
    readonly resendable?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id: string;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The settings for your campaign, including subject, from name, reply-to address, and more.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Use Mailchimp Conversation feature to manage replies.
         */
        use_conversation?: boolean;
        /**
         * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * If the campaign is listed in a folder, the id for that folder.
         */
        folder_id?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
         */
        readonly timewarp?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        readonly template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The settings specific to A/B test campaigns.
     */
    variate_settings?: {
        /**
         * ID for the winning combination.
         */
        readonly winning_combination_id?: string;
        /**
         * ID of the campaign that was sent to the remaining recipients based on the winning combination.
         */
        readonly winning_campaign_id?: string;
        /**
         * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
         */
        winner_criteria: 'opens' | 'clicks' | 'manual' | 'total_revenue';
        /**
         * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
         */
        wait_time?: number;
        /**
         * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
         */
        test_size?: number;
        /**
         * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
         */
        subject_lines?: Array<(string)>;
        /**
         * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
         */
        send_times?: Array<(string)>;
        /**
         * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
         */
        from_names?: Array<(string)>;
        /**
         * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
         */
        reply_to_addresses?: Array<(string)>;
        /**
         * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
         */
        readonly contents?: Array<(string)>;
        /**
         * Combinations of possible variables used to build emails.
         */
        readonly combinations?: Array<{
            /**
             * Unique ID for the combination.
             */
            id?: string;
            /**
             * The index of `variate_settings.subject_lines` used.
             */
            subject_line?: number;
            /**
             * The index of `variate_settings.send_times` used.
             */
            send_time?: number;
            /**
             * The index of `variate_settings.from_names` used.
             */
            from_name?: number;
            /**
             * The index of `variate_settings.reply_to_addresses` used.
             */
            reply_to?: number;
            /**
             * The index of `variate_settings.contents` used.
             */
            content_description?: number;
            /**
             * The number of recipients for this combination.
             */
            recipients?: number;
        }>;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
     */
    rss_opts?: {
        /**
         * The URL for the RSS feed.
         */
        feed_url: string;
        /**
         * The frequency of the RSS Campaign.
         */
        frequency: 'daily' | 'weekly' | 'monthly';
        /**
         * The schedule for sending the RSS Campaign.
         */
        schedule?: {
            /**
             * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
             */
            hour?: number;
            /**
             * The days of the week to send a daily RSS Campaign.
             */
            daily_send?: {
                /**
                 * Sends the daily RSS Campaign on Sundays.
                 */
                sunday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Mondays.
                 */
                monday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Tuesdays.
                 */
                tuesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Wednesdays.
                 */
                wednesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Thursdays.
                 */
                thursday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Fridays.
                 */
                friday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Saturdays.
                 */
                saturday?: boolean;
            };
            /**
             * The day of the week to send a weekly RSS Campaign.
             */
            weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
            /**
             * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
             */
            monthly_send_date?: number;
        };
        /**
         * The date the campaign was last sent.
         */
        readonly last_sent?: string;
        /**
         * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
         */
        constrain_rss_img?: boolean;
    };
    /**
     * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
     */
    readonly ab_split_opts?: {
        /**
         * The type of AB split to run.
         */
        split_test?: 'subject' | 'from_name' | 'schedule';
        /**
         * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
         */
        pick_winner?: 'opens' | 'clicks' | 'manual';
        /**
         * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
         */
        wait_units?: 'hours' | 'days';
        /**
         * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
         */
        wait_time?: number;
        /**
         * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
         */
        split_size?: number;
        /**
         * For campaigns split on 'From Name', the name for Group A.
         */
        from_name_a?: string;
        /**
         * For campaigns split on 'From Name', the name for Group B.
         */
        from_name_b?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group A.
         */
        reply_email_a?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group B.
         */
        reply_email_b?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group A.
         */
        subject_a?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group B.
         */
        subject_b?: string;
        /**
         * The send time for Group A.
         */
        send_time_a?: string;
        /**
         * The send time for Group B.
         */
        send_time_b?: string;
        /**
         * The send time for the winning version.
         */
        send_time_winner?: string;
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * For sent campaigns, a summary of opens and clicks.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
        };
    };
    /**
     * Updates on campaigns in the process of sending.
     */
    delivery_status?: {
        /**
         * Whether Campaign Delivery Status is enabled for this account and campaign.
         */
        readonly enabled?: boolean;
        /**
         * Whether a campaign send can be canceled.
         */
        readonly can_cancel?: boolean;
        /**
         * The current state of a campaign delivery.
         */
        readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
        /**
         * The total number of emails confirmed sent for this campaign so far.
         */
        readonly emails_sent?: number;
        /**
         * The total number of emails canceled for this campaign.
         */
        readonly emails_canceled?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostCampaignsIdActionsReplicateError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsSendData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsSendResponse = (void);

export type PostCampaignsIdActionsSendError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsScheduleData = {
    body: {
        /**
         * The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45).
         */
        schedule_time: string;
        /**
         * Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/).
         */
        timewarp?: boolean;
        /**
         * Choose whether the campaign should use [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). Cannot be set to `true` for campaigns using [Timewarp](https://mailchimp.com/help/use-timewarp/).
         */
        batch_delivery?: {
            /**
             * The delay, in minutes, between batches.
             */
            batch_delay: number;
            /**
             * The number of batches for the campaign send.
             */
            batch_count: number;
        };
    };
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsScheduleResponse = (void);

export type PostCampaignsIdActionsScheduleError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsUnscheduleData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsUnscheduleResponse = (void);

export type PostCampaignsIdActionsUnscheduleError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsTestData = {
    body: {
        /**
         * An array of email addresses to send the test email to.
         */
        test_emails: Array<(string)>;
        /**
         * Choose the type of test email to send.
         */
        send_type: 'html' | 'plaintext';
    };
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsTestResponse = (void);

export type PostCampaignsIdActionsTestError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsPauseData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsPauseResponse = (void);

export type PostCampaignsIdActionsPauseError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsResumeData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsResumeResponse = (void);

export type PostCampaignsIdActionsResumeError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdActionsCreateResendData = {
    body?: {
        /**
         * Which campaign resend shortcut to use. Default is `to_non_openers`.
         */
        shortcut_type?: 'to_non_openers' | 'to_new_subscribers' | 'to_non_clickers';
    };
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdActionsCreateResendResponse = ({
    /**
     * A string that uniquely identifies this campaign.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
     */
    readonly parent_campaign_id?: string;
    /**
     * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
     */
    type: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The link to the campaign's archive version.
     */
    readonly archive_url?: string;
    /**
     * The original link to the campaign's archive version.
     */
    readonly long_archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     * The date and time a campaign was sent in ISO 8601 format.
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url').
     */
    readonly content_type?: string;
    /**
     * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign qualifies to be resent to non-openers.
     */
    readonly resendable?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id: string;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The settings for your campaign, including subject, from name, reply-to address, and more.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Use Mailchimp Conversation feature to manage replies.
         */
        use_conversation?: boolean;
        /**
         * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * If the campaign is listed in a folder, the id for that folder.
         */
        folder_id?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
         */
        readonly timewarp?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        readonly template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The settings specific to A/B test campaigns.
     */
    variate_settings?: {
        /**
         * ID for the winning combination.
         */
        readonly winning_combination_id?: string;
        /**
         * ID of the campaign that was sent to the remaining recipients based on the winning combination.
         */
        readonly winning_campaign_id?: string;
        /**
         * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
         */
        winner_criteria: 'opens' | 'clicks' | 'manual' | 'total_revenue';
        /**
         * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
         */
        wait_time?: number;
        /**
         * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
         */
        test_size?: number;
        /**
         * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
         */
        subject_lines?: Array<(string)>;
        /**
         * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
         */
        send_times?: Array<(string)>;
        /**
         * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
         */
        from_names?: Array<(string)>;
        /**
         * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
         */
        reply_to_addresses?: Array<(string)>;
        /**
         * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
         */
        readonly contents?: Array<(string)>;
        /**
         * Combinations of possible variables used to build emails.
         */
        readonly combinations?: Array<{
            /**
             * Unique ID for the combination.
             */
            id?: string;
            /**
             * The index of `variate_settings.subject_lines` used.
             */
            subject_line?: number;
            /**
             * The index of `variate_settings.send_times` used.
             */
            send_time?: number;
            /**
             * The index of `variate_settings.from_names` used.
             */
            from_name?: number;
            /**
             * The index of `variate_settings.reply_to_addresses` used.
             */
            reply_to?: number;
            /**
             * The index of `variate_settings.contents` used.
             */
            content_description?: number;
            /**
             * The number of recipients for this combination.
             */
            recipients?: number;
        }>;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
     */
    rss_opts?: {
        /**
         * The URL for the RSS feed.
         */
        feed_url: string;
        /**
         * The frequency of the RSS Campaign.
         */
        frequency: 'daily' | 'weekly' | 'monthly';
        /**
         * The schedule for sending the RSS Campaign.
         */
        schedule?: {
            /**
             * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
             */
            hour?: number;
            /**
             * The days of the week to send a daily RSS Campaign.
             */
            daily_send?: {
                /**
                 * Sends the daily RSS Campaign on Sundays.
                 */
                sunday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Mondays.
                 */
                monday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Tuesdays.
                 */
                tuesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Wednesdays.
                 */
                wednesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Thursdays.
                 */
                thursday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Fridays.
                 */
                friday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Saturdays.
                 */
                saturday?: boolean;
            };
            /**
             * The day of the week to send a weekly RSS Campaign.
             */
            weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
            /**
             * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
             */
            monthly_send_date?: number;
        };
        /**
         * The date the campaign was last sent.
         */
        readonly last_sent?: string;
        /**
         * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
         */
        constrain_rss_img?: boolean;
    };
    /**
     * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
     */
    readonly ab_split_opts?: {
        /**
         * The type of AB split to run.
         */
        split_test?: 'subject' | 'from_name' | 'schedule';
        /**
         * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
         */
        pick_winner?: 'opens' | 'clicks' | 'manual';
        /**
         * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
         */
        wait_units?: 'hours' | 'days';
        /**
         * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
         */
        wait_time?: number;
        /**
         * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
         */
        split_size?: number;
        /**
         * For campaigns split on 'From Name', the name for Group A.
         */
        from_name_a?: string;
        /**
         * For campaigns split on 'From Name', the name for Group B.
         */
        from_name_b?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group A.
         */
        reply_email_a?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group B.
         */
        reply_email_b?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group A.
         */
        subject_a?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group B.
         */
        subject_b?: string;
        /**
         * The send time for Group A.
         */
        send_time_a?: string;
        /**
         * The send time for Group B.
         */
        send_time_b?: string;
        /**
         * The send time for the winning version.
         */
        send_time_winner?: string;
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * For sent campaigns, a summary of opens and clicks.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
        };
    };
    /**
     * Updates on campaigns in the process of sending.
     */
    delivery_status?: {
        /**
         * Whether Campaign Delivery Status is enabled for this account and campaign.
         */
        readonly enabled?: boolean;
        /**
         * Whether a campaign send can be canceled.
         */
        readonly can_cancel?: boolean;
        /**
         * The current state of a campaign delivery.
         */
        readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
        /**
         * The total number of emails confirmed sent for this campaign so far.
         */
        readonly emails_sent?: number;
        /**
         * The total number of emails canceled for this campaign.
         */
        readonly emails_canceled?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostCampaignsIdActionsCreateResendError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignsIdContentData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetCampaignsIdContentResponse = ({
    /**
     * Content options for multivariate campaigns.
     */
    variate_contents?: Array<{
        /**
         * Label used to identify the content option.
         */
        content_label?: string;
        /**
         * The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.
         */
        plain_text?: string;
        /**
         * The raw HTML for the campaign.
         */
        html?: string;
    }>;
    /**
     * The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.
     */
    plain_text?: string;
    /**
     * The raw HTML for the campaign.
     */
    html?: string;
    /**
     * The Archive HTML for the campaign.
     */
    archive_html?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignsIdContentError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PutCampaignsIdContentData = {
    body: {
        /**
         * The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.
         */
        plain_text?: string;
        /**
         * The raw HTML for the campaign.
         */
        html?: string;
        /**
         * When importing a campaign, the URL where the HTML lives.
         */
        url?: string;
        /**
         * Use this template to generate the HTML content of the campaign
         */
        template?: {
            /**
             * The id of the template to use.
             */
            id: number;
            /**
             * Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template.
             */
            sections?: unknown;
        };
        /**
         * Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/).
         */
        archive?: {
            /**
             * The base64-encoded representation of the archive file.
             */
            archive_content: string;
            /**
             * The type of encoded file. Defaults to zip.
             */
            archive_type?: 'zip' | 'tar.gz' | 'tar.bz2' | 'tar' | 'tgz' | 'tbz';
        };
        /**
         * Content options for [Multivariate Campaigns](https://mailchimp.com/help/about-multivariate-campaigns/). Each content option must provide HTML content and may optionally provide plain text. For campaigns not testing content, only one object should be provided.
         */
        variate_contents?: Array<{
            /**
             * The label used to identify the content option.
             */
            content_label: string;
            /**
             * The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.
             */
            plain_text?: string;
            /**
             * The raw HTML for the campaign.
             */
            html?: string;
            /**
             * When importing a campaign, the URL for the HTML.
             */
            url?: string;
            /**
             * Use this template to generate the HTML content for the campaign.
             */
            template?: {
                /**
                 * The id of the template to use.
                 */
                id: number;
                /**
                 * Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template.
                 */
                sections?: unknown;
            };
            /**
             * Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/).
             */
            archive?: {
                /**
                 * The base64-encoded representation of the archive file.
                 */
                archive_content: string;
                /**
                 * The type of encoded file. Defaults to zip.
                 */
                archive_type?: 'zip' | 'tar.gz' | 'tar.bz2' | 'tar' | 'tgz' | 'tbz';
            };
        }>;
    };
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PutCampaignsIdContentResponse = ({
    /**
     * Content options for multivariate campaigns.
     */
    variate_contents?: Array<{
        /**
         * Label used to identify the content option.
         */
        content_label?: string;
        /**
         * The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.
         */
        plain_text?: string;
        /**
         * The raw HTML for the campaign.
         */
        html?: string;
    }>;
    /**
     * The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.
     */
    plain_text?: string;
    /**
     * The raw HTML for the campaign.
     */
    html?: string;
    /**
     * The Archive HTML for the campaign.
     */
    archive_html?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PutCampaignsIdContentError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignsIdFeedbackData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetCampaignsIdFeedbackResponse = ({
    /**
     * A collection of feedback items for a campaign.
     */
    feedback?: Array<{
        /**
         * The individual id for the feedback item.
         */
        readonly feedback_id?: number;
        /**
         * If a reply, the id of the parent feedback item.
         */
        readonly parent_id?: number;
        /**
         * The block id for the editable block that the feedback addresses.
         */
        block_id?: number;
        /**
         * The content of the feedback.
         */
        message: string;
        /**
         * The status of feedback.
         */
        is_complete?: boolean;
        /**
         * The login name of the user who created the feedback.
         */
        readonly created_by?: string;
        /**
         * The date and time the feedback item was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the feedback was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * The source of the feedback.
         */
        readonly source?: 'api' | 'email' | 'sms' | 'web' | 'ios' | 'android';
        /**
         * The unique id for the campaign.
         */
        readonly campaign_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignsIdFeedbackError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCampaignsIdFeedbackData = {
    body: {
        /**
         * The block id for the editable block that the feedback addresses.
         */
        block_id?: number;
        /**
         * The content of the feedback.
         */
        message: string;
        /**
         * The status of feedback.
         */
        is_complete?: boolean;
    };
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
};

export type PostCampaignsIdFeedbackResponse = ({
    /**
     * The individual id for the feedback item.
     */
    readonly feedback_id?: number;
    /**
     * If a reply, the id of the parent feedback item.
     */
    readonly parent_id?: number;
    /**
     * The block id for the editable block that the feedback addresses.
     */
    block_id?: number;
    /**
     * The content of the feedback.
     */
    message?: string;
    /**
     * The status of feedback.
     */
    is_complete?: boolean;
    /**
     * The login name of the user who created the feedback.
     */
    readonly created_by?: string;
    /**
     * The date and time the feedback item was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the feedback was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The source of the feedback.
     */
    readonly source?: 'api' | 'email' | 'sms' | 'web' | 'ios' | 'android';
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostCampaignsIdFeedbackError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignsIdFeedbackIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The unique id for the feedback message.
         */
        feedback_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetCampaignsIdFeedbackIdResponse = ({
    /**
     * The individual id for the feedback item.
     */
    readonly feedback_id?: number;
    /**
     * If a reply, the id of the parent feedback item.
     */
    readonly parent_id?: number;
    /**
     * The block id for the editable block that the feedback addresses.
     */
    block_id?: number;
    /**
     * The content of the feedback.
     */
    message?: string;
    /**
     * The status of feedback.
     */
    is_complete?: boolean;
    /**
     * The login name of the user who created the feedback.
     */
    readonly created_by?: string;
    /**
     * The date and time the feedback item was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the feedback was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The source of the feedback.
     */
    readonly source?: 'api' | 'email' | 'sms' | 'web' | 'ios' | 'android';
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignsIdFeedbackIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchCampaignsIdFeedbackIdData = {
    body: {
        /**
         * The block id for the editable block that the feedback addresses.
         */
        block_id?: number;
        /**
         * The content of the feedback.
         */
        message?: string;
        /**
         * The status of feedback.
         */
        is_complete?: boolean;
    };
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The unique id for the feedback message.
         */
        feedback_id: string;
    };
};

export type PatchCampaignsIdFeedbackIdResponse = ({
    /**
     * The individual id for the feedback item.
     */
    readonly feedback_id?: number;
    /**
     * If a reply, the id of the parent feedback item.
     */
    readonly parent_id?: number;
    /**
     * The block id for the editable block that the feedback addresses.
     */
    block_id?: number;
    /**
     * The content of the feedback.
     */
    message?: string;
    /**
     * The status of feedback.
     */
    is_complete?: boolean;
    /**
     * The login name of the user who created the feedback.
     */
    readonly created_by?: string;
    /**
     * The date and time the feedback item was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the feedback was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The source of the feedback.
     */
    readonly source?: 'api' | 'email' | 'sms' | 'web' | 'ios' | 'android';
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchCampaignsIdFeedbackIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteCampaignsIdFeedbackIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The unique id for the feedback message.
         */
        feedback_id: string;
    };
};

export type DeleteCampaignsIdFeedbackIdResponse = (void);

export type DeleteCampaignsIdFeedbackIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetCampaignsIdSendChecklistData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetCampaignsIdSendChecklistResponse = ({
    /**
     * Whether the campaign is ready to send.
     */
    is_ready?: boolean;
    /**
     * A list of feedback items to review before sending your campaign.
     */
    items?: Array<{
        /**
         * The item type.
         */
        type?: 'success' | 'warning' | 'error';
        /**
         * The ID for the specific item.
         */
        id?: number;
        /**
         * The heading for the specific item.
         */
        heading?: string;
        /**
         * Details about the specific feedback item.
         */
        details?: string;
    }>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetCampaignsIdSendChecklistError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetConnectedSitesData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetConnectedSitesResponse = ({
    /**
     * An array of objects, each representing a connected site.
     */
    sites?: Array<{
        /**
         * The unique identifier for the site.
         */
        readonly foreign_id?: string;
        /**
         * The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.
         */
        readonly store_id?: string;
        /**
         * The platform of the connected site.
         */
        readonly platform?: string;
        /**
         * The connected site domain.
         */
        readonly domain?: string;
        /**
         * The script used to connect your site with Mailchimp.
         */
        readonly site_script?: {
            /**
             * The URL used for any integrations that offer built-in support for connected sites.
             */
            url?: string;
            /**
             * A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
             */
            fragment?: string;
        };
        /**
         * The date and time the connected site was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the connected site was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetConnectedSitesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostConnectedSitesData = {
    body: {
        /**
         * The unique identifier for the site.
         */
        foreign_id: string;
        /**
         * The connected site domain.
         */
        domain: string;
    };
};

export type PostConnectedSitesResponse = ({
    /**
     * The unique identifier for the site.
     */
    readonly foreign_id?: string;
    /**
     * The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.
     */
    readonly store_id?: string;
    /**
     * The platform of the connected site.
     */
    readonly platform?: string;
    /**
     * The connected site domain.
     */
    readonly domain?: string;
    /**
     * The script used to connect your site with Mailchimp.
     */
    readonly site_script?: {
        /**
         * The URL used for any integrations that offer built-in support for connected sites.
         */
        url?: string;
        /**
         * A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
         */
        fragment?: string;
    };
    /**
     * The date and time the connected site was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the connected site was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostConnectedSitesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetConnectedSitesIdData = {
    path: {
        /**
         * The unique identifier for the site.
         */
        connected_site_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetConnectedSitesIdResponse = ({
    /**
     * The unique identifier for the site.
     */
    readonly foreign_id?: string;
    /**
     * The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.
     */
    readonly store_id?: string;
    /**
     * The platform of the connected site.
     */
    readonly platform?: string;
    /**
     * The connected site domain.
     */
    readonly domain?: string;
    /**
     * The script used to connect your site with Mailchimp.
     */
    readonly site_script?: {
        /**
         * The URL used for any integrations that offer built-in support for connected sites.
         */
        url?: string;
        /**
         * A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
         */
        fragment?: string;
    };
    /**
     * The date and time the connected site was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the connected site was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetConnectedSitesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteConnectedSitesIdData = {
    path: {
        /**
         * The unique identifier for the site.
         */
        connected_site_id: string;
    };
};

export type DeleteConnectedSitesIdResponse = (void);

export type DeleteConnectedSitesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostConnectedSitesIdActionsVerifyScriptInstallationData = {
    path: {
        /**
         * The unique identifier for the site.
         */
        connected_site_id: string;
    };
};

export type PostConnectedSitesIdActionsVerifyScriptInstallationResponse = (void);

export type PostConnectedSitesIdActionsVerifyScriptInstallationError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetConversationsData = {
    query?: {
        /**
         * The unique id for the campaign.
         */
        campaign_id?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Whether the conversation has any unread messages.
         */
        has_unread_messages?: 'true' | 'false';
        /**
         * The unique id for the list.
         */
        list_id?: string;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetConversationsResponse = ({
    /**
     * A list of conversations.
     */
    conversations?: Array<{
        /**
         * A string that uniquely identifies this conversation.
         */
        readonly id?: string;
        /**
         * The total number of messages in this conversation.
         */
        readonly message_count?: number;
        /**
         * The unique identifier of the campaign for this conversation.
         */
        readonly campaign_id?: string;
        /**
         * The unique identifier of the list for this conversation.
         */
        readonly list_id?: string;
        /**
         * The number of unread messages in this conversation.
         */
        readonly unread_messages?: number;
        /**
         * A label representing the sender of this message.
         */
        readonly from_label?: string;
        /**
         * A label representing the email of the sender of this message.
         */
        readonly from_email?: string;
        /**
         * The subject of the message.
         */
        readonly subject?: string;
        /**
         * The most recent message in the conversation.
         */
        last_message?: {
            /**
             * A label representing the sender of this message.
             */
            readonly from_label?: string;
            /**
             * A label representing the email of the sender of this message.
             */
            readonly from_email?: string;
            /**
             * The subject of this message.
             */
            readonly subject?: string;
            /**
             * The plain-text content of the message.
             */
            readonly message?: string;
            /**
             * Whether this message has been marked as read.
             */
            read?: boolean;
            /**
             * The date and time the message was either sent or received in ISO 8601 format.
             */
            readonly timestamp?: string;
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetConversationsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetConversationsIdData = {
    path: {
        /**
         * The unique id for the conversation.
         */
        conversation_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetConversationsIdResponse = ({
    /**
     * A string that uniquely identifies this conversation.
     */
    readonly id?: string;
    /**
     * The total number of messages in this conversation.
     */
    readonly message_count?: number;
    /**
     * The unique identifier of the campaign for this conversation.
     */
    readonly campaign_id?: string;
    /**
     * The unique identifier of the list for this conversation.
     */
    readonly list_id?: string;
    /**
     * The number of unread messages in this conversation.
     */
    readonly unread_messages?: number;
    /**
     * A label representing the sender of this message.
     */
    readonly from_label?: string;
    /**
     * A label representing the email of the sender of this message.
     */
    readonly from_email?: string;
    /**
     * The subject of the message.
     */
    readonly subject?: string;
    /**
     * The most recent message in the conversation.
     */
    last_message?: {
        /**
         * A label representing the sender of this message.
         */
        readonly from_label?: string;
        /**
         * A label representing the email of the sender of this message.
         */
        readonly from_email?: string;
        /**
         * The subject of this message.
         */
        readonly subject?: string;
        /**
         * The plain-text content of the message.
         */
        readonly message?: string;
        /**
         * Whether this message has been marked as read.
         */
        read?: boolean;
        /**
         * The date and time the message was either sent or received in ISO 8601 format.
         */
        readonly timestamp?: string;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetConversationsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetConversationsIdMessagesData = {
    path: {
        /**
         * The unique id for the conversation.
         */
        conversation_id: string;
    };
    query?: {
        /**
         * Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_timestamp?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Whether a conversation message has been marked as read.
         */
        is_read?: 'true' | 'false';
        /**
         * Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_timestamp?: string;
    };
};

export type GetConversationsIdMessagesResponse = ({
    /**
     * An array of objects, each representing a conversation messages resources.
     */
    conversation_messages?: Array<{
        /**
         * A string that uniquely identifies this message
         */
        readonly id?: string;
        /**
         * A string that identifies this message's conversation
         */
        readonly conversation_id?: string;
        /**
         * The list's web ID
         */
        readonly list_id?: number;
        /**
         * A label representing the sender of this message
         */
        readonly from_label?: string;
        /**
         * A label representing the email of the sender of this message
         */
        from_email?: string;
        /**
         * The subject of this message
         */
        subject?: string;
        /**
         * The plain-text content of the message
         */
        message?: string;
        /**
         * Whether this message has been marked as read
         */
        read?: boolean;
        /**
         * The date and time the message was either sent or received in ISO 8601 format.
         */
        readonly timestamp?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * A string that identifies this conversation.
     */
    conversation_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetConversationsIdMessagesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetConversationsIdMessagesIdData = {
    path: {
        /**
         * The unique id for the conversation.
         */
        conversation_id: string;
        /**
         * The unique id for the conversation message.
         */
        message_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetConversationsIdMessagesIdResponse = ({
    /**
     * A string that uniquely identifies this message
     */
    readonly id?: string;
    /**
     * A string that identifies this message's conversation
     */
    readonly conversation_id?: string;
    /**
     * The list's web ID
     */
    readonly list_id?: number;
    /**
     * A label representing the sender of this message
     */
    readonly from_label?: string;
    /**
     * A label representing the email of the sender of this message
     */
    from_email?: string;
    /**
     * The subject of this message
     */
    subject?: string;
    /**
     * The plain-text content of the message
     */
    message?: string;
    /**
     * Whether this message has been marked as read
     */
    read?: boolean;
    /**
     * The date and time the message was either sent or received in ISO 8601 format.
     */
    readonly timestamp?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetConversationsIdMessagesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostCustomerJourneysJourneysIdStepsIdActionsTriggerData = {
    body: {
        /**
         * The list member's email address.
         */
        email_address: string;
    };
    path: {
        /**
         * The id for the Journey.
         */
        journey_id: number;
        /**
         * The id for the Step.
         */
        step_id: number;
    };
};

export type PostCustomerJourneysJourneysIdStepsIdActionsTriggerResponse = (unknown);

export type PostCustomerJourneysJourneysIdStepsIdActionsTriggerError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetFileManagerFilesData = {
    query?: {
        /**
         * Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_created_at?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * The Mailchimp account user who created the File Manager file.
         */
        created_by?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_created_at?: string;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'added_date' | 'name' | 'size';
        /**
         * The file type for the File Manager file.
         */
        type?: string;
    };
};

export type GetFileManagerFilesResponse = ({
    /**
     *  A list of files and images in an account.
     */
    files?: Array<{
        /**
         * The unique id of the file.
         */
        readonly id?: number;
        /**
         * The id of the folder.
         */
        folder_id?: number;
        /**
         * The type of file in the File Manager.
         */
        readonly type?: 'image' | 'file';
        /**
         * The name of the file.
         */
        name?: string;
        /**
         * The url of the full-size file.
         */
        readonly full_size_url?: string;
        /**
         * The url of the thumbnail preview.
         */
        readonly thumbnail_url?: string;
        /**
         * The size of the file in bytes.
         */
        readonly size?: number;
        /**
         * The date and time a file was added to the File Manager in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The username of the profile that uploaded the file.
         */
        readonly created_by?: string;
        /**
         * The width of the image.
         */
        readonly width?: number;
        /**
         * The height of an image.
         */
        readonly height?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total size of all File Manager files in bytes.
     */
    readonly total_file_size?: number;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetFileManagerFilesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostFileManagerFilesData = {
    body: {
        /**
         * The id of the folder.
         */
        folder_id?: number;
        /**
         * The name of the file.
         */
        name: string;
        /**
         * The base64-encoded contents of the file.
         */
        file_data: string;
    };
};

export type PostFileManagerFilesResponse = ({
    /**
     * The unique id of the file.
     */
    readonly id?: number;
    /**
     * The id of the folder.
     */
    folder_id?: number;
    /**
     * The type of file in the File Manager.
     */
    readonly type?: 'image' | 'file';
    /**
     * The name of the file.
     */
    name?: string;
    /**
     * The url of the full-size file.
     */
    readonly full_size_url?: string;
    /**
     * The url of the thumbnail preview.
     */
    readonly thumbnail_url?: string;
    /**
     * The size of the file in bytes.
     */
    readonly size?: number;
    /**
     * The date and time a file was added to the File Manager in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The username of the profile that uploaded the file.
     */
    readonly created_by?: string;
    /**
     * The width of the image.
     */
    readonly width?: number;
    /**
     * The height of an image.
     */
    readonly height?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostFileManagerFilesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetFileManagerFilesIdData = {
    path: {
        /**
         * The unique id for the File Manager file.
         */
        file_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetFileManagerFilesIdResponse = ({
    /**
     * The unique id of the file.
     */
    readonly id?: number;
    /**
     * The id of the folder.
     */
    folder_id?: number;
    /**
     * The type of file in the File Manager.
     */
    readonly type?: 'image' | 'file';
    /**
     * The name of the file.
     */
    name?: string;
    /**
     * The url of the full-size file.
     */
    readonly full_size_url?: string;
    /**
     * The url of the thumbnail preview.
     */
    readonly thumbnail_url?: string;
    /**
     * The size of the file in bytes.
     */
    readonly size?: number;
    /**
     * The date and time a file was added to the File Manager in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The username of the profile that uploaded the file.
     */
    readonly created_by?: string;
    /**
     * The width of the image.
     */
    readonly width?: number;
    /**
     * The height of an image.
     */
    readonly height?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetFileManagerFilesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchFileManagerFilesIdData = {
    body: {
        /**
         * The id of the folder. Setting `folder_id` to `0` will remove a file from its current folder.
         */
        folder_id?: number;
        /**
         * The name of the file.
         */
        name?: string;
    };
    path: {
        /**
         * The unique id for the File Manager file.
         */
        file_id: string;
    };
};

export type PatchFileManagerFilesIdResponse = ({
    /**
     * The unique id of the file.
     */
    readonly id?: number;
    /**
     * The id of the folder.
     */
    folder_id?: number;
    /**
     * The type of file in the File Manager.
     */
    readonly type?: 'image' | 'file';
    /**
     * The name of the file.
     */
    name?: string;
    /**
     * The url of the full-size file.
     */
    readonly full_size_url?: string;
    /**
     * The url of the thumbnail preview.
     */
    readonly thumbnail_url?: string;
    /**
     * The size of the file in bytes.
     */
    readonly size?: number;
    /**
     * The date and time a file was added to the File Manager in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The username of the profile that uploaded the file.
     */
    readonly created_by?: string;
    /**
     * The width of the image.
     */
    readonly width?: number;
    /**
     * The height of an image.
     */
    readonly height?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchFileManagerFilesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteFileManagerFilesIdData = {
    path: {
        /**
         * The unique id for the File Manager file.
         */
        file_id: string;
    };
};

export type DeleteFileManagerFilesIdResponse = (void);

export type DeleteFileManagerFilesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetFileManagerFoldersData = {
    query?: {
        /**
         * Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_created_at?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * The Mailchimp account user who created the File Manager file.
         */
        created_by?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_created_at?: string;
    };
};

export type GetFileManagerFoldersResponse = ({
    /**
     * A list of all folders in the File Manager.
     */
    folders?: Array<{
        /**
         * The unique id for the folder.
         */
        readonly id?: number;
        /**
         * The name of the folder.
         */
        name?: string;
        /**
         * The number of files in the folder.
         */
        readonly file_count?: number;
        /**
         * The date and time a file was added to the File Manager in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The username of the profile that created the folder.
         */
        readonly created_by?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetFileManagerFoldersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostFileManagerFoldersData = {
    body: {
        /**
         * The name of the folder.
         */
        name: string;
    };
};

export type PostFileManagerFoldersResponse = ({
    /**
     * The unique id for the folder.
     */
    readonly id?: number;
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * The number of files in the folder.
     */
    readonly file_count?: number;
    /**
     * The date and time a file was added to the File Manager in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The username of the profile that created the folder.
     */
    readonly created_by?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostFileManagerFoldersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetFileManagerFoldersIdData = {
    path: {
        /**
         * The unique id for the File Manager folder.
         */
        folder_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetFileManagerFoldersIdResponse = ({
    /**
     * The unique id for the folder.
     */
    readonly id?: number;
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * The number of files in the folder.
     */
    readonly file_count?: number;
    /**
     * The date and time a file was added to the File Manager in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The username of the profile that created the folder.
     */
    readonly created_by?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetFileManagerFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchFileManagerFoldersIdData = {
    body: {
        /**
         * The name of the folder.
         */
        name: string;
    };
    path: {
        /**
         * The unique id for the File Manager folder.
         */
        folder_id: string;
    };
};

export type PatchFileManagerFoldersIdResponse = ({
    /**
     * The unique id for the folder.
     */
    readonly id?: number;
    /**
     * The name of the folder.
     */
    name?: string;
    /**
     * The number of files in the folder.
     */
    readonly file_count?: number;
    /**
     * The date and time a file was added to the File Manager in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The username of the profile that created the folder.
     */
    readonly created_by?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchFileManagerFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteFileManagerFoldersIdData = {
    path: {
        /**
         * The unique id for the File Manager folder.
         */
        folder_id: string;
    };
};

export type DeleteFileManagerFoldersIdResponse = (void);

export type DeleteFileManagerFoldersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetFileManagerFoldersFilesData = {
    path: {
        /**
         * The unique id for the File Manager folder.
         */
        folder_id: string;
    };
    query?: {
        /**
         * Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_created_at?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * The Mailchimp account user who created the File Manager file.
         */
        created_by?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_created_at?: string;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'added_date' | 'name' | 'size';
        /**
         * The file type for the File Manager file.
         */
        type?: string;
    };
};

export type GetFileManagerFoldersFilesResponse = ({
    /**
     *  A list of files and images in an account.
     */
    files?: Array<{
        /**
         * The unique id of the file.
         */
        readonly id?: number;
        /**
         * The id of the folder.
         */
        folder_id?: number;
        /**
         * The type of file in the File Manager.
         */
        readonly type?: 'image' | 'file';
        /**
         * The name of the file.
         */
        name?: string;
        /**
         * The url of the full-size file.
         */
        readonly full_size_url?: string;
        /**
         * The url of the thumbnail preview.
         */
        readonly thumbnail_url?: string;
        /**
         * The size of the file in bytes.
         */
        readonly size?: number;
        /**
         * The date and time a file was added to the File Manager in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The username of the profile that uploaded the file.
         */
        readonly created_by?: string;
        /**
         * The width of the image.
         */
        readonly width?: number;
        /**
         * The height of an image.
         */
        readonly height?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total size of all File Manager files in bytes.
     */
    readonly total_file_size?: number;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetFileManagerFoldersFilesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsData = {
    query?: {
        /**
         * Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_campaign_last_sent?: string;
        /**
         * Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_date_created?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * Restrict results to lists that include a specific subscriber's email address.
         */
        email?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Restrict results to lists that contain an active, connected, undeleted ecommerce store.
         */
        has_ecommerce_store?: boolean;
        /**
         * Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.
         */
        include_total_contacts?: boolean;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_campaign_last_sent?: string;
        /**
         * Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_date_created?: string;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'date_created';
    };
};

export type GetListsResponse = ({
    /**
     * An array of objects, each representing a list.
     */
    lists: Array<{
        /**
         * A string that uniquely identifies this list.
         */
        readonly id?: string;
        /**
         * The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`.
         */
        readonly web_id?: number;
        /**
         * The name of the list.
         */
        name?: string;
        /**
         * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
         */
        contact?: {
            /**
             * The company name for the list.
             */
            company?: string;
            /**
             * The street address for the list contact.
             */
            address1?: string;
            /**
             * The street address for the list contact.
             */
            address2?: string;
            /**
             * The city for the list contact.
             */
            city?: string;
            /**
             * The state for the list contact.
             */
            state?: string;
            /**
             * The postal or zip code for the list contact.
             */
            zip?: string;
            /**
             * A two-character ISO3166 country code. Defaults to US if invalid.
             */
            country?: string;
            /**
             * The phone number for the list contact.
             */
            phone?: string;
        };
        /**
         * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
         */
        permission_reminder?: string;
        /**
         * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
         */
        use_archive_bar?: boolean;
        /**
         * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
         */
        campaign_defaults?: {
            /**
             * The default from name for campaigns sent to this list.
             */
            from_name?: string;
            /**
             * The default from email for campaigns sent to this list.
             */
            from_email?: string;
            /**
             * The default subject line for campaigns sent to this list.
             */
            subject?: string;
            /**
             * The default language for this lists's forms.
             */
            language?: string;
        };
        /**
         * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
         */
        notify_on_subscribe?: string;
        /**
         * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
         */
        notify_on_unsubscribe?: string;
        /**
         * The date and time that this list was created in ISO 8601 format.
         */
        readonly date_created?: string;
        /**
         * An auto-generated activity score for the list (0-5).
         */
        readonly list_rating?: number;
        /**
         * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
         */
        email_type_option?: boolean;
        /**
         * Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form.
         */
        readonly subscribe_url_short?: string;
        /**
         * The full version of this list's subscribe form (host will vary).
         */
        readonly subscribe_url_long?: string;
        /**
         * The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.
         */
        readonly beamer_address?: string;
        /**
         * Legacy - visibility settings are no longer used
         */
        visibility?: 'pub' | 'prv';
        /**
         * Whether or not to require the subscriber to confirm subscription via email.
         */
        double_optin?: boolean;
        /**
         * Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.
         */
        has_welcome?: boolean;
        /**
         * Whether or not the list has marketing permissions (eg. GDPR) enabled.
         */
        marketing_permissions?: boolean;
        /**
         * Any list-specific modules installed for this list.
         */
        readonly modules?: Array<(string)>;
        /**
         * Stats for the list. Many of these are cached for at least five minutes.
         */
        readonly stats?: {
            /**
             * The number of active members in the list.
             */
            readonly member_count?: number;
            /**
             * The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included.
             */
            readonly total_contacts?: number;
            /**
             * The number of members who have unsubscribed from the list.
             */
            readonly unsubscribe_count?: number;
            /**
             * The number of members cleaned from the list.
             */
            readonly cleaned_count?: number;
            /**
             * The number of active members in the list since the last campaign was sent.
             */
            readonly member_count_since_send?: number;
            /**
             * The number of members who have unsubscribed since the last campaign was sent.
             */
            readonly unsubscribe_count_since_send?: number;
            /**
             * The number of members cleaned from the list since the last campaign was sent.
             */
            readonly cleaned_count_since_send?: number;
            /**
             * The number of campaigns in any status that use this list.
             */
            readonly campaign_count?: number;
            /**
             * The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients.
             */
            readonly campaign_last_sent?: string;
            /**
             * The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL).
             */
            readonly merge_field_count?: number;
            /**
             * The average number of subscriptions per month for the list (not returned if we haven't calculated it yet).
             */
            readonly avg_sub_rate?: number;
            /**
             * The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet).
             */
            readonly avg_unsub_rate?: number;
            /**
             * The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet).
             */
            readonly target_sub_rate?: number;
            /**
             * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
             */
            readonly open_rate?: number;
            /**
             * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
             */
            readonly click_rate?: number;
            /**
             * The date and time of the last time someone subscribed to this list in ISO 8601 format.
             */
            readonly last_sub_date?: string;
            /**
             * The date and time of the last time someone unsubscribed from this list in ISO 8601 format.
             */
            readonly last_unsub_date?: string;
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * Do particular authorization constraints around this collection limit creation of new instances?
     */
    constraints?: {
        /**
         * May the user create additional instances of this resource?
         */
        may_create: boolean;
        /**
         * How many total instances of this resource are allowed? This is independent of any filter conditions applied to the query. As a special case, -1 indicates unlimited.
         */
        max_instances: number;
        /**
         * How many total instances of this resource are already in use? This is independent of any filter conditions applied to the query. Value may be larger than max_instances. As a special case, -1 is returned when access is unlimited.
         */
        current_total_instances?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsData = {
    body: {
        /**
         * The name of the list.
         */
        name: string;
        /**
         * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
         */
        contact: {
            /**
             * The company name for the list.
             */
            company: string;
            /**
             * The street address for the list contact.
             */
            address1: string;
            /**
             * The street address for the list contact.
             */
            address2?: string;
            /**
             * The city for the list contact.
             */
            city: string;
            /**
             * The state for the list contact.
             */
            state?: string;
            /**
             * The postal or zip code for the list contact.
             */
            zip?: string;
            /**
             * A two-character ISO3166 country code. Defaults to US if invalid.
             */
            country: string;
            /**
             * The phone number for the list contact.
             */
            phone?: string;
        };
        /**
         * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
         */
        permission_reminder: string;
        /**
         * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
         */
        use_archive_bar?: boolean;
        /**
         * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
         */
        campaign_defaults: {
            /**
             * The default from name for campaigns sent to this list.
             */
            from_name: string;
            /**
             * The default from email for campaigns sent to this list.
             */
            from_email: string;
            /**
             * The default subject line for campaigns sent to this list.
             */
            subject: string;
            /**
             * The default language for this lists's forms.
             */
            language: string;
        };
        /**
         * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
         */
        notify_on_subscribe?: string;
        /**
         * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
         */
        notify_on_unsubscribe?: string;
        /**
         * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
         */
        email_type_option: boolean;
        /**
         * Whether or not to require the subscriber to confirm subscription via email.
         */
        double_optin?: boolean;
        /**
         * Whether or not the list has marketing permissions (eg. GDPR) enabled.
         */
        marketing_permissions?: boolean;
    };
};

export type PostListsResponse = ({
    /**
     * A string that uniquely identifies this list.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * The name of the list.
     */
    name?: string;
    /**
     * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
     */
    contact?: {
        /**
         * The company name for the list.
         */
        company?: string;
        /**
         * The street address for the list contact.
         */
        address1?: string;
        /**
         * The street address for the list contact.
         */
        address2?: string;
        /**
         * The city for the list contact.
         */
        city?: string;
        /**
         * The state for the list contact.
         */
        state?: string;
        /**
         * The postal or zip code for the list contact.
         */
        zip?: string;
        /**
         * A two-character ISO3166 country code. Defaults to US if invalid.
         */
        country?: string;
        /**
         * The phone number for the list contact.
         */
        phone?: string;
    };
    /**
     * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
     */
    permission_reminder?: string;
    /**
     * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
     */
    use_archive_bar?: boolean;
    /**
     * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
     */
    campaign_defaults?: {
        /**
         * The default from name for campaigns sent to this list.
         */
        from_name?: string;
        /**
         * The default from email for campaigns sent to this list.
         */
        from_email?: string;
        /**
         * The default subject line for campaigns sent to this list.
         */
        subject?: string;
        /**
         * The default language for this lists's forms.
         */
        language?: string;
    };
    /**
     * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
     */
    notify_on_subscribe?: string;
    /**
     * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
     */
    notify_on_unsubscribe?: string;
    /**
     * The date and time that this list was created in ISO 8601 format.
     */
    readonly date_created?: string;
    /**
     * An auto-generated activity score for the list (0-5).
     */
    readonly list_rating?: number;
    /**
     * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
     */
    email_type_option?: boolean;
    /**
     * Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form.
     */
    readonly subscribe_url_short?: string;
    /**
     * The full version of this list's subscribe form (host will vary).
     */
    readonly subscribe_url_long?: string;
    /**
     * The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.
     */
    readonly beamer_address?: string;
    /**
     * Legacy - visibility settings are no longer used
     */
    visibility?: 'pub' | 'prv';
    /**
     * Whether or not to require the subscriber to confirm subscription via email.
     */
    double_optin?: boolean;
    /**
     * Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.
     */
    has_welcome?: boolean;
    /**
     * Whether or not the list has marketing permissions (eg. GDPR) enabled.
     */
    marketing_permissions?: boolean;
    /**
     * Any list-specific modules installed for this list.
     */
    readonly modules?: Array<(string)>;
    /**
     * Stats for the list. Many of these are cached for at least five minutes.
     */
    readonly stats?: {
        /**
         * The number of active members in the list.
         */
        readonly member_count?: number;
        /**
         * The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included.
         */
        readonly total_contacts?: number;
        /**
         * The number of members who have unsubscribed from the list.
         */
        readonly unsubscribe_count?: number;
        /**
         * The number of members cleaned from the list.
         */
        readonly cleaned_count?: number;
        /**
         * The number of active members in the list since the last campaign was sent.
         */
        readonly member_count_since_send?: number;
        /**
         * The number of members who have unsubscribed since the last campaign was sent.
         */
        readonly unsubscribe_count_since_send?: number;
        /**
         * The number of members cleaned from the list since the last campaign was sent.
         */
        readonly cleaned_count_since_send?: number;
        /**
         * The number of campaigns in any status that use this list.
         */
        readonly campaign_count?: number;
        /**
         * The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients.
         */
        readonly campaign_last_sent?: string;
        /**
         * The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL).
         */
        readonly merge_field_count?: number;
        /**
         * The average number of subscriptions per month for the list (not returned if we haven't calculated it yet).
         */
        readonly avg_sub_rate?: number;
        /**
         * The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet).
         */
        readonly avg_unsub_rate?: number;
        /**
         * The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet).
         */
        readonly target_sub_rate?: number;
        /**
         * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
         */
        readonly open_rate?: number;
        /**
         * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
         */
        readonly click_rate?: number;
        /**
         * The date and time of the last time someone subscribed to this list in ISO 8601 format.
         */
        readonly last_sub_date?: string;
        /**
         * The date and time of the last time someone unsubscribed from this list in ISO 8601 format.
         */
        readonly last_unsub_date?: string;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.
         */
        include_total_contacts?: boolean;
    };
};

export type GetListsIdResponse = ({
    /**
     * A string that uniquely identifies this list.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * The name of the list.
     */
    name?: string;
    /**
     * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
     */
    contact?: {
        /**
         * The company name for the list.
         */
        company?: string;
        /**
         * The street address for the list contact.
         */
        address1?: string;
        /**
         * The street address for the list contact.
         */
        address2?: string;
        /**
         * The city for the list contact.
         */
        city?: string;
        /**
         * The state for the list contact.
         */
        state?: string;
        /**
         * The postal or zip code for the list contact.
         */
        zip?: string;
        /**
         * A two-character ISO3166 country code. Defaults to US if invalid.
         */
        country?: string;
        /**
         * The phone number for the list contact.
         */
        phone?: string;
    };
    /**
     * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
     */
    permission_reminder?: string;
    /**
     * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
     */
    use_archive_bar?: boolean;
    /**
     * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
     */
    campaign_defaults?: {
        /**
         * The default from name for campaigns sent to this list.
         */
        from_name?: string;
        /**
         * The default from email for campaigns sent to this list.
         */
        from_email?: string;
        /**
         * The default subject line for campaigns sent to this list.
         */
        subject?: string;
        /**
         * The default language for this lists's forms.
         */
        language?: string;
    };
    /**
     * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
     */
    notify_on_subscribe?: string;
    /**
     * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
     */
    notify_on_unsubscribe?: string;
    /**
     * The date and time that this list was created in ISO 8601 format.
     */
    readonly date_created?: string;
    /**
     * An auto-generated activity score for the list (0-5).
     */
    readonly list_rating?: number;
    /**
     * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
     */
    email_type_option?: boolean;
    /**
     * Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form.
     */
    readonly subscribe_url_short?: string;
    /**
     * The full version of this list's subscribe form (host will vary).
     */
    readonly subscribe_url_long?: string;
    /**
     * The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.
     */
    readonly beamer_address?: string;
    /**
     * Legacy - visibility settings are no longer used
     */
    visibility?: 'pub' | 'prv';
    /**
     * Whether or not to require the subscriber to confirm subscription via email.
     */
    double_optin?: boolean;
    /**
     * Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.
     */
    has_welcome?: boolean;
    /**
     * Whether or not the list has marketing permissions (eg. GDPR) enabled.
     */
    marketing_permissions?: boolean;
    /**
     * Any list-specific modules installed for this list.
     */
    readonly modules?: Array<(string)>;
    /**
     * Stats for the list. Many of these are cached for at least five minutes.
     */
    readonly stats?: {
        /**
         * The number of active members in the list.
         */
        readonly member_count?: number;
        /**
         * The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included.
         */
        readonly total_contacts?: number;
        /**
         * The number of members who have unsubscribed from the list.
         */
        readonly unsubscribe_count?: number;
        /**
         * The number of members cleaned from the list.
         */
        readonly cleaned_count?: number;
        /**
         * The number of active members in the list since the last campaign was sent.
         */
        readonly member_count_since_send?: number;
        /**
         * The number of members who have unsubscribed since the last campaign was sent.
         */
        readonly unsubscribe_count_since_send?: number;
        /**
         * The number of members cleaned from the list since the last campaign was sent.
         */
        readonly cleaned_count_since_send?: number;
        /**
         * The number of campaigns in any status that use this list.
         */
        readonly campaign_count?: number;
        /**
         * The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients.
         */
        readonly campaign_last_sent?: string;
        /**
         * The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL).
         */
        readonly merge_field_count?: number;
        /**
         * The average number of subscriptions per month for the list (not returned if we haven't calculated it yet).
         */
        readonly avg_sub_rate?: number;
        /**
         * The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet).
         */
        readonly avg_unsub_rate?: number;
        /**
         * The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet).
         */
        readonly target_sub_rate?: number;
        /**
         * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
         */
        readonly open_rate?: number;
        /**
         * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
         */
        readonly click_rate?: number;
        /**
         * The date and time of the last time someone subscribed to this list in ISO 8601 format.
         */
        readonly last_sub_date?: string;
        /**
         * The date and time of the last time someone unsubscribed from this list in ISO 8601 format.
         */
        readonly last_unsub_date?: string;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdData = {
    body: {
        /**
         * The name of the list.
         */
        name: string;
        /**
         * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
         */
        contact: {
            /**
             * The company name for the list.
             */
            company: string;
            /**
             * The street address for the list contact.
             */
            address1: string;
            /**
             * The street address for the list contact.
             */
            address2?: string;
            /**
             * The city for the list contact.
             */
            city: string;
            /**
             * The state for the list contact.
             */
            state: string;
            /**
             * The postal or zip code for the list contact.
             */
            zip: string;
            /**
             * A two-character ISO3166 country code. Defaults to US if invalid.
             */
            country: string;
            /**
             * The phone number for the list contact.
             */
            phone?: string;
        };
        /**
         * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
         */
        permission_reminder: string;
        /**
         * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
         */
        use_archive_bar?: boolean;
        /**
         * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
         */
        campaign_defaults: {
            /**
             * The default from name for campaigns sent to this list.
             */
            from_name: string;
            /**
             * The default from email for campaigns sent to this list.
             */
            from_email: string;
            /**
             * The default subject line for campaigns sent to this list.
             */
            subject: string;
            /**
             * The default language for this lists's forms.
             */
            language: string;
        };
        /**
         * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
         */
        notify_on_subscribe?: string;
        /**
         * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
         */
        notify_on_unsubscribe?: string;
        /**
         * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
         */
        email_type_option: boolean;
        /**
         * Whether or not to require the subscriber to confirm subscription via email.
         */
        double_optin?: boolean;
        /**
         * Whether or not the list has marketing permissions (eg. GDPR) enabled.
         */
        marketing_permissions?: boolean;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PatchListsIdResponse = ({
    /**
     * A string that uniquely identifies this list.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * The name of the list.
     */
    name?: string;
    /**
     * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
     */
    contact?: {
        /**
         * The company name for the list.
         */
        company?: string;
        /**
         * The street address for the list contact.
         */
        address1?: string;
        /**
         * The street address for the list contact.
         */
        address2?: string;
        /**
         * The city for the list contact.
         */
        city?: string;
        /**
         * The state for the list contact.
         */
        state?: string;
        /**
         * The postal or zip code for the list contact.
         */
        zip?: string;
        /**
         * A two-character ISO3166 country code. Defaults to US if invalid.
         */
        country?: string;
        /**
         * The phone number for the list contact.
         */
        phone?: string;
    };
    /**
     * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
     */
    permission_reminder?: string;
    /**
     * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
     */
    use_archive_bar?: boolean;
    /**
     * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
     */
    campaign_defaults?: {
        /**
         * The default from name for campaigns sent to this list.
         */
        from_name?: string;
        /**
         * The default from email for campaigns sent to this list.
         */
        from_email?: string;
        /**
         * The default subject line for campaigns sent to this list.
         */
        subject?: string;
        /**
         * The default language for this lists's forms.
         */
        language?: string;
    };
    /**
     * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
     */
    notify_on_subscribe?: string;
    /**
     * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
     */
    notify_on_unsubscribe?: string;
    /**
     * The date and time that this list was created in ISO 8601 format.
     */
    readonly date_created?: string;
    /**
     * An auto-generated activity score for the list (0-5).
     */
    readonly list_rating?: number;
    /**
     * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
     */
    email_type_option?: boolean;
    /**
     * Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form.
     */
    readonly subscribe_url_short?: string;
    /**
     * The full version of this list's subscribe form (host will vary).
     */
    readonly subscribe_url_long?: string;
    /**
     * The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.
     */
    readonly beamer_address?: string;
    /**
     * Legacy - visibility settings are no longer used
     */
    visibility?: 'pub' | 'prv';
    /**
     * Whether or not to require the subscriber to confirm subscription via email.
     */
    double_optin?: boolean;
    /**
     * Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.
     */
    has_welcome?: boolean;
    /**
     * Whether or not the list has marketing permissions (eg. GDPR) enabled.
     */
    marketing_permissions?: boolean;
    /**
     * Any list-specific modules installed for this list.
     */
    readonly modules?: Array<(string)>;
    /**
     * Stats for the list. Many of these are cached for at least five minutes.
     */
    readonly stats?: {
        /**
         * The number of active members in the list.
         */
        readonly member_count?: number;
        /**
         * The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included.
         */
        readonly total_contacts?: number;
        /**
         * The number of members who have unsubscribed from the list.
         */
        readonly unsubscribe_count?: number;
        /**
         * The number of members cleaned from the list.
         */
        readonly cleaned_count?: number;
        /**
         * The number of active members in the list since the last campaign was sent.
         */
        readonly member_count_since_send?: number;
        /**
         * The number of members who have unsubscribed since the last campaign was sent.
         */
        readonly unsubscribe_count_since_send?: number;
        /**
         * The number of members cleaned from the list since the last campaign was sent.
         */
        readonly cleaned_count_since_send?: number;
        /**
         * The number of campaigns in any status that use this list.
         */
        readonly campaign_count?: number;
        /**
         * The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients.
         */
        readonly campaign_last_sent?: string;
        /**
         * The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL).
         */
        readonly merge_field_count?: number;
        /**
         * The average number of subscriptions per month for the list (not returned if we haven't calculated it yet).
         */
        readonly avg_sub_rate?: number;
        /**
         * The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet).
         */
        readonly avg_unsub_rate?: number;
        /**
         * The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet).
         */
        readonly target_sub_rate?: number;
        /**
         * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
         */
        readonly open_rate?: number;
        /**
         * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
         */
        readonly click_rate?: number;
        /**
         * The date and time of the last time someone subscribed to this list in ISO 8601 format.
         */
        readonly last_sub_date?: string;
        /**
         * The date and time of the last time someone unsubscribed from this list in ISO 8601 format.
         */
        readonly last_unsub_date?: string;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type DeleteListsIdResponse = (void);

export type DeleteListsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdData = {
    body: {
        /**
         * An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call.
         */
        members: Array<{
            /**
             * Email address for a subscriber.
             */
            email_address?: string;
            /**
             * Type of email this member asked to get ('html' or 'text').
             */
            email_type?: string;
            /**
             * Subscriber's current status.
             */
            status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
            /**
             * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
             */
            merge_fields?: {
                [key: string]: unknown;
            };
            /**
             * The key of this object's properties is the ID of the interest in question.
             */
            interests?: {
                [key: string]: (boolean);
            };
            /**
             * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
             */
            language?: string;
            /**
             * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
             */
            vip?: boolean;
            /**
             * Subscriber location information.
             */
            location?: {
                /**
                 * The location latitude.
                 */
                latitude?: number;
                /**
                 * The location longitude.
                 */
                longitude?: number;
            };
            /**
             * IP address the subscriber signed up from.
             */
            ip_signup?: string;
            /**
             * The date and time the subscriber signed up for the list in ISO 8601 format.
             */
            timestamp_signup?: string;
            /**
             * The IP address the subscriber used to confirm their opt-in status.
             */
            ip_opt?: string;
            /**
             * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
             */
            timestamp_opt?: string;
        }>;
        /**
         * Whether this batch operation will replace all existing tags with tags in request.
         */
        sync_tags?: boolean;
        /**
         * Whether this batch operation will change existing members' subscription status.
         */
        update_existing?: boolean;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.
         */
        skip_duplicate_check?: boolean;
        /**
         * If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
         */
        skip_merge_validation?: boolean;
    };
};

export type PostListsIdResponse = ({
    /**
     * An array of objects, each representing a new member that was added to the list.
     */
    new_members?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * Email address for a subscriber.
         */
        email_address?: string;
        /**
         * An identifier for the address across all of Mailchimp.
         */
        readonly unique_email_id?: string;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * An individual merge var and value for a member.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * Open and click rates for this subscriber.
         */
        readonly stats?: {
            /**
             * A subscriber's average open rate.
             */
            readonly avg_open_rate?: number;
            /**
             * A subscriber's average clickthrough rate.
             */
            readonly avg_click_rate?: number;
        };
        /**
         * IP address the subscriber signed up from.
         */
        readonly ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        readonly timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        readonly ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        readonly timestamp_opt?: string;
        /**
         * Star rating for this member, between 1 and 5.
         */
        readonly member_rating?: number;
        /**
         * The date and time the member's info was last changed in ISO 8601 format.
         */
        readonly last_changed?: string;
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * The list member's email client.
         */
        readonly email_client?: string;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
            /**
             * The time difference in hours from GMT.
             */
            readonly gmtoff?: number;
            /**
             * The offset for timezones where daylight saving time is observed.
             */
            readonly dstoff?: number;
            /**
             * The unique code for the location country.
             */
            readonly country_code?: string;
            /**
             * The timezone for the location.
             */
            readonly timezone?: string;
        };
        /**
         * The most recent Note added about this member.
         */
        readonly last_note?: {
            /**
             * The note id.
             */
            readonly note_id?: number;
            /**
             * The date and time the note was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The author of the note.
             */
            readonly created_by?: string;
            /**
             * The content of the note.
             */
            readonly note?: string;
        };
        /**
         * The number of tags applied to this member.
         */
        readonly tags_count?: number;
        /**
         * The tags applied to this member.
         */
        tags?: Array<{
            /**
             * The tag id.
             */
            readonly id?: number;
            /**
             * The name of the tag
             */
            readonly name?: string;
        }>;
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of objects, each representing an existing list member whose subscription status was updated.
     */
    updated_members?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * Email address for a subscriber.
         */
        email_address?: string;
        /**
         * An identifier for the address across all of Mailchimp.
         */
        readonly unique_email_id?: string;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * An individual merge var and value for a member.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * Open and click rates for this subscriber.
         */
        readonly stats?: {
            /**
             * A subscriber's average open rate.
             */
            readonly avg_open_rate?: number;
            /**
             * A subscriber's average clickthrough rate.
             */
            readonly avg_click_rate?: number;
        };
        /**
         * IP address the subscriber signed up from.
         */
        readonly ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        readonly timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        readonly ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        readonly timestamp_opt?: string;
        /**
         * Star rating for this member, between 1 and 5.
         */
        readonly member_rating?: number;
        /**
         * The date and time the member's info was last changed in ISO 8601 format.
         */
        readonly last_changed?: string;
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * The list member's email client.
         */
        readonly email_client?: string;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
            /**
             * The time difference in hours from GMT.
             */
            readonly gmtoff?: number;
            /**
             * The offset for timezones where daylight saving time is observed.
             */
            readonly dstoff?: number;
            /**
             * The unique code for the location country.
             */
            readonly country_code?: string;
            /**
             * The timezone for the location.
             */
            readonly timezone?: string;
        };
        /**
         * The most recent Note added about this member.
         */
        readonly last_note?: {
            /**
             * The note id.
             */
            readonly note_id?: number;
            /**
             * The date and time the note was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The author of the note.
             */
            readonly created_by?: string;
            /**
             * The content of the note.
             */
            readonly note?: string;
        };
        /**
         * The number of tags applied to this member.
         */
        readonly tags_count?: number;
        /**
         * The tags applied to this member.
         */
        tags?: Array<{
            /**
             * The tag id.
             */
            readonly id?: number;
            /**
             * The name of the tag
             */
            readonly name?: string;
        }>;
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of objects, each representing an email address that could not be added to the list or updated and an error message providing more details.
     */
    errors?: Array<{
        /**
         * The email address that could not be added or updated.
         */
        email_address?: string;
        /**
         * The error message indicating why the email address could not be added or updated.
         */
        error?: string;
        /**
         * A unique code that identifies this specifc error.
         */
        error_code?: 'ERROR_CONTACT_EXISTS' | 'ERROR_GENERIC';
        /**
         * If the error is field-related, information about which field is at issue.
         */
        field?: string;
        /**
         * Message indicating how to resolve a field-related error.
         */
        field_message?: string;
    }>;
    /**
     * The total number of items matching the query, irrespective of pagination.
     */
    total_created?: number;
    /**
     * The total number of items matching the query, irrespective of pagination.
     */
    total_updated?: number;
    /**
     * The total number of items matching the query, irrespective of pagination.
     */
    error_count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdAbuseReportsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListsIdAbuseReportsResponse = ({
    /**
     * An array of objects, each representing an abuse report resource.
     */
    abuse_reports?: Array<{
        /**
         * The id for the abuse report
         */
        readonly id?: number;
        /**
         * The campaign id for the abuse report
         */
        readonly campaign_id?: string;
        /**
         * The list id for the abuse report.
         */
        readonly list_id?: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        readonly vip?: boolean;
        /**
         * Date for the abuse report
         */
        readonly date?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The list id for the abuse report.
     */
    list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdAbuseReportsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdAbuseReportsIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The id for the abuse report.
         */
        report_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListsIdAbuseReportsIdResponse = ({
    /**
     * The id for the abuse report
     */
    readonly id?: number;
    /**
     * The campaign id for the abuse report
     */
    readonly campaign_id?: string;
    /**
     * The list id for the abuse report.
     */
    readonly list_id?: string;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    readonly vip?: boolean;
    /**
     * Date for the abuse report
     */
    readonly date?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdAbuseReportsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdActivityData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListsIdActivityResponse = ({
    /**
     * Recent list activity.
     */
    activity?: Array<{
        /**
         * The date for the activity summary.
         */
        readonly day?: string;
        /**
         * The total number of emails sent on the date for the activity summary.
         */
        readonly emails_sent?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of clicks.
         */
        readonly recipient_clicks?: number;
        /**
         * The number of hard bounces.
         */
        readonly hard_bounce?: number;
        /**
         * The number of soft bounces
         */
        readonly soft_bounce?: number;
        /**
         * The number of subscribes.
         */
        readonly subs?: number;
        /**
         * The number of unsubscribes.
         */
        readonly unsubs?: number;
        /**
         * The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity.
         */
        readonly other_adds?: number;
        /**
         * The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers).
         */
        readonly other_removes?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The unique id for the list.
     */
    list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdActivityError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdClientsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdClientsResponse = ({
    /**
     * An array of top email clients.
     */
    clients?: Array<{
        /**
         * The name of the email client.
         */
        readonly client?: string;
        /**
         * The number of subscribed members who used this email client.
         */
        readonly members?: number;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdClientsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdGrowthHistoryData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'month';
    };
};

export type GetListsIdGrowthHistoryResponse = ({
    /**
     * An array of objects, each representing a monthly growth report for a list.
     */
    history?: Array<{
        /**
         * The list id for the growth activity report.
         */
        readonly list_id?: string;
        /**
         * The month that the growth history is describing.
         */
        readonly month?: string;
        /**
         * (deprecated)
         */
        readonly existing?: number;
        /**
         * (deprecated)
         */
        readonly imports?: number;
        /**
         * (deprecated)
         */
        readonly optins?: number;
        /**
         * Total subscribed members on the list at the end of the month.
         */
        readonly subscribed?: number;
        /**
         * Newly unsubscribed members on the list for a specific month.
         */
        readonly unsubscribed?: number;
        /**
         * Newly reconfirmed members on the list for a specific month.
         */
        readonly reconfirm?: number;
        /**
         * Newly cleaned (hard-bounced) members on the list for a specific month.
         */
        readonly cleaned?: number;
        /**
         * Pending members on the list for a specific month.
         */
        readonly pending?: number;
        /**
         * Newly deleted members on the list for a specific month.
         */
        readonly deleted?: number;
        /**
         * Subscribers that have been sent transactional emails via Mandrill.
         */
        readonly transactional?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdGrowthHistoryError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdGrowthHistoryIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * A specific month of list growth history.
         */
        month: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdGrowthHistoryIdResponse = ({
    /**
     * The list id for the growth activity report.
     */
    readonly list_id?: string;
    /**
     * The month that the growth history is describing.
     */
    readonly month?: string;
    /**
     * (deprecated)
     */
    readonly existing?: number;
    /**
     * (deprecated)
     */
    readonly imports?: number;
    /**
     * (deprecated)
     */
    readonly optins?: number;
    /**
     * Total subscribed members on the list at the end of the month.
     */
    readonly subscribed?: number;
    /**
     * Newly unsubscribed members on the list for a specific month.
     */
    readonly unsubscribed?: number;
    /**
     * Newly reconfirmed members on the list for a specific month.
     */
    readonly reconfirm?: number;
    /**
     * Newly cleaned (hard-bounced) members on the list for a specific month.
     */
    readonly cleaned?: number;
    /**
     * Pending members on the list for a specific month.
     */
    readonly pending?: number;
    /**
     * Newly deleted members on the list for a specific month.
     */
    readonly deleted?: number;
    /**
     * Subscribers that have been sent transactional emails via Mandrill.
     */
    readonly transactional?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdGrowthHistoryIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdInterestCategoriesData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict results a type of interest group
         */
        type?: string;
    };
};

export type GetListsIdInterestCategoriesResponse = ({
    /**
     * The ID for the list that this category belongs to.
     */
    readonly list_id?: string;
    /**
     * This array contains individual interest categories.
     */
    categories?: Array<{
        /**
         * The unique list id for the category.
         */
        readonly list_id?: string;
        /**
         * The id for the interest category.
         */
        readonly id?: string;
        /**
         * The text description of this category. This field appears on signup forms and is often phrased as a question.
         */
        title?: string;
        /**
         * The order that the categories are displayed in the list. Lower numbers display first.
         */
        display_order?: number;
        /**
         * Determines how this category’s interests appear on signup forms.
         */
        type?: 'checkboxes' | 'dropdown' | 'radio' | 'hidden';
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdInterestCategoriesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdInterestCategoriesData = {
    body: {
        /**
         * The text description of this category. This field appears on signup forms and is often phrased as a question.
         */
        title: string;
        /**
         * The order that the categories are displayed in the list. Lower numbers display first.
         */
        display_order?: number;
        /**
         * Determines how this category’s interests appear on signup forms.
         */
        type: 'checkboxes' | 'dropdown' | 'radio' | 'hidden';
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PostListsIdInterestCategoriesResponse = ({
    /**
     * The unique list id for the category.
     */
    readonly list_id?: string;
    /**
     * The id for the interest category.
     */
    readonly id?: string;
    /**
     * The text description of this category. This field appears on signup forms and is often phrased as a question.
     */
    title?: string;
    /**
     * The order that the categories are displayed in the list. Lower numbers display first.
     */
    display_order?: number;
    /**
     * Determines how this category’s interests appear on signup forms.
     */
    type?: 'checkboxes' | 'dropdown' | 'radio' | 'hidden';
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdInterestCategoriesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdInterestCategoriesIdData = {
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdInterestCategoriesIdResponse = ({
    /**
     * The unique list id for the category.
     */
    readonly list_id?: string;
    /**
     * The id for the interest category.
     */
    readonly id?: string;
    /**
     * The text description of this category. This field appears on signup forms and is often phrased as a question.
     */
    title?: string;
    /**
     * The order that the categories are displayed in the list. Lower numbers display first.
     */
    display_order?: number;
    /**
     * Determines how this category’s interests appear on signup forms.
     */
    type?: 'checkboxes' | 'dropdown' | 'radio' | 'hidden';
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdInterestCategoriesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdInterestCategoriesIdData = {
    body: {
        /**
         * The text description of this category. This field appears on signup forms and is often phrased as a question.
         */
        title: string;
        /**
         * The order that the categories are displayed in the list. Lower numbers display first.
         */
        display_order?: number;
        /**
         * Determines how this category’s interests appear on signup forms.
         */
        type: 'checkboxes' | 'dropdown' | 'radio' | 'hidden';
    };
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PatchListsIdInterestCategoriesIdResponse = ({
    /**
     * The unique list id for the category.
     */
    readonly list_id?: string;
    /**
     * The id for the interest category.
     */
    readonly id?: string;
    /**
     * The text description of this category. This field appears on signup forms and is often phrased as a question.
     */
    title?: string;
    /**
     * The order that the categories are displayed in the list. Lower numbers display first.
     */
    display_order?: number;
    /**
     * Determines how this category’s interests appear on signup forms.
     */
    type?: 'checkboxes' | 'dropdown' | 'radio' | 'hidden';
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdInterestCategoriesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdInterestCategoriesIdData = {
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type DeleteListsIdInterestCategoriesIdResponse = (void);

export type DeleteListsIdInterestCategoriesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdInterestCategoriesIdInterestsData = {
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListsIdInterestCategoriesIdInterestsResponse = ({
    /**
     * An array of this category's interests
     */
    interests?: Array<{
        /**
         * The id for the interest category.
         */
        readonly category_id?: string;
        /**
         * The ID for the list that this interest belongs to.
         */
        readonly list_id?: string;
        /**
         * The ID for the interest.
         */
        readonly id?: string;
        /**
         * The name of the interest. This can be shown publicly on a subscription form.
         */
        name?: string;
        /**
         * The number of subscribers associated with this interest.
         */
        readonly subscriber_count?: string;
        /**
         * The display order for interests.
         */
        display_order?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The unique list id that the interests belong to.
     */
    list_id?: string;
    /**
     * The id for the interest category.
     */
    category_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdInterestCategoriesIdInterestsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdInterestCategoriesIdInterestsData = {
    body: {
        /**
         * The name of the interest. This can be shown publicly on a subscription form.
         */
        name: string;
        /**
         * The display order for interests.
         */
        display_order?: number;
    };
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PostListsIdInterestCategoriesIdInterestsResponse = ({
    /**
     * The id for the interest category.
     */
    readonly category_id?: string;
    /**
     * The ID for the list that this interest belongs to.
     */
    readonly list_id?: string;
    /**
     * The ID for the interest.
     */
    readonly id?: string;
    /**
     * The name of the interest. This can be shown publicly on a subscription form.
     */
    name?: string;
    /**
     * The number of subscribers associated with this interest.
     */
    readonly subscriber_count?: string;
    /**
     * The display order for interests.
     */
    display_order?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdInterestCategoriesIdInterestsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdInterestCategoriesIdInterestsIdData = {
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The specific interest or 'group name'.
         */
        interest_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdInterestCategoriesIdInterestsIdResponse = ({
    /**
     * The id for the interest category.
     */
    readonly category_id?: string;
    /**
     * The ID for the list that this interest belongs to.
     */
    readonly list_id?: string;
    /**
     * The ID for the interest.
     */
    readonly id?: string;
    /**
     * The name of the interest. This can be shown publicly on a subscription form.
     */
    name?: string;
    /**
     * The number of subscribers associated with this interest.
     */
    readonly subscriber_count?: string;
    /**
     * The display order for interests.
     */
    display_order?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdInterestCategoriesIdInterestsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdInterestCategoriesIdInterestsIdData = {
    body: {
        /**
         * The name of the interest. This can be shown publicly on a subscription form.
         */
        name: string;
        /**
         * The display order for interests.
         */
        display_order?: number;
    };
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The specific interest or 'group name'.
         */
        interest_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PatchListsIdInterestCategoriesIdInterestsIdResponse = ({
    /**
     * The id for the interest category.
     */
    readonly category_id?: string;
    /**
     * The ID for the list that this interest belongs to.
     */
    readonly list_id?: string;
    /**
     * The ID for the interest.
     */
    readonly id?: string;
    /**
     * The name of the interest. This can be shown publicly on a subscription form.
     */
    name?: string;
    /**
     * The number of subscribers associated with this interest.
     */
    readonly subscriber_count?: string;
    /**
     * The display order for interests.
     */
    display_order?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdInterestCategoriesIdInterestsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdInterestCategoriesIdInterestsIdData = {
    path: {
        /**
         * The unique ID for the interest category.
         */
        interest_category_id: string;
        /**
         * The specific interest or 'group name'.
         */
        interest_id: string;
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type DeleteListsIdInterestCategoriesIdInterestsIdResponse = (void);

export type DeleteListsIdInterestCategoriesIdInterestsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PreviewAsegmentData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_created_at?: string;
        /**
         * Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_updated_at?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Include cleaned members in response
         */
        include_cleaned?: boolean;
        /**
         * Include transactional members in response
         */
        include_transactional?: boolean;
        /**
         * Include unsubscribed members in response
         */
        include_unsubscribed?: boolean;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_created_at?: string;
        /**
         * Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_updated_at?: string;
        /**
         * Limit results based on segment type.
         */
        type?: string;
    };
};

export type PreviewAsegmentResponse = ({
    /**
     * An array of objects, each representing a list segment.
     */
    segments?: Array<{
        /**
         * The unique id for the segment.
         */
        readonly id?: number;
        /**
         * The name of the segment.
         */
        name?: string;
        /**
         * The number of active subscribers currently included in the segment.
         */
        readonly member_count?: number;
        /**
         * The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs).
         */
        readonly type?: 'saved' | 'static' | 'fuzzy';
        /**
         * The date and time the segment was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the segment was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions.
         */
        options?: {
            /**
             * Match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PreviewAsegmentError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdSegmentsData = {
    body: {
        /**
         * The name of the segment.
         */
        name: string;
        /**
         * An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field.
         */
        static_segment?: Array<(string)>;
        /**
         * The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions.
         */
        options?: {
            /**
             * Match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PostListsIdSegmentsResponse = ({
    /**
     * The unique id for the segment.
     */
    readonly id?: number;
    /**
     * The name of the segment.
     */
    name?: string;
    /**
     * The number of active subscribers currently included in the segment.
     */
    readonly member_count?: number;
    /**
     * The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs).
     */
    readonly type?: 'saved' | 'static' | 'fuzzy';
    /**
     * The date and time the segment was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the segment was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions.
     */
    options?: {
        /**
         * Match type.
         */
        match?: 'any' | 'all';
        /**
         * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
         */
        conditions?: Array<unknown>;
    };
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdSegmentsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdSegmentsIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The unique id for the segment.
         */
        segment_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Include cleaned members in response
         */
        include_cleaned?: boolean;
        /**
         * Include transactional members in response
         */
        include_transactional?: boolean;
        /**
         * Include unsubscribed members in response
         */
        include_unsubscribed?: boolean;
    };
};

export type GetListsIdSegmentsIdResponse = ({
    /**
     * The unique id for the segment.
     */
    readonly id?: number;
    /**
     * The name of the segment.
     */
    name?: string;
    /**
     * The number of active subscribers currently included in the segment.
     */
    readonly member_count?: number;
    /**
     * The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs).
     */
    readonly type?: 'saved' | 'static' | 'fuzzy';
    /**
     * The date and time the segment was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the segment was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions.
     */
    options?: {
        /**
         * Match type.
         */
        match?: 'any' | 'all';
        /**
         * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
         */
        conditions?: Array<unknown>;
    };
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdSegmentsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdSegmentsIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The unique id for the segment.
         */
        segment_id: string;
    };
};

export type DeleteListsIdSegmentsIdResponse = (void);

export type DeleteListsIdSegmentsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdSegmentsIdData = {
    body: {
        /**
         * The name of the segment.
         */
        name: string;
        /**
         * An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array for an existing static segment will reset that segment and remove all members. This field cannot be provided with the `options` field.
         */
        static_segment?: Array<(string)>;
        /**
         * The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions.
         */
        options?: {
            /**
             * Match type.
             */
            match?: 'any' | 'all';
            /**
             * An array of segment conditions.
             */
            conditions?: Array<Array<unknown>>;
        };
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The unique id for the segment.
         */
        segment_id: string;
    };
};

export type PatchListsIdSegmentsIdResponse = ({
    /**
     * The unique id for the segment.
     */
    readonly id?: number;
    /**
     * The name of the segment.
     */
    name?: string;
    /**
     * The number of active subscribers currently included in the segment.
     */
    readonly member_count?: number;
    /**
     * The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs).
     */
    readonly type?: 'saved' | 'static' | 'fuzzy';
    /**
     * The date and time the segment was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the segment was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions.
     */
    options?: {
        /**
         * Match type.
         */
        match?: 'any' | 'all';
        /**
         * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
         */
        conditions?: Array<unknown>;
    };
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdSegmentsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdSegmentsIdData = {
    body: {
        /**
         * An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent.
         */
        members_to_add?: Array<(string)>;
        /**
         * An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent.
         */
        members_to_remove?: Array<(string)>;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The unique id for the segment.
         */
        segment_id: string;
    };
};

export type PostListsIdSegmentsIdResponse = ({
    /**
     * An array of objects, each representing a new member that was added to the static segment.
     */
    members_added?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * Email address for a subscriber.
         */
        email_address?: string;
        /**
         * An identifier for the address across all of Mailchimp.
         */
        readonly unique_email_id?: string;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * An individual merge var and value for a member.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * Open and click rates for this subscriber.
         */
        readonly stats?: {
            /**
             * A subscriber's average open rate.
             */
            readonly avg_open_rate?: number;
            /**
             * A subscriber's average clickthrough rate.
             */
            readonly avg_click_rate?: number;
        };
        /**
         * IP address the subscriber signed up from.
         */
        readonly ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        readonly timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        readonly ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        readonly timestamp_opt?: string;
        /**
         * Star rating for this member, between 1 and 5.
         */
        readonly member_rating?: number;
        /**
         * The date and time the member's info was last changed in ISO 8601 format.
         */
        readonly last_changed?: string;
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * The list member's email client.
         */
        readonly email_client?: string;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
            /**
             * The time difference in hours from GMT.
             */
            readonly gmtoff?: number;
            /**
             * The offset for timezones where daylight saving time is observed.
             */
            readonly dstoff?: number;
            /**
             * The unique code for the location country.
             */
            readonly country_code?: string;
            /**
             * The timezone for the location.
             */
            readonly timezone?: string;
        };
        /**
         * The most recent Note added about this member.
         */
        readonly last_note?: {
            /**
             * The note id.
             */
            readonly note_id?: number;
            /**
             * The date and time the note was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The author of the note.
             */
            readonly created_by?: string;
            /**
             * The content of the note.
             */
            readonly note?: string;
        };
        /**
         * The number of tags applied to this member.
         */
        readonly tags_count?: number;
        /**
         * The tags applied to this member.
         */
        tags?: Array<{
            /**
             * The tag id.
             */
            readonly id?: number;
            /**
             * The name of the tag
             */
            readonly name?: string;
        }>;
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of objects, each representing an existing list member that got deleted from the static segment.
     */
    members_removed?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * Email address for a subscriber.
         */
        email_address?: string;
        /**
         * An identifier for the address across all of Mailchimp.
         */
        readonly unique_email_id?: string;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * An individual merge var and value for a member.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * Open and click rates for this subscriber.
         */
        readonly stats?: {
            /**
             * A subscriber's average open rate.
             */
            readonly avg_open_rate?: number;
            /**
             * A subscriber's average clickthrough rate.
             */
            readonly avg_click_rate?: number;
        };
        /**
         * IP address the subscriber signed up from.
         */
        readonly ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        readonly timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        readonly ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        readonly timestamp_opt?: string;
        /**
         * Star rating for this member, between 1 and 5.
         */
        readonly member_rating?: number;
        /**
         * The date and time the member's info was last changed in ISO 8601 format.
         */
        readonly last_changed?: string;
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * The list member's email client.
         */
        readonly email_client?: string;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
            /**
             * The time difference in hours from GMT.
             */
            readonly gmtoff?: number;
            /**
             * The offset for timezones where daylight saving time is observed.
             */
            readonly dstoff?: number;
            /**
             * The unique code for the location country.
             */
            readonly country_code?: string;
            /**
             * The timezone for the location.
             */
            readonly timezone?: string;
        };
        /**
         * The most recent Note added about this member.
         */
        readonly last_note?: {
            /**
             * The note id.
             */
            readonly note_id?: number;
            /**
             * The date and time the note was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The author of the note.
             */
            readonly created_by?: string;
            /**
             * The content of the note.
             */
            readonly note?: string;
        };
        /**
         * The number of tags applied to this member.
         */
        readonly tags_count?: number;
        /**
         * The tags applied to this member.
         */
        tags?: Array<{
            /**
             * The tag id.
             */
            readonly id?: number;
            /**
             * The name of the tag
             */
            readonly name?: string;
        }>;
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of objects, each representing an array of email addresses that could not be added to the segment or removed and an error message providing more details.
     */
    errors?: Array<{
        /**
         * Email addresses added to the static segment or removed
         */
        email_addresses?: Array<(string)>;
        /**
         * The error message indicating why the email addresses could not be added or updated.
         */
        error?: string;
    }>;
    /**
     * The total number of items matching the query, irrespective of pagination.
     */
    total_added?: number;
    /**
     * The total number of items matching the query, irrespective of pagination.
     */
    total_removed?: number;
    /**
     * The total number of items matching the query, irrespective of pagination.
     */
    error_count?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdSegmentsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdSegmentsIdMembersData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The unique id for the segment.
         */
        segment_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Include cleaned members in response
         */
        include_cleaned?: boolean;
        /**
         * Include transactional members in response
         */
        include_transactional?: boolean;
        /**
         * Include unsubscribed members in response
         */
        include_unsubscribed?: boolean;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListsIdSegmentsIdMembersResponse = ({
    /**
     * An array of objects, each representing a specific list member.
     */
    members?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * The contact's full name.
         */
        readonly full_name?: string;
        /**
         * An identifier for the address across all of Mailchimp.
         */
        readonly unique_email_id?: string;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * Open and click rates for this subscriber.
         */
        readonly stats?: {
            /**
             * A subscriber's average open rate.
             */
            readonly avg_open_rate?: number;
            /**
             * A subscriber's average clickthrough rate.
             */
            readonly avg_click_rate?: number;
        };
        /**
         * IP address the subscriber signed up from.
         */
        readonly ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        readonly timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        readonly ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        readonly timestamp_opt?: string;
        /**
         * Star rating for this member, between 1 and 5.
         */
        readonly member_rating?: number;
        /**
         * The date and time the member's info was last changed in ISO 8601 format.
         */
        readonly last_changed?: string;
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * The list member's email client.
         */
        readonly email_client?: string;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
            /**
             * The time difference in hours from GMT.
             */
            readonly gmtoff?: number;
            /**
             * The offset for timezones where daylight saving time is observed.
             */
            readonly dstoff?: number;
            /**
             * The unique code for the location country.
             */
            readonly country_code?: string;
            /**
             * The timezone for the location.
             */
            readonly timezone?: string;
        };
        /**
         * The most recent Note added about this member.
         */
        readonly last_note?: {
            /**
             * The note id.
             */
            readonly note_id?: number;
            /**
             * The date and time the note was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The author of the note.
             */
            readonly created_by?: string;
            /**
             * The content of the note.
             */
            readonly note?: string;
        };
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdSegmentsIdMembersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdSegmentsIdMembersData = {
    body: {
        /**
         * Email address for a subscriber.
         */
        email_address: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The unique id for the segment.
         */
        segment_id: string;
    };
};

export type PostListsIdSegmentsIdMembersResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * The contact's full name.
     */
    readonly full_name?: string;
    /**
     * An identifier for the address across all of Mailchimp.
     */
    readonly unique_email_id?: string;
    /**
     * Type of email this member asked to get ('html' or 'text').
     */
    email_type?: string;
    /**
     * Subscriber's current status.
     */
    status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * The key of this object's properties is the ID of the interest in question.
     */
    interests?: {
        [key: string]: (boolean);
    };
    /**
     * Open and click rates for this subscriber.
     */
    readonly stats?: {
        /**
         * A subscriber's average open rate.
         */
        readonly avg_open_rate?: number;
        /**
         * A subscriber's average clickthrough rate.
         */
        readonly avg_click_rate?: number;
    };
    /**
     * IP address the subscriber signed up from.
     */
    readonly ip_signup?: string;
    /**
     * The date and time the subscriber signed up for the list in ISO 8601 format.
     */
    readonly timestamp_signup?: string;
    /**
     * The IP address the subscriber used to confirm their opt-in status.
     */
    readonly ip_opt?: string;
    /**
     * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
     */
    readonly timestamp_opt?: string;
    /**
     * Star rating for this member, between 1 and 5.
     */
    readonly member_rating?: number;
    /**
     * The date and time the member's info was last changed in ISO 8601 format.
     */
    readonly last_changed?: string;
    /**
     * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
     */
    language?: string;
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    vip?: boolean;
    /**
     * The list member's email client.
     */
    readonly email_client?: string;
    /**
     * Subscriber location information.
     */
    location?: {
        /**
         * The location latitude.
         */
        latitude?: number;
        /**
         * The location longitude.
         */
        longitude?: number;
        /**
         * The time difference in hours from GMT.
         */
        readonly gmtoff?: number;
        /**
         * The offset for timezones where daylight saving time is observed.
         */
        readonly dstoff?: number;
        /**
         * The unique code for the location country.
         */
        readonly country_code?: string;
        /**
         * The timezone for the location.
         */
        readonly timezone?: string;
    };
    /**
     * The most recent Note added about this member.
     */
    readonly last_note?: {
        /**
         * The note id.
         */
        readonly note_id?: number;
        /**
         * The date and time the note was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The author of the note.
         */
        readonly created_by?: string;
        /**
         * The content of the note.
         */
        readonly note?: string;
    };
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdSegmentsIdMembersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdSegmentsIdMembersIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The unique id for the segment.
         */
        segment_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
};

export type DeleteListsIdSegmentsIdMembersIdResponse = (void);

export type DeleteListsIdSegmentsIdMembersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type SearchTagsByNameData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.
         */
        name?: string;
    };
};

export type SearchTagsByNameResponse = ({
    /**
     * A list of matching tags.
     */
    readonly tags?: Array<unknown>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
});

export type SearchTagsByNameError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_last_changed?: string;
        /**
         * Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_timestamp_opt?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * The email type.
         */
        email_type?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * The unique id for the interest category.
         */
        interest_category_id?: string;
        /**
         * Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.
         */
        interest_ids?: string;
        /**
         * Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. "any" will match a member with any of the interest supplied, "all" will only match members with every interest supplied, and "none" will match members without any of the interest supplied.
         */
        interest_match?: 'any' | 'all' | 'none';
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.
         */
        since_last_campaign?: boolean;
        /**
         * Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_last_changed?: string;
        /**
         * Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_timestamp_opt?: string;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'timestamp_opt' | 'timestamp_signup' | 'last_changed';
        /**
         * The subscriber's status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
        /**
         * A unique identifier for the email address across all Mailchimp lists.
         */
        unique_email_id?: string;
        /**
         * Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.
         */
        unsubscribed_since?: string;
        /**
         * A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.
         */
        vip_only?: boolean;
    };
};

export type GetListsIdMembersResponse = ({
    /**
     * An array of objects, each representing a specific list member.
     */
    members?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly id?: string;
        /**
         * Email address for a subscriber.
         */
        email_address?: string;
        /**
         * An identifier for the address across all of Mailchimp.
         */
        readonly unique_email_id?: string;
        /**
         * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
         */
        readonly contact_id?: string;
        /**
         * The contact's full name.
         */
        readonly full_name?: string;
        /**
         * The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.
         */
        readonly web_id?: number;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
        /**
         * A subscriber's reason for unsubscribing.
         */
        unsubscribe_reason?: string;
        /**
         * Indicates whether a contact consents to 1:1 messaging.
         */
        readonly consents_to_one_to_one_messaging?: boolean;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The status of an SMS subscription.
         */
        sms_subscription_status?: 'subscribed' | 'unsubscribed' | 'nonsubscribed' | 'pending';
        /**
         * The datetime when the SMS subscription was last updated
         */
        sms_subscription_last_updated?: string;
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * Open and click rates for this subscriber.
         */
        readonly stats?: {
            /**
             * A subscriber's average open rate.
             */
            readonly avg_open_rate?: number;
            /**
             * A subscriber's average clickthrough rate.
             */
            readonly avg_click_rate?: number;
            /**
             * Ecommerce stats for the list member if the list is attached to a store.
             */
            readonly ecommerce_data?: {
                /**
                 * The total revenue the list member has brought in.
                 */
                readonly total_revenue?: number;
                /**
                 * The total number of orders placed by the list member.
                 */
                readonly number_of_orders?: number;
                /**
                 * The three-letter ISO 4217 code for the currency that the store accepts.
                 */
                readonly currency_code?: string;
            };
        };
        /**
         * IP address the subscriber signed up from.
         */
        readonly ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        readonly timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        readonly ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        readonly timestamp_opt?: string;
        /**
         * Star rating for this member, between 1 and 5.
         */
        readonly member_rating?: number;
        /**
         * The date and time the member's info was last changed in ISO 8601 format.
         */
        readonly last_changed?: string;
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * The list member's email client.
         */
        readonly email_client?: string;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
            /**
             * The time difference in hours from GMT.
             */
            readonly gmtoff?: number;
            /**
             * The offset for timezones where daylight saving time is observed.
             */
            readonly dstoff?: number;
            /**
             * The unique code for the location country.
             */
            readonly country_code?: string;
            /**
             * The timezone for the location.
             */
            readonly timezone?: string;
            /**
             * The region for the location.
             */
            readonly region?: string;
        };
        /**
         * The marketing permissions for the subscriber.
         */
        marketing_permissions?: Array<{
            /**
             * The id for the marketing permission on the list
             */
            marketing_permission_id?: string;
            /**
             * The text of the marketing permission.
             */
            text?: string;
            /**
             * If the subscriber has opted-in to the marketing permission.
             */
            enabled?: boolean;
        }>;
        /**
         * The most recent Note added about this member.
         */
        readonly last_note?: {
            /**
             * The note id.
             */
            readonly note_id?: number;
            /**
             * The date and time the note was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The author of the note.
             */
            readonly created_by?: string;
            /**
             * The content of the note.
             */
            readonly note?: string;
        };
        /**
         * The source from which the subscriber was added to this list.
         */
        readonly source?: string;
        /**
         * The number of tags applied to this member.
         */
        readonly tags_count?: number;
        /**
         * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
         */
        tags?: Array<{
            /**
             * The tag id.
             */
            readonly id?: number;
            /**
             * The name of the tag
             */
            readonly name?: string;
        }>;
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The list id.
     */
    list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdMembersData = {
    body: {
        /**
         * Email address for a subscriber.
         */
        email_address: string;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
        };
        /**
         * The marketing permissions for the subscriber.
         */
        marketing_permissions?: Array<{
            /**
             * The id for the marketing permission on the list
             */
            marketing_permission_id?: string;
            /**
             * If the subscriber has opted-in to the marketing permission.
             */
            enabled?: boolean;
        }>;
        /**
         * IP address the subscriber signed up from.
         */
        ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        timestamp_opt?: string;
        /**
         * The tags that are associated with a member.
         */
        tags?: Array<(string)>;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
         */
        skip_merge_validation?: boolean;
    };
};

export type PostListsIdMembersResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * Email address for a subscriber.
     */
    email_address?: string;
    /**
     * An identifier for the address across all of Mailchimp.
     */
    readonly unique_email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * The contact's full name.
     */
    readonly full_name?: string;
    /**
     * The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * Type of email this member asked to get ('html' or 'text').
     */
    email_type?: string;
    /**
     * Subscriber's current status.
     */
    status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
    /**
     * A subscriber's reason for unsubscribing.
     */
    unsubscribe_reason?: string;
    /**
     * Indicates whether a contact consents to 1:1 messaging.
     */
    readonly consents_to_one_to_one_messaging?: boolean;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The status of an SMS subscription.
     */
    sms_subscription_status?: 'subscribed' | 'unsubscribed' | 'nonsubscribed' | 'pending';
    /**
     * The datetime when the SMS subscription was last updated
     */
    sms_subscription_last_updated?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * The key of this object's properties is the ID of the interest in question.
     */
    interests?: {
        [key: string]: (boolean);
    };
    /**
     * Open and click rates for this subscriber.
     */
    readonly stats?: {
        /**
         * A subscriber's average open rate.
         */
        readonly avg_open_rate?: number;
        /**
         * A subscriber's average clickthrough rate.
         */
        readonly avg_click_rate?: number;
        /**
         * Ecommerce stats for the list member if the list is attached to a store.
         */
        readonly ecommerce_data?: {
            /**
             * The total revenue the list member has brought in.
             */
            readonly total_revenue?: number;
            /**
             * The total number of orders placed by the list member.
             */
            readonly number_of_orders?: number;
            /**
             * The three-letter ISO 4217 code for the currency that the store accepts.
             */
            readonly currency_code?: string;
        };
    };
    /**
     * IP address the subscriber signed up from.
     */
    readonly ip_signup?: string;
    /**
     * The date and time the subscriber signed up for the list in ISO 8601 format.
     */
    readonly timestamp_signup?: string;
    /**
     * The IP address the subscriber used to confirm their opt-in status.
     */
    readonly ip_opt?: string;
    /**
     * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
     */
    readonly timestamp_opt?: string;
    /**
     * Star rating for this member, between 1 and 5.
     */
    readonly member_rating?: number;
    /**
     * The date and time the member's info was last changed in ISO 8601 format.
     */
    readonly last_changed?: string;
    /**
     * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
     */
    language?: string;
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    vip?: boolean;
    /**
     * The list member's email client.
     */
    readonly email_client?: string;
    /**
     * Subscriber location information.
     */
    location?: {
        /**
         * The location latitude.
         */
        latitude?: number;
        /**
         * The location longitude.
         */
        longitude?: number;
        /**
         * The time difference in hours from GMT.
         */
        readonly gmtoff?: number;
        /**
         * The offset for timezones where daylight saving time is observed.
         */
        readonly dstoff?: number;
        /**
         * The unique code for the location country.
         */
        readonly country_code?: string;
        /**
         * The timezone for the location.
         */
        readonly timezone?: string;
        /**
         * The region for the location.
         */
        readonly region?: string;
    };
    /**
     * The marketing permissions for the subscriber.
     */
    marketing_permissions?: Array<{
        /**
         * The id for the marketing permission on the list
         */
        marketing_permission_id?: string;
        /**
         * The text of the marketing permission.
         */
        text?: string;
        /**
         * If the subscriber has opted-in to the marketing permission.
         */
        enabled?: boolean;
    }>;
    /**
     * The most recent Note added about this member.
     */
    readonly last_note?: {
        /**
         * The note id.
         */
        readonly note_id?: number;
        /**
         * The date and time the note was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The author of the note.
         */
        readonly created_by?: string;
        /**
         * The content of the note.
         */
        readonly note?: string;
    };
    /**
     * The source from which the subscriber was added to this list.
     */
    readonly source?: string;
    /**
     * The number of tags applied to this member.
     */
    readonly tags_count?: number;
    /**
     * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
     */
    tags?: Array<{
        /**
         * The tag id.
         */
        readonly id?: number;
        /**
         * The name of the tag
         */
        readonly name?: string;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdMembersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdMembersIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * Email address for a subscriber.
     */
    email_address?: string;
    /**
     * An identifier for the address across all of Mailchimp.
     */
    readonly unique_email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * The contact's full name.
     */
    readonly full_name?: string;
    /**
     * The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * Type of email this member asked to get ('html' or 'text').
     */
    email_type?: string;
    /**
     * Subscriber's current status.
     */
    status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
    /**
     * A subscriber's reason for unsubscribing.
     */
    unsubscribe_reason?: string;
    /**
     * Indicates whether a contact consents to 1:1 messaging.
     */
    readonly consents_to_one_to_one_messaging?: boolean;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The status of an SMS subscription.
     */
    sms_subscription_status?: 'subscribed' | 'unsubscribed' | 'nonsubscribed' | 'pending';
    /**
     * The datetime when the SMS subscription was last updated
     */
    sms_subscription_last_updated?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * The key of this object's properties is the ID of the interest in question.
     */
    interests?: {
        [key: string]: (boolean);
    };
    /**
     * Open and click rates for this subscriber.
     */
    readonly stats?: {
        /**
         * A subscriber's average open rate.
         */
        readonly avg_open_rate?: number;
        /**
         * A subscriber's average clickthrough rate.
         */
        readonly avg_click_rate?: number;
        /**
         * Ecommerce stats for the list member if the list is attached to a store.
         */
        readonly ecommerce_data?: {
            /**
             * The total revenue the list member has brought in.
             */
            readonly total_revenue?: number;
            /**
             * The total number of orders placed by the list member.
             */
            readonly number_of_orders?: number;
            /**
             * The three-letter ISO 4217 code for the currency that the store accepts.
             */
            readonly currency_code?: string;
        };
    };
    /**
     * IP address the subscriber signed up from.
     */
    readonly ip_signup?: string;
    /**
     * The date and time the subscriber signed up for the list in ISO 8601 format.
     */
    readonly timestamp_signup?: string;
    /**
     * The IP address the subscriber used to confirm their opt-in status.
     */
    readonly ip_opt?: string;
    /**
     * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
     */
    readonly timestamp_opt?: string;
    /**
     * Star rating for this member, between 1 and 5.
     */
    readonly member_rating?: number;
    /**
     * The date and time the member's info was last changed in ISO 8601 format.
     */
    readonly last_changed?: string;
    /**
     * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
     */
    language?: string;
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    vip?: boolean;
    /**
     * The list member's email client.
     */
    readonly email_client?: string;
    /**
     * Subscriber location information.
     */
    location?: {
        /**
         * The location latitude.
         */
        latitude?: number;
        /**
         * The location longitude.
         */
        longitude?: number;
        /**
         * The time difference in hours from GMT.
         */
        readonly gmtoff?: number;
        /**
         * The offset for timezones where daylight saving time is observed.
         */
        readonly dstoff?: number;
        /**
         * The unique code for the location country.
         */
        readonly country_code?: string;
        /**
         * The timezone for the location.
         */
        readonly timezone?: string;
        /**
         * The region for the location.
         */
        readonly region?: string;
    };
    /**
     * The marketing permissions for the subscriber.
     */
    marketing_permissions?: Array<{
        /**
         * The id for the marketing permission on the list
         */
        marketing_permission_id?: string;
        /**
         * The text of the marketing permission.
         */
        text?: string;
        /**
         * If the subscriber has opted-in to the marketing permission.
         */
        enabled?: boolean;
    }>;
    /**
     * The most recent Note added about this member.
     */
    readonly last_note?: {
        /**
         * The note id.
         */
        readonly note_id?: number;
        /**
         * The date and time the note was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The author of the note.
         */
        readonly created_by?: string;
        /**
         * The content of the note.
         */
        readonly note?: string;
    };
    /**
     * The source from which the subscriber was added to this list.
     */
    readonly source?: string;
    /**
     * The number of tags applied to this member.
     */
    readonly tags_count?: number;
    /**
     * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
     */
    tags?: Array<{
        /**
         * The tag id.
         */
        readonly id?: number;
        /**
         * The name of the tag
         */
        readonly name?: string;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PutListsIdMembersIdData = {
    body: {
        /**
         * Email address for a subscriber. This value is required only if the email address is not already present on the list.
         */
        email_address: string;
        /**
         * Subscriber's status. This value is required only if the email address is not already present on the list.
         */
        status_if_new: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional';
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
        };
        /**
         * The marketing permissions for the subscriber.
         */
        marketing_permissions?: Array<{
            /**
             * The id for the marketing permission on the list
             */
            marketing_permission_id?: string;
            /**
             * If the subscriber has opted-in to the marketing permission.
             */
            enabled?: boolean;
        }>;
        /**
         * IP address the subscriber signed up from.
         */
        ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        timestamp_opt?: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
         */
        skip_merge_validation?: boolean;
    };
};

export type PutListsIdMembersIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * Email address for a subscriber.
     */
    email_address?: string;
    /**
     * An identifier for the address across all of Mailchimp.
     */
    readonly unique_email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * The contact's full name.
     */
    readonly full_name?: string;
    /**
     * The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * Type of email this member asked to get ('html' or 'text').
     */
    email_type?: string;
    /**
     * Subscriber's current status.
     */
    status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
    /**
     * A subscriber's reason for unsubscribing.
     */
    unsubscribe_reason?: string;
    /**
     * Indicates whether a contact consents to 1:1 messaging.
     */
    readonly consents_to_one_to_one_messaging?: boolean;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The status of an SMS subscription.
     */
    sms_subscription_status?: 'subscribed' | 'unsubscribed' | 'nonsubscribed' | 'pending';
    /**
     * The datetime when the SMS subscription was last updated
     */
    sms_subscription_last_updated?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * The key of this object's properties is the ID of the interest in question.
     */
    interests?: {
        [key: string]: (boolean);
    };
    /**
     * Open and click rates for this subscriber.
     */
    readonly stats?: {
        /**
         * A subscriber's average open rate.
         */
        readonly avg_open_rate?: number;
        /**
         * A subscriber's average clickthrough rate.
         */
        readonly avg_click_rate?: number;
        /**
         * Ecommerce stats for the list member if the list is attached to a store.
         */
        readonly ecommerce_data?: {
            /**
             * The total revenue the list member has brought in.
             */
            readonly total_revenue?: number;
            /**
             * The total number of orders placed by the list member.
             */
            readonly number_of_orders?: number;
            /**
             * The three-letter ISO 4217 code for the currency that the store accepts.
             */
            readonly currency_code?: string;
        };
    };
    /**
     * IP address the subscriber signed up from.
     */
    readonly ip_signup?: string;
    /**
     * The date and time the subscriber signed up for the list in ISO 8601 format.
     */
    readonly timestamp_signup?: string;
    /**
     * The IP address the subscriber used to confirm their opt-in status.
     */
    readonly ip_opt?: string;
    /**
     * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
     */
    readonly timestamp_opt?: string;
    /**
     * Star rating for this member, between 1 and 5.
     */
    readonly member_rating?: number;
    /**
     * The date and time the member's info was last changed in ISO 8601 format.
     */
    readonly last_changed?: string;
    /**
     * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
     */
    language?: string;
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    vip?: boolean;
    /**
     * The list member's email client.
     */
    readonly email_client?: string;
    /**
     * Subscriber location information.
     */
    location?: {
        /**
         * The location latitude.
         */
        latitude?: number;
        /**
         * The location longitude.
         */
        longitude?: number;
        /**
         * The time difference in hours from GMT.
         */
        readonly gmtoff?: number;
        /**
         * The offset for timezones where daylight saving time is observed.
         */
        readonly dstoff?: number;
        /**
         * The unique code for the location country.
         */
        readonly country_code?: string;
        /**
         * The timezone for the location.
         */
        readonly timezone?: string;
        /**
         * The region for the location.
         */
        readonly region?: string;
    };
    /**
     * The marketing permissions for the subscriber.
     */
    marketing_permissions?: Array<{
        /**
         * The id for the marketing permission on the list
         */
        marketing_permission_id?: string;
        /**
         * The text of the marketing permission.
         */
        text?: string;
        /**
         * If the subscriber has opted-in to the marketing permission.
         */
        enabled?: boolean;
    }>;
    /**
     * The most recent Note added about this member.
     */
    readonly last_note?: {
        /**
         * The note id.
         */
        readonly note_id?: number;
        /**
         * The date and time the note was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The author of the note.
         */
        readonly created_by?: string;
        /**
         * The content of the note.
         */
        readonly note?: string;
    };
    /**
     * The source from which the subscriber was added to this list.
     */
    readonly source?: string;
    /**
     * The number of tags applied to this member.
     */
    readonly tags_count?: number;
    /**
     * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
     */
    tags?: Array<{
        /**
         * The tag id.
         */
        readonly id?: number;
        /**
         * The name of the tag
         */
        readonly name?: string;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PutListsIdMembersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdMembersIdData = {
    body: {
        /**
         * Email address for a subscriber.
         */
        email_address?: string;
        /**
         * Type of email this member asked to get ('html' or 'text').
         */
        email_type?: string;
        /**
         * Subscriber's current status.
         */
        status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending';
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * The key of this object's properties is the ID of the interest in question.
         */
        interests?: {
            [key: string]: (boolean);
        };
        /**
         * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
         */
        language?: string;
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        vip?: boolean;
        /**
         * Subscriber location information.
         */
        location?: {
            /**
             * The location latitude.
             */
            latitude?: number;
            /**
             * The location longitude.
             */
            longitude?: number;
        };
        /**
         * The marketing permissions for the subscriber.
         */
        marketing_permissions?: Array<{
            /**
             * The id for the marketing permission on the list
             */
            marketing_permission_id?: string;
            /**
             * If the subscriber has opted-in to the marketing permission.
             */
            enabled?: boolean;
        }>;
        /**
         * IP address the subscriber signed up from.
         */
        ip_signup?: string;
        /**
         * The date and time the subscriber signed up for the list in ISO 8601 format.
         */
        timestamp_signup?: string;
        /**
         * The IP address the subscriber used to confirm their opt-in status.
         */
        ip_opt?: string;
        /**
         * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
         */
        timestamp_opt?: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
         */
        skip_merge_validation?: boolean;
    };
};

export type PatchListsIdMembersIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly id?: string;
    /**
     * Email address for a subscriber.
     */
    email_address?: string;
    /**
     * An identifier for the address across all of Mailchimp.
     */
    readonly unique_email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * The contact's full name.
     */
    readonly full_name?: string;
    /**
     * The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * Type of email this member asked to get ('html' or 'text').
     */
    email_type?: string;
    /**
     * Subscriber's current status.
     */
    status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
    /**
     * A subscriber's reason for unsubscribing.
     */
    unsubscribe_reason?: string;
    /**
     * Indicates whether a contact consents to 1:1 messaging.
     */
    readonly consents_to_one_to_one_messaging?: boolean;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The status of an SMS subscription.
     */
    sms_subscription_status?: 'subscribed' | 'unsubscribed' | 'nonsubscribed' | 'pending';
    /**
     * The datetime when the SMS subscription was last updated
     */
    sms_subscription_last_updated?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * The key of this object's properties is the ID of the interest in question.
     */
    interests?: {
        [key: string]: (boolean);
    };
    /**
     * Open and click rates for this subscriber.
     */
    readonly stats?: {
        /**
         * A subscriber's average open rate.
         */
        readonly avg_open_rate?: number;
        /**
         * A subscriber's average clickthrough rate.
         */
        readonly avg_click_rate?: number;
        /**
         * Ecommerce stats for the list member if the list is attached to a store.
         */
        readonly ecommerce_data?: {
            /**
             * The total revenue the list member has brought in.
             */
            readonly total_revenue?: number;
            /**
             * The total number of orders placed by the list member.
             */
            readonly number_of_orders?: number;
            /**
             * The three-letter ISO 4217 code for the currency that the store accepts.
             */
            readonly currency_code?: string;
        };
    };
    /**
     * IP address the subscriber signed up from.
     */
    readonly ip_signup?: string;
    /**
     * The date and time the subscriber signed up for the list in ISO 8601 format.
     */
    readonly timestamp_signup?: string;
    /**
     * The IP address the subscriber used to confirm their opt-in status.
     */
    readonly ip_opt?: string;
    /**
     * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
     */
    readonly timestamp_opt?: string;
    /**
     * Star rating for this member, between 1 and 5.
     */
    readonly member_rating?: number;
    /**
     * The date and time the member's info was last changed in ISO 8601 format.
     */
    readonly last_changed?: string;
    /**
     * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
     */
    language?: string;
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    vip?: boolean;
    /**
     * The list member's email client.
     */
    readonly email_client?: string;
    /**
     * Subscriber location information.
     */
    location?: {
        /**
         * The location latitude.
         */
        latitude?: number;
        /**
         * The location longitude.
         */
        longitude?: number;
        /**
         * The time difference in hours from GMT.
         */
        readonly gmtoff?: number;
        /**
         * The offset for timezones where daylight saving time is observed.
         */
        readonly dstoff?: number;
        /**
         * The unique code for the location country.
         */
        readonly country_code?: string;
        /**
         * The timezone for the location.
         */
        readonly timezone?: string;
        /**
         * The region for the location.
         */
        readonly region?: string;
    };
    /**
     * The marketing permissions for the subscriber.
     */
    marketing_permissions?: Array<{
        /**
         * The id for the marketing permission on the list
         */
        marketing_permission_id?: string;
        /**
         * The text of the marketing permission.
         */
        text?: string;
        /**
         * If the subscriber has opted-in to the marketing permission.
         */
        enabled?: boolean;
    }>;
    /**
     * The most recent Note added about this member.
     */
    readonly last_note?: {
        /**
         * The note id.
         */
        readonly note_id?: number;
        /**
         * The date and time the note was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The author of the note.
         */
        readonly created_by?: string;
        /**
         * The content of the note.
         */
        readonly note?: string;
    };
    /**
     * The source from which the subscriber was added to this list.
     */
    readonly source?: string;
    /**
     * The number of tags applied to this member.
     */
    readonly tags_count?: number;
    /**
     * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
     */
    tags?: Array<{
        /**
         * The tag id.
         */
        readonly id?: number;
        /**
         * The name of the tag
         */
        readonly name?: string;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdMembersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdMembersIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
};

export type DeleteListsIdMembersIdResponse = (void);

export type DeleteListsIdMembersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersIdActivityData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma seperated list of actions to return.
         */
        action?: Array<string>;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdMembersIdActivityResponse = ({
    /**
     * An array of objects, each representing a member event.
     */
    activity?: Array<{
        /**
         * The type of action recorded for the subscriber.
         */
        action?: string;
        /**
         * The date and time recorded for the action.
         */
        timestamp?: string;
        /**
         * For clicks, the URL the subscriber clicked on.
         */
        url?: string;
        /**
         * The type of campaign that was sent.
         */
        type?: string;
        /**
         * The web-based ID for the campaign.
         */
        campaign_id?: string;
        /**
         * If set, the campaign's title.
         */
        title?: string;
        /**
         * The ID of the parent campaign.
         */
        parent_campaign?: string;
    }>;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersIdActivityError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersIdActivityFeedData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of activity filters that correspond to a set of activity types, e.g "?activity_filters=open,bounce,click".
         */
        activity_filters?: Array<string>;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListsIdMembersIdActivityFeedResponse = ({
    /**
     * An array of objects, each representing a contact event. There are multiple possible types, see the [activity schema documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#activity-schemas).
     */
    readonly activity?: Array<unknown>;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersIdActivityFeedError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListMemberTagsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListMemberTagsResponse = ({
    /**
     * A list of tags assigned to the list member.
     */
    tags?: Array<unknown>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListMemberTagsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListMemberTagsData = {
    body: {
        /**
         * A list of tags assigned to the list member.
         */
        tags: Array<{
            /**
             * The name of the tag.
             */
            name: string;
            /**
             * The status for the tag on the member, pass in active to add a tag or inactive to remove it.
             */
            status: 'inactive' | 'active';
        }>;
        /**
         * When is_syncing is true, automations based on the tags in the request will not fire
         */
        is_syncing?: boolean;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
};

export type PostListMemberTagsResponse = (void);

export type PostListMemberTagsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersIdEventsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetListsIdMembersIdEventsResponse = ({
    /**
     * An array of objects, each representing an event.
     */
    events?: Array<{
        /**
         * The date and time the event occurred in ISO 8601 format.
         */
        readonly occurred_at?: string;
        /**
         * The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length
         */
        name?: string;
        /**
         * An optional list of properties
         */
        properties?: {
            [key: string]: (string);
        };
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersIdEventsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListMemberEventsData = {
    body: {
        /**
         * The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length
         */
        name: string;
        /**
         * An optional list of properties
         */
        properties?: {
            [key: string]: (string);
        };
        /**
         * Events created with the is_syncing value set to `true` will not trigger automations.
         */
        is_syncing?: boolean;
        /**
         * The date and time the event occurred in ISO 8601 format.
         */
        occurred_at?: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
};

export type PostListMemberEventsResponse = (void);

export type PostListMemberEventsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersIdGoalsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdMembersIdGoalsResponse = ({
    /**
     * The last 50 Goal events triggered by a member.
     */
    goals?: Array<{
        /**
         * The id for a Goal event.
         */
        goal_id?: number;
        /**
         * The name/type of Goal event triggered.
         */
        event?: string;
        /**
         * The date and time the user last triggered the Goal event in ISO 8601 format.
         */
        last_visited_at?: string;
        /**
         * Any extra data passed with the Goal event.
         */
        data?: string;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersIdGoalsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersIdNotesData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns notes sorted by the specified field.
         */
        sort_field?: 'created_at' | 'updated_at' | 'note_id';
    };
};

export type GetListsIdMembersIdNotesResponse = ({
    /**
     * An array of objects, each representing a note resource.
     */
    notes?: Array<{
        /**
         * The note id.
         */
        readonly id?: number;
        /**
         * The date and time the note was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The author of the note.
         */
        readonly created_by?: string;
        /**
         * The date and time the note was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * The content of the note.
         */
        note?: string;
        /**
         * The unique id for the list.
         */
        readonly list_id?: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
         */
        readonly contact_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersIdNotesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdMembersIdNotesData = {
    body: {
        /**
         * The content of the note. Note length is limited to 1,000 characters.
         */
        note?: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
};

export type PostListsIdMembersIdNotesResponse = ({
    /**
     * The note id.
     */
    readonly id?: number;
    /**
     * The date and time the note was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The author of the note.
     */
    readonly created_by?: string;
    /**
     * The date and time the note was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The content of the note.
     */
    note?: string;
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdMembersIdNotesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMembersIdNotesIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The id for the note.
         */
        note_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdMembersIdNotesIdResponse = ({
    /**
     * The note id.
     */
    readonly id?: number;
    /**
     * The date and time the note was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The author of the note.
     */
    readonly created_by?: string;
    /**
     * The date and time the note was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The content of the note.
     */
    note?: string;
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMembersIdNotesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdMembersIdNotesIdData = {
    body: {
        /**
         * The content of the note. Note length is limited to 1,000 characters.
         */
        note?: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The id for the note.
         */
        note_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
};

export type PatchListsIdMembersIdNotesIdResponse = ({
    /**
     * The note id.
     */
    readonly id?: number;
    /**
     * The date and time the note was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The author of the note.
     */
    readonly created_by?: string;
    /**
     * The date and time the note was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The content of the note.
     */
    note?: string;
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
     */
    readonly contact_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdMembersIdNotesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdMembersIdNotesIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The id for the note.
         */
        note_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
         */
        subscriber_hash: string;
    };
};

export type DeleteListsIdMembersIdNotesIdResponse = (void);

export type DeleteListsIdMembersIdNotesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdMembersHashActionsDeletePermanentData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
};

export type PostListsIdMembersHashActionsDeletePermanentResponse = (void);

export type PostListsIdMembersHashActionsDeletePermanentError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMergeFieldsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Whether it's a required merge field.
         */
        required?: boolean;
        /**
         * The merge field type.
         */
        type?: string;
    };
};

export type GetListsIdMergeFieldsResponse = ({
    /**
     * An array of objects, each representing a merge field resource.
     */
    merge_fields?: Array<{
        /**
         * An unchanging id for the merge field.
         */
        readonly merge_id?: number;
        /**
         * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
         */
        tag?: string;
        /**
         * The name of the merge field (audience field).
         */
        name?: string;
        /**
         * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
         */
        readonly type?: 'text' | 'number' | 'address' | 'phone' | 'date' | 'url' | 'imageurl' | 'radio' | 'dropdown' | 'birthday' | 'zip';
        /**
         * The boolean value if the merge field is required.
         */
        required?: boolean;
        /**
         * The default value for the merge field if `null`.
         */
        default_value?: string;
        /**
         * Whether the merge field is displayed on the signup form.
         */
        public?: boolean;
        /**
         * The order that the merge field displays on the list signup form.
         */
        display_order?: number;
        /**
         * Extra options for some merge field types.
         */
        options?: {
            /**
             * In an address field, the default country code if none supplied.
             */
            default_country?: number;
            /**
             * In a phone field, the phone number type: US or International.
             */
            phone_format?: string;
            /**
             * In a date or birthday field, the format of the date.
             */
            date_format?: string;
            /**
             * In a radio or dropdown non-group field, the available options for contacts to pick from.
             */
            choices?: Array<(string)>;
            /**
             * In a text field, the default length of the text field.
             */
            readonly size?: number;
        };
        /**
         * Extra text to help the subscriber fill out the form.
         */
        help_text?: string;
        /**
         * The ID that identifies this merge field's audience'.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMergeFieldsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdMergeFieldsData = {
    body: {
        /**
         * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
         */
        tag?: string;
        /**
         * The name of the merge field (audience field).
         */
        name: string;
        /**
         * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
         */
        type: 'text' | 'number' | 'address' | 'phone' | 'date' | 'url' | 'imageurl' | 'radio' | 'dropdown' | 'birthday' | 'zip';
        /**
         * Whether the merge field is required to import a contact.
         */
        required?: boolean;
        /**
         * The default value for the merge field if `null`.
         */
        default_value?: string;
        /**
         * Whether the merge field is displayed on the signup form.
         */
        public?: boolean;
        /**
         * The order that the merge field displays on the list signup form.
         */
        display_order?: number;
        /**
         * Extra options for some merge field types.
         */
        options?: {
            /**
             * In an address field, the default country code if none supplied.
             */
            default_country?: number;
            /**
             * In a phone field, the phone number type: US or International.
             */
            phone_format?: string;
            /**
             * In a date or birthday field, the format of the date.
             */
            date_format?: string;
            /**
             * In a radio or dropdown non-group field, the available options for contacts to pick from.
             */
            choices?: Array<(string)>;
            /**
             * In a text field, the default length of the text field.
             */
            size?: number;
        };
        /**
         * Extra text to help the subscriber fill out the form.
         */
        help_text?: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PostListsIdMergeFieldsResponse = ({
    /**
     * An unchanging id for the merge field.
     */
    readonly merge_id?: number;
    /**
     * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
     */
    tag?: string;
    /**
     * The name of the merge field (audience field).
     */
    name?: string;
    /**
     * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
     */
    readonly type?: 'text' | 'number' | 'address' | 'phone' | 'date' | 'url' | 'imageurl' | 'radio' | 'dropdown' | 'birthday' | 'zip';
    /**
     * The boolean value if the merge field is required.
     */
    required?: boolean;
    /**
     * The default value for the merge field if `null`.
     */
    default_value?: string;
    /**
     * Whether the merge field is displayed on the signup form.
     */
    public?: boolean;
    /**
     * The order that the merge field displays on the list signup form.
     */
    display_order?: number;
    /**
     * Extra options for some merge field types.
     */
    options?: {
        /**
         * In an address field, the default country code if none supplied.
         */
        default_country?: number;
        /**
         * In a phone field, the phone number type: US or International.
         */
        phone_format?: string;
        /**
         * In a date or birthday field, the format of the date.
         */
        date_format?: string;
        /**
         * In a radio or dropdown non-group field, the available options for contacts to pick from.
         */
        choices?: Array<(string)>;
        /**
         * In a text field, the default length of the text field.
         */
        readonly size?: number;
    };
    /**
     * Extra text to help the subscriber fill out the form.
     */
    help_text?: string;
    /**
     * The ID that identifies this merge field's audience'.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdMergeFieldsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdMergeFieldsIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The id for the merge field.
         */
        merge_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdMergeFieldsIdResponse = ({
    /**
     * An unchanging id for the merge field.
     */
    readonly merge_id?: number;
    /**
     * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
     */
    tag?: string;
    /**
     * The name of the merge field (audience field).
     */
    name?: string;
    /**
     * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
     */
    readonly type?: 'text' | 'number' | 'address' | 'phone' | 'date' | 'url' | 'imageurl' | 'radio' | 'dropdown' | 'birthday' | 'zip';
    /**
     * The boolean value if the merge field is required.
     */
    required?: boolean;
    /**
     * The default value for the merge field if `null`.
     */
    default_value?: string;
    /**
     * Whether the merge field is displayed on the signup form.
     */
    public?: boolean;
    /**
     * The order that the merge field displays on the list signup form.
     */
    display_order?: number;
    /**
     * Extra options for some merge field types.
     */
    options?: {
        /**
         * In an address field, the default country code if none supplied.
         */
        default_country?: number;
        /**
         * In a phone field, the phone number type: US or International.
         */
        phone_format?: string;
        /**
         * In a date or birthday field, the format of the date.
         */
        date_format?: string;
        /**
         * In a radio or dropdown non-group field, the available options for contacts to pick from.
         */
        choices?: Array<(string)>;
        /**
         * In a text field, the default length of the text field.
         */
        readonly size?: number;
    };
    /**
     * Extra text to help the subscriber fill out the form.
     */
    help_text?: string;
    /**
     * The ID that identifies this merge field's audience'.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdMergeFieldsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdMergeFieldsIdData = {
    body: {
        /**
         * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
         */
        tag?: string;
        /**
         * The name of the merge field (audience field).
         */
        name: string;
        /**
         * Whether the merge field is required to import a contact.
         */
        required?: boolean;
        /**
         * The default value for the merge field if `null`.
         */
        default_value?: string;
        /**
         * Whether the merge field is displayed on the signup form.
         */
        public?: boolean;
        /**
         * The order that the merge field displays on the list signup form.
         */
        display_order?: number;
        /**
         * Extra options for some merge field types.
         */
        options?: {
            /**
             * In an address field, the default country code if none supplied.
             */
            default_country?: number;
            /**
             * In a phone field, the phone number type: US or International.
             */
            phone_format?: string;
            /**
             * In a date or birthday field, the format of the date.
             */
            date_format?: string;
            /**
             * In a radio or dropdown non-group field, the available options for members to pick from.
             */
            choices?: Array<(string)>;
        };
        /**
         * Extra text to help the subscriber fill out the form.
         */
        help_text?: string;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The id for the merge field.
         */
        merge_id: string;
    };
};

export type PatchListsIdMergeFieldsIdResponse = ({
    /**
     * An unchanging id for the merge field.
     */
    readonly merge_id?: number;
    /**
     * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
     */
    tag?: string;
    /**
     * The name of the merge field (audience field).
     */
    name?: string;
    /**
     * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
     */
    readonly type?: 'text' | 'number' | 'address' | 'phone' | 'date' | 'url' | 'imageurl' | 'radio' | 'dropdown' | 'birthday' | 'zip';
    /**
     * The boolean value if the merge field is required.
     */
    required?: boolean;
    /**
     * The default value for the merge field if `null`.
     */
    default_value?: string;
    /**
     * Whether the merge field is displayed on the signup form.
     */
    public?: boolean;
    /**
     * The order that the merge field displays on the list signup form.
     */
    display_order?: number;
    /**
     * Extra options for some merge field types.
     */
    options?: {
        /**
         * In an address field, the default country code if none supplied.
         */
        default_country?: number;
        /**
         * In a phone field, the phone number type: US or International.
         */
        phone_format?: string;
        /**
         * In a date or birthday field, the format of the date.
         */
        date_format?: string;
        /**
         * In a radio or dropdown non-group field, the available options for contacts to pick from.
         */
        choices?: Array<(string)>;
        /**
         * In a text field, the default length of the text field.
         */
        readonly size?: number;
    };
    /**
     * Extra text to help the subscriber fill out the form.
     */
    help_text?: string;
    /**
     * The ID that identifies this merge field's audience'.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdMergeFieldsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdMergeFieldsIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The id for the merge field.
         */
        merge_id: string;
    };
};

export type DeleteListsIdMergeFieldsIdResponse = (void);

export type DeleteListsIdMergeFieldsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdWebhooksData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type GetListsIdWebhooksResponse = ({
    /**
     * An array of objects, each representing a specific list member.
     */
    webhooks?: Array<{
        /**
         * An string that uniquely identifies this webhook.
         */
        readonly id?: string;
        /**
         * A valid URL for the Webhook.
         */
        readonly url?: string;
        /**
         * The events that can trigger the webhook and whether they are enabled.
         */
        readonly events?: {
            /**
             * Whether the webhook is triggered when a list subscriber is added.
             */
            subscribe?: boolean;
            /**
             * Whether the webhook is triggered when a list member unsubscribes.
             */
            unsubscribe?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's profile is updated.
             */
            profile?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's email address is cleaned from the list.
             */
            cleaned?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's email address is changed.
             */
            upemail?: boolean;
            /**
             * Whether the webhook is triggered when a campaign is sent or cancelled.
             */
            campaign?: boolean;
        };
        /**
         * The possible sources of any events that can trigger the webhook and whether they are enabled.
         */
        readonly sources?: {
            /**
             * Whether the webhook is triggered by subscriber-initiated actions.
             */
            user?: boolean;
            /**
             * Whether the webhook is triggered by admin-initiated actions in the web interface.
             */
            admin?: boolean;
            /**
             * Whether the webhook is triggered by actions initiated via the API.
             */
            api?: boolean;
        };
        /**
         * The unique id for the list.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The list id.
     */
    list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdWebhooksError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdWebhooksData = {
    body: {
        /**
         * A valid URL for the Webhook.
         */
        url?: string;
        /**
         * The events that can trigger the webhook and whether they are enabled.
         */
        events?: {
            /**
             * Whether the webhook is triggered when a list subscriber is added.
             */
            subscribe?: boolean;
            /**
             * Whether the webhook is triggered when a list member unsubscribes.
             */
            unsubscribe?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's profile is updated.
             */
            profile?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's email address is cleaned from the list.
             */
            cleaned?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's email address is changed.
             */
            upemail?: boolean;
            /**
             * Whether the webhook is triggered when a campaign is sent or cancelled.
             */
            campaign?: boolean;
        };
        /**
         * The possible sources of any events that can trigger the webhook and whether they are enabled.
         */
        sources?: {
            /**
             * Whether the webhook is triggered by subscriber-initiated actions.
             */
            user?: boolean;
            /**
             * Whether the webhook is triggered by admin-initiated actions in the web interface.
             */
            admin?: boolean;
            /**
             * Whether the webhook is triggered by actions initiated via the API.
             */
            api?: boolean;
        };
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PostListsIdWebhooksResponse = ({
    /**
     * An string that uniquely identifies this webhook.
     */
    readonly id?: string;
    /**
     * A valid URL for the Webhook.
     */
    readonly url?: string;
    /**
     * The events that can trigger the webhook and whether they are enabled.
     */
    readonly events?: {
        /**
         * Whether the webhook is triggered when a list subscriber is added.
         */
        subscribe?: boolean;
        /**
         * Whether the webhook is triggered when a list member unsubscribes.
         */
        unsubscribe?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's profile is updated.
         */
        profile?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's email address is cleaned from the list.
         */
        cleaned?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's email address is changed.
         */
        upemail?: boolean;
        /**
         * Whether the webhook is triggered when a campaign is sent or cancelled.
         */
        campaign?: boolean;
    };
    /**
     * The possible sources of any events that can trigger the webhook and whether they are enabled.
     */
    readonly sources?: {
        /**
         * Whether the webhook is triggered by subscriber-initiated actions.
         */
        user?: boolean;
        /**
         * Whether the webhook is triggered by admin-initiated actions in the web interface.
         */
        admin?: boolean;
        /**
         * Whether the webhook is triggered by actions initiated via the API.
         */
        api?: boolean;
    };
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdWebhooksError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdWebhooksIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The webhook's id.
         */
        webhook_id: string;
    };
};

export type GetListsIdWebhooksIdResponse = ({
    /**
     * An string that uniquely identifies this webhook.
     */
    readonly id?: string;
    /**
     * A valid URL for the Webhook.
     */
    readonly url?: string;
    /**
     * The events that can trigger the webhook and whether they are enabled.
     */
    readonly events?: {
        /**
         * Whether the webhook is triggered when a list subscriber is added.
         */
        subscribe?: boolean;
        /**
         * Whether the webhook is triggered when a list member unsubscribes.
         */
        unsubscribe?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's profile is updated.
         */
        profile?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's email address is cleaned from the list.
         */
        cleaned?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's email address is changed.
         */
        upemail?: boolean;
        /**
         * Whether the webhook is triggered when a campaign is sent or cancelled.
         */
        campaign?: boolean;
    };
    /**
     * The possible sources of any events that can trigger the webhook and whether they are enabled.
     */
    readonly sources?: {
        /**
         * Whether the webhook is triggered by subscriber-initiated actions.
         */
        user?: boolean;
        /**
         * Whether the webhook is triggered by admin-initiated actions in the web interface.
         */
        admin?: boolean;
        /**
         * Whether the webhook is triggered by actions initiated via the API.
         */
        api?: boolean;
    };
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdWebhooksIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteListsIdWebhooksIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The webhook's id.
         */
        webhook_id: string;
    };
};

export type DeleteListsIdWebhooksIdResponse = (void);

export type DeleteListsIdWebhooksIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchListsIdWebhooksIdData = {
    body: {
        /**
         * A valid URL for the Webhook.
         */
        url?: string;
        /**
         * The events that can trigger the webhook and whether they are enabled.
         */
        events?: {
            /**
             * Whether the webhook is triggered when a list subscriber is added.
             */
            subscribe?: boolean;
            /**
             * Whether the webhook is triggered when a list member unsubscribes.
             */
            unsubscribe?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's profile is updated.
             */
            profile?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's email address is cleaned from the list.
             */
            cleaned?: boolean;
            /**
             * Whether the webhook is triggered when a subscriber's email address is changed.
             */
            upemail?: boolean;
            /**
             * Whether the webhook is triggered when a campaign is sent or cancelled.
             */
            campaign?: boolean;
        };
        /**
         * The possible sources of any events that can trigger the webhook and whether they are enabled.
         */
        sources?: {
            /**
             * Whether the webhook is triggered by subscriber-initiated actions.
             */
            user?: boolean;
            /**
             * Whether the webhook is triggered by admin-initiated actions in the web interface.
             */
            admin?: boolean;
            /**
             * Whether the webhook is triggered by actions initiated via the API.
             */
            api?: boolean;
        };
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The webhook's id.
         */
        webhook_id: string;
    };
};

export type PatchListsIdWebhooksIdResponse = ({
    /**
     * An string that uniquely identifies this webhook.
     */
    readonly id?: string;
    /**
     * A valid URL for the Webhook.
     */
    readonly url?: string;
    /**
     * The events that can trigger the webhook and whether they are enabled.
     */
    readonly events?: {
        /**
         * Whether the webhook is triggered when a list subscriber is added.
         */
        subscribe?: boolean;
        /**
         * Whether the webhook is triggered when a list member unsubscribes.
         */
        unsubscribe?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's profile is updated.
         */
        profile?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's email address is cleaned from the list.
         */
        cleaned?: boolean;
        /**
         * Whether the webhook is triggered when a subscriber's email address is changed.
         */
        upemail?: boolean;
        /**
         * Whether the webhook is triggered when a campaign is sent or cancelled.
         */
        campaign?: boolean;
    };
    /**
     * The possible sources of any events that can trigger the webhook and whether they are enabled.
     */
    readonly sources?: {
        /**
         * Whether the webhook is triggered by subscriber-initiated actions.
         */
        user?: boolean;
        /**
         * Whether the webhook is triggered by admin-initiated actions in the web interface.
         */
        admin?: boolean;
        /**
         * Whether the webhook is triggered by actions initiated via the API.
         */
        api?: boolean;
    };
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchListsIdWebhooksIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdSignupFormsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type GetListsIdSignupFormsResponse = ({
    /**
     * List signup form.
     */
    signup_forms?: Array<{
        /**
         * Options for customizing your signup form header.
         */
        header?: {
            /**
             * Header image URL.
             */
            image_url?: string;
            /**
             * Header text.
             */
            text?: string;
            /**
             * Image width, in pixels.
             */
            image_width?: string;
            /**
             * Image height, in pixels.
             */
            image_height?: string;
            /**
             * Alt text for the image.
             */
            image_alt?: string;
            /**
             * The URL that the header image will link to.
             */
            image_link?: string;
            /**
             * Image alignment.
             */
            image_align?: 'none' | 'left' | 'center' | 'right';
            /**
             * Image border width.
             */
            image_border_width?: string;
            /**
             * Image border style.
             */
            image_border_style?: 'none' | 'solid' | 'dotted' | 'dashed' | 'double' | 'groove' | 'outset' | 'inset' | 'ridge';
            /**
             * Image border color.
             */
            image_border_color?: string;
            /**
             * Image link target.
             */
            image_target?: '_blank' | 'null';
        };
        /**
         * The signup form body content.
         */
        contents?: Array<{
            /**
             * The content section name.
             */
            section?: 'signup_message' | 'unsub_message' | 'signup_thank_you_title';
            /**
             * The content section text.
             */
            value?: string;
        }>;
        /**
         * An array of objects, each representing an element style for the signup form.
         */
        styles?: Array<{
            /**
             * A string that identifies the element selector.
             */
            selector?: 'page_background' | 'page_header' | 'page_outer_wrapper' | 'body_background' | 'body_link_style' | 'forms_buttons' | 'forms_buttons_hovered' | 'forms_field_label' | 'forms_field_text' | 'forms_required' | 'forms_required_legend' | 'forms_help_text' | 'forms_errors' | 'monkey_rewards_badge';
            /**
             * A collection of options for a selector.
             */
            options?: Array<{
                /**
                 * A string that identifies the property.
                 */
                property?: string;
                /**
                 * A string that identifies value of the property.
                 */
                value?: string;
            }>;
        }>;
        /**
         * Signup form URL.
         */
        signup_form_url?: string;
        /**
         * The signup form's list id.
         */
        readonly list_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The list id.
     */
    list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdSignupFormsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdSignupFormsData = {
    body: {
        /**
         * Options for customizing your signup form header.
         */
        header?: {
            /**
             * Header image URL.
             */
            image_url?: string;
            /**
             * Header text.
             */
            text?: string;
            /**
             * Image width, in pixels.
             */
            image_width?: string;
            /**
             * Image height, in pixels.
             */
            image_height?: string;
            /**
             * Alt text for the image.
             */
            image_alt?: string;
            /**
             * The URL that the header image will link to.
             */
            image_link?: string;
            /**
             * Image alignment.
             */
            image_align?: 'none' | 'left' | 'center' | 'right';
            /**
             * Image border width.
             */
            image_border_width?: string;
            /**
             * Image border style.
             */
            image_border_style?: 'none' | 'solid' | 'dotted' | 'dashed' | 'double' | 'groove' | 'outset' | 'inset' | 'ridge';
            /**
             * Image border color.
             */
            image_border_color?: string;
            /**
             * Image link target.
             */
            image_target?: '_blank' | 'null';
        };
        /**
         * The signup form body content.
         */
        contents?: Array<{
            /**
             * The content section name.
             */
            section?: 'signup_message' | 'unsub_message' | 'signup_thank_you_title';
            /**
             * The content section text.
             */
            value?: string;
        }>;
        /**
         * An array of objects, each representing an element style for the signup form.
         */
        styles?: Array<{
            /**
             * A string that identifies the element selector.
             */
            selector?: 'page_background' | 'page_header' | 'page_outer_wrapper' | 'body_background' | 'body_link_style' | 'forms_buttons' | 'forms_buttons_hovered' | 'forms_field_label' | 'forms_field_text' | 'forms_required' | 'forms_required_legend' | 'forms_help_text' | 'forms_errors' | 'monkey_rewards_badge';
            /**
             * A collection of options for a selector.
             */
            options?: Array<{
                /**
                 * A string that identifies the property.
                 */
                property?: string;
                /**
                 * A string that identifies value of the property.
                 */
                value?: string;
            }>;
        }>;
    };
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type PostListsIdSignupFormsResponse = ({
    /**
     * Options for customizing your signup form header.
     */
    header?: {
        /**
         * Header image URL.
         */
        image_url?: string;
        /**
         * Header text.
         */
        text?: string;
        /**
         * Image width, in pixels.
         */
        image_width?: string;
        /**
         * Image height, in pixels.
         */
        image_height?: string;
        /**
         * Alt text for the image.
         */
        image_alt?: string;
        /**
         * The URL that the header image will link to.
         */
        image_link?: string;
        /**
         * Image alignment.
         */
        image_align?: 'none' | 'left' | 'center' | 'right';
        /**
         * Image border width.
         */
        image_border_width?: string;
        /**
         * Image border style.
         */
        image_border_style?: 'none' | 'solid' | 'dotted' | 'dashed' | 'double' | 'groove' | 'outset' | 'inset' | 'ridge';
        /**
         * Image border color.
         */
        image_border_color?: string;
        /**
         * Image link target.
         */
        image_target?: '_blank' | 'null';
    };
    /**
     * The signup form body content.
     */
    contents?: Array<{
        /**
         * The content section name.
         */
        section?: 'signup_message' | 'unsub_message' | 'signup_thank_you_title';
        /**
         * The content section text.
         */
        value?: string;
    }>;
    /**
     * An array of objects, each representing an element style for the signup form.
     */
    styles?: Array<{
        /**
         * A string that identifies the element selector.
         */
        selector?: 'page_background' | 'page_header' | 'page_outer_wrapper' | 'body_background' | 'body_link_style' | 'forms_buttons' | 'forms_buttons_hovered' | 'forms_field_label' | 'forms_field_text' | 'forms_required' | 'forms_required_legend' | 'forms_help_text' | 'forms_errors' | 'monkey_rewards_badge';
        /**
         * A collection of options for a selector.
         */
        options?: Array<{
            /**
             * A string that identifies the property.
             */
            property?: string;
            /**
             * A string that identifies value of the property.
             */
            value?: string;
        }>;
    }>;
    /**
     * Signup form URL.
     */
    signup_form_url?: string;
    /**
     * The signup form's list id.
     */
    readonly list_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdSignupFormsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdLocationsData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetListsIdLocationsResponse = ({
    /**
     * An array of objects, each representing a list's top subscriber locations.
     */
    locations?: Array<{
        /**
         * The name of the country.
         */
        readonly country?: string;
        /**
         * The ISO 3166 2 digit country code.
         */
        readonly cc?: string;
        /**
         * The percent of subscribers in the country.
         */
        readonly percent?: number;
        /**
         * The total number of subscribers in the country.
         */
        readonly total?: number;
    }>;
    /**
     * The unique id for the list.
     */
    list_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetListsIdLocationsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdSurveysData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
    };
};

export type GetListsIdSurveysResponse = (unknown);

export type GetListsIdSurveysError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetListsIdSurveysIdData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
};

export type GetListsIdSurveysIdResponse = (unknown);

export type GetListsIdSurveysIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdSurveysIdActionsPublishData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
};

export type PostListsIdSurveysIdActionsPublishResponse = (unknown);

export type PostListsIdSurveysIdActionsPublishError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdSurveysIdActionsUnpublishData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
};

export type PostListsIdSurveysIdActionsUnpublishResponse = (unknown);

export type PostListsIdSurveysIdActionsUnpublishError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostListsIdSurveysIdActionsCreateEmailData = {
    path: {
        /**
         * The unique ID for the list.
         */
        list_id: string;
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
};

export type PostListsIdSurveysIdActionsCreateEmailResponse = ({
    /**
     * A string that uniquely identifies this campaign.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
     */
    readonly parent_campaign_id?: string;
    /**
     * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
     */
    type: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    /**
     * The date and time the campaign was created in ISO 8601 format.
     */
    readonly create_time?: string;
    /**
     * The link to the campaign's archive version.
     */
    readonly archive_url?: string;
    /**
     * The original link to the campaign's archive version.
     */
    readonly long_archive_url?: string;
    /**
     * The current status of the campaign.
     */
    readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
    /**
     * The total number of emails sent for this campaign.
     */
    readonly emails_sent?: number;
    /**
     * The date and time a campaign was sent in ISO 8601 format.
     */
    readonly send_time?: string;
    /**
     * How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url').
     */
    readonly content_type?: string;
    /**
     * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
     */
    readonly needs_block_refresh?: boolean;
    /**
     * Determines if the campaign qualifies to be resent to non-openers.
     */
    readonly resendable?: boolean;
    /**
     * List settings for the campaign.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id: string;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The settings for your campaign, including subject, from name, reply-to address, and more.
     */
    settings?: {
        /**
         * The subject line for the campaign.
         */
        subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The title of the campaign.
         */
        title?: string;
        /**
         * The 'from' name on the campaign (not an email address).
         */
        from_name?: string;
        /**
         * The reply-to email address for the campaign.
         */
        reply_to?: string;
        /**
         * Use Mailchimp Conversation feature to manage replies.
         */
        use_conversation?: boolean;
        /**
         * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
         */
        to_name?: string;
        /**
         * If the campaign is listed in a folder, the id for that folder.
         */
        folder_id?: string;
        /**
         * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
         */
        authenticate?: boolean;
        /**
         * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
         */
        auto_footer?: boolean;
        /**
         * Automatically inline the CSS included with the campaign content.
         */
        inline_css?: boolean;
        /**
         * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
         */
        auto_tweet?: boolean;
        /**
         * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
         */
        auto_fb_post?: Array<(string)>;
        /**
         * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
         */
        fb_comments?: boolean;
        /**
         * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
         */
        readonly timewarp?: boolean;
        /**
         * The id for the template used in this campaign.
         */
        readonly template_id?: number;
        /**
         * Whether the campaign uses the drag-and-drop editor.
         */
        readonly drag_and_drop?: boolean;
    };
    /**
     * The settings specific to A/B test campaigns.
     */
    variate_settings?: {
        /**
         * ID for the winning combination.
         */
        readonly winning_combination_id?: string;
        /**
         * ID of the campaign that was sent to the remaining recipients based on the winning combination.
         */
        readonly winning_campaign_id?: string;
        /**
         * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
         */
        winner_criteria: 'opens' | 'clicks' | 'manual' | 'total_revenue';
        /**
         * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
         */
        wait_time?: number;
        /**
         * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
         */
        test_size?: number;
        /**
         * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
         */
        subject_lines?: Array<(string)>;
        /**
         * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
         */
        send_times?: Array<(string)>;
        /**
         * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
         */
        from_names?: Array<(string)>;
        /**
         * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
         */
        reply_to_addresses?: Array<(string)>;
        /**
         * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
         */
        readonly contents?: Array<(string)>;
        /**
         * Combinations of possible variables used to build emails.
         */
        readonly combinations?: Array<{
            /**
             * Unique ID for the combination.
             */
            id?: string;
            /**
             * The index of `variate_settings.subject_lines` used.
             */
            subject_line?: number;
            /**
             * The index of `variate_settings.send_times` used.
             */
            send_time?: number;
            /**
             * The index of `variate_settings.from_names` used.
             */
            from_name?: number;
            /**
             * The index of `variate_settings.reply_to_addresses` used.
             */
            reply_to?: number;
            /**
             * The index of `variate_settings.contents` used.
             */
            content_description?: number;
            /**
             * The number of recipients for this combination.
             */
            recipients?: number;
        }>;
    };
    /**
     * The tracking options for a campaign.
     */
    tracking?: {
        /**
         * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        opens?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        html_clicks?: boolean;
        /**
         * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
         */
        text_clicks?: boolean;
        /**
         * Deprecated
         */
        goal_tracking?: boolean;
        /**
         * Whether to enable e-commerce tracking.
         */
        ecomm360?: boolean;
        /**
         * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
         */
        google_analytics?: string;
        /**
         * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
         */
        clicktale?: string;
        /**
         * Deprecated
         */
        salesforce?: {
            /**
             * Create a campaign in a connected Salesforce account.
             */
            campaign?: boolean;
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
        /**
         * Deprecated
         */
        capsule?: {
            /**
             * Update contact notes for a campaign based on subscriber email addresses.
             */
            notes?: boolean;
        };
    };
    /**
     * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
     */
    rss_opts?: {
        /**
         * The URL for the RSS feed.
         */
        feed_url: string;
        /**
         * The frequency of the RSS Campaign.
         */
        frequency: 'daily' | 'weekly' | 'monthly';
        /**
         * The schedule for sending the RSS Campaign.
         */
        schedule?: {
            /**
             * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
             */
            hour?: number;
            /**
             * The days of the week to send a daily RSS Campaign.
             */
            daily_send?: {
                /**
                 * Sends the daily RSS Campaign on Sundays.
                 */
                sunday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Mondays.
                 */
                monday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Tuesdays.
                 */
                tuesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Wednesdays.
                 */
                wednesday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Thursdays.
                 */
                thursday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Fridays.
                 */
                friday?: boolean;
                /**
                 * Sends the daily RSS Campaign on Saturdays.
                 */
                saturday?: boolean;
            };
            /**
             * The day of the week to send a weekly RSS Campaign.
             */
            weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
            /**
             * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
             */
            monthly_send_date?: number;
        };
        /**
         * The date the campaign was last sent.
         */
        readonly last_sent?: string;
        /**
         * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
         */
        constrain_rss_img?: boolean;
    };
    /**
     * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
     */
    readonly ab_split_opts?: {
        /**
         * The type of AB split to run.
         */
        split_test?: 'subject' | 'from_name' | 'schedule';
        /**
         * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
         */
        pick_winner?: 'opens' | 'clicks' | 'manual';
        /**
         * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
         */
        wait_units?: 'hours' | 'days';
        /**
         * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
         */
        wait_time?: number;
        /**
         * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
         */
        split_size?: number;
        /**
         * For campaigns split on 'From Name', the name for Group A.
         */
        from_name_a?: string;
        /**
         * For campaigns split on 'From Name', the name for Group B.
         */
        from_name_b?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group A.
         */
        reply_email_a?: string;
        /**
         * For campaigns split on 'From Name', the reply-to address for Group B.
         */
        reply_email_b?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group A.
         */
        subject_a?: string;
        /**
         * For campaigns split on 'Subject Line', the subject line for Group B.
         */
        subject_b?: string;
        /**
         * The send time for Group A.
         */
        send_time_a?: string;
        /**
         * The send time for Group B.
         */
        send_time_b?: string;
        /**
         * The send time for the winning version.
         */
        send_time_winner?: string;
    };
    /**
     * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
     */
    social_card?: {
        /**
         * The url for the header image for the card.
         */
        image_url?: string;
        /**
         * A short summary of the campaign to display.
         */
        description?: string;
        /**
         * The title for the card. Typically the subject line of the campaign.
         */
        title?: string;
    };
    /**
     * For sent campaigns, a summary of opens and clicks.
     */
    report_summary?: {
        /**
         * The total number of opens for a campaign.
         */
        readonly opens?: number;
        /**
         * The number of unique opens.
         */
        readonly unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        readonly open_rate?: number;
        /**
         * The total number of clicks for an campaign.
         */
        readonly clicks?: number;
        /**
         * The number of unique clicks.
         */
        readonly subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        readonly click_rate?: number;
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
        };
    };
    /**
     * Updates on campaigns in the process of sending.
     */
    delivery_status?: {
        /**
         * Whether Campaign Delivery Status is enabled for this account and campaign.
         */
        readonly enabled?: boolean;
        /**
         * Whether a campaign send can be canceled.
         */
        readonly can_cancel?: boolean;
        /**
         * The current state of a campaign delivery.
         */
        readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
        /**
         * The total number of emails confirmed sent for this campaign so far.
         */
        readonly emails_sent?: number;
        /**
         * The total number of emails canceled for this campaign.
         */
        readonly emails_canceled?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostListsIdSurveysIdActionsCreateEmailError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAllLandingPagesData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'created_at' | 'updated_at';
    };
};

export type GetAllLandingPagesResponse = ({
    /**
     * The landing pages on the account
     */
    landing_pages?: Array<{
        /**
         * A string that uniquely identifies this landing page.
         */
        readonly id?: string;
        /**
         * The name of this landing page.
         */
        name?: string;
        /**
         * The title of this landing page seen in the browser's title bar.
         */
        title?: string;
        /**
         * The description of this landing page.
         */
        description?: string;
        /**
         * The template_id of this landing page.
         */
        readonly template_id?: number;
        /**
         * The status of this landing page.
         */
        readonly status?: 'published' | 'unpublished' | 'draft';
        /**
         * The list's ID associated with this landing page.
         */
        list_id?: string;
        /**
         * The ID of the store associated with this landing page.
         */
        store_id?: string;
        /**
         * The ID used in the Mailchimp web application.
         */
        web_id?: number;
        /**
         * Created by mobile or web
         */
        readonly created_by_source?: string;
        /**
         * The url of the published landing page.
         */
        readonly url?: string;
        /**
         * The time this landing page was created.
         */
        readonly created_at?: string;
        /**
         * The time this landing page was published.
         */
        readonly published_at?: string;
        /**
         * The time this landing page was unpublished.
         */
        readonly unpublished_at?: string;
        /**
         * The time this landing page was updated at.
         */
        readonly updated_at?: string;
        /**
         * The tracking settings applied to this landing page.
         */
        tracking?: {
            /**
             * Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
             */
            track_with_mailchimp?: boolean;
            /**
             * Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
             */
            enable_restricted_data_processing?: boolean;
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAllLandingPagesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostAllLandingPagesData = {
    body: {
        /**
         * The name of this landing page.
         */
        name?: string;
        /**
         * The title of this landing page seen in the browser's title bar.
         */
        title?: string;
        /**
         * The description of this landing page.
         */
        description?: string;
        /**
         * The ID of the store associated with this landing page.
         */
        store_id?: string;
        /**
         * The list's ID associated with this landing page.
         */
        list_id?: string;
        /**
         * The type of template the landing page has.
         */
        type?: 'signup' | 'product';
        /**
         * The template_id of this landing page.
         */
        template_id?: number;
        /**
         * The tracking settings applied to this landing page.
         */
        tracking?: {
            /**
             * Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
             */
            track_with_mailchimp?: boolean;
            /**
             * Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
             */
            enable_restricted_data_processing?: boolean;
        };
    };
    query?: {
        /**
         * Will create the Landing Page using the account's Default List instead of requiring a list_id.
         */
        use_default_list?: boolean;
    };
};

export type PostAllLandingPagesResponse = ({
    /**
     * A string that uniquely identifies this landing page.
     */
    readonly id?: string;
    /**
     * The name of this landing page.
     */
    name?: string;
    /**
     * The title of this landing page seen in the browser's title bar.
     */
    title?: string;
    /**
     * The description of this landing page.
     */
    description?: string;
    /**
     * The template_id of this landing page.
     */
    readonly template_id?: number;
    /**
     * The status of this landing page.
     */
    readonly status?: 'published' | 'unpublished' | 'draft';
    /**
     * The list's ID associated with this landing page.
     */
    list_id?: string;
    /**
     * The ID of the store associated with this landing page.
     */
    store_id?: string;
    /**
     * The ID used in the Mailchimp web application.
     */
    web_id?: number;
    /**
     * Created by mobile or web
     */
    readonly created_by_source?: string;
    /**
     * The url of the published landing page.
     */
    readonly url?: string;
    /**
     * The time this landing page was created.
     */
    readonly created_at?: string;
    /**
     * The time this landing page was published.
     */
    readonly published_at?: string;
    /**
     * The time this landing page was unpublished.
     */
    readonly unpublished_at?: string;
    /**
     * The time this landing page was updated at.
     */
    readonly updated_at?: string;
    /**
     * The tracking settings applied to this landing page.
     */
    tracking?: {
        /**
         * Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
         */
        track_with_mailchimp?: boolean;
        /**
         * Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
         */
        enable_restricted_data_processing?: boolean;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostAllLandingPagesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetLandingPageIdData = {
    path: {
        /**
         * The unique id for the page.
         */
        page_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetLandingPageIdResponse = ({
    /**
     * A string that uniquely identifies this landing page.
     */
    readonly id?: string;
    /**
     * The name of this landing page.
     */
    name?: string;
    /**
     * The title of this landing page seen in the browser's title bar.
     */
    title?: string;
    /**
     * The description of this landing page.
     */
    description?: string;
    /**
     * The template_id of this landing page.
     */
    readonly template_id?: number;
    /**
     * The status of this landing page.
     */
    readonly status?: 'published' | 'unpublished' | 'draft';
    /**
     * The list's ID associated with this landing page.
     */
    list_id?: string;
    /**
     * The ID of the store associated with this landing page.
     */
    store_id?: string;
    /**
     * The ID used in the Mailchimp web application.
     */
    web_id?: number;
    /**
     * Created by mobile or web
     */
    readonly created_by_source?: string;
    /**
     * The url of the published landing page.
     */
    readonly url?: string;
    /**
     * The time this landing page was created.
     */
    readonly created_at?: string;
    /**
     * The time this landing page was published.
     */
    readonly published_at?: string;
    /**
     * The time this landing page was unpublished.
     */
    readonly unpublished_at?: string;
    /**
     * The time this landing page was updated at.
     */
    readonly updated_at?: string;
    /**
     * The tracking settings applied to this landing page.
     */
    tracking?: {
        /**
         * Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
         */
        track_with_mailchimp?: boolean;
        /**
         * Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
         */
        enable_restricted_data_processing?: boolean;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetLandingPageIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchLandingPageIdData = {
    body: {
        /**
         * The name of this landing page.
         */
        name?: string;
        /**
         * The title of this landing page seen in the browser's title bar.
         */
        title?: string;
        /**
         * The description of this landing page.
         */
        description?: string;
        /**
         * The ID of the store associated with this landing page.
         */
        store_id?: string;
        /**
         * The list's ID associated with this landing page.
         */
        list_id?: string;
        /**
         * The tracking settings applied to this landing page.
         */
        tracking?: {
            /**
             * Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
             */
            track_with_mailchimp?: boolean;
            /**
             * Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
             */
            enable_restricted_data_processing?: boolean;
        };
    };
    path: {
        /**
         * The unique id for the page.
         */
        page_id: string;
    };
};

export type PatchLandingPageIdResponse = ({
    /**
     * A string that uniquely identifies this landing page.
     */
    readonly id?: string;
    /**
     * The name of this landing page.
     */
    name?: string;
    /**
     * The title of this landing page seen in the browser's title bar.
     */
    title?: string;
    /**
     * The description of this landing page.
     */
    description?: string;
    /**
     * The template_id of this landing page.
     */
    readonly template_id?: number;
    /**
     * The status of this landing page.
     */
    readonly status?: 'published' | 'unpublished' | 'draft';
    /**
     * The list's ID associated with this landing page.
     */
    list_id?: string;
    /**
     * The ID of the store associated with this landing page.
     */
    store_id?: string;
    /**
     * The ID used in the Mailchimp web application.
     */
    web_id?: number;
    /**
     * Created by mobile or web
     */
    readonly created_by_source?: string;
    /**
     * The url of the published landing page.
     */
    readonly url?: string;
    /**
     * The time this landing page was created.
     */
    readonly created_at?: string;
    /**
     * The time this landing page was published.
     */
    readonly published_at?: string;
    /**
     * The time this landing page was unpublished.
     */
    readonly unpublished_at?: string;
    /**
     * The time this landing page was updated at.
     */
    readonly updated_at?: string;
    /**
     * The tracking settings applied to this landing page.
     */
    tracking?: {
        /**
         * Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
         */
        track_with_mailchimp?: boolean;
        /**
         * Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
         */
        enable_restricted_data_processing?: boolean;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchLandingPageIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteLandingPageIdData = {
    path: {
        /**
         * The unique id for the page.
         */
        page_id: string;
    };
};

export type DeleteLandingPageIdResponse = (void);

export type DeleteLandingPageIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostLandingPageIdActionsPublishData = {
    path: {
        /**
         * The unique id for the page.
         */
        page_id: string;
    };
};

export type PostLandingPageIdActionsPublishResponse = (void);

export type PostLandingPageIdActionsPublishError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostLandingPageIdActionsUnpublishData = {
    path: {
        /**
         * The unique id for the page.
         */
        page_id: string;
    };
};

export type PostLandingPageIdActionsUnpublishResponse = (void);

export type PostLandingPageIdActionsUnpublishError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetLandingPageIdContentData = {
    path: {
        /**
         * The unique id for the page.
         */
        page_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetLandingPageIdContentResponse = ({
    /**
     * The raw HTML for the landing page.
     */
    html?: string;
    /**
     * The JSON Structure for the landing page
     */
    json?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetLandingPageIdContentError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsData = {
    query?: {
        /**
         * Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_send_time?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_send_time?: string;
        /**
         * The campaign type.
         */
        type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
    };
};

export type GetReportsResponse = ({
    /**
     * An array of objects, each representing a report resource.
     */
    reports?: Array<{
        /**
         * A string that uniquely identifies this campaign.
         */
        id?: string;
        /**
         * The title of the campaign.
         */
        readonly campaign_title?: string;
        /**
         * The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto).
         */
        type?: string;
        /**
         * The unique list id.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * The subject line for the campaign.
         */
        readonly subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The total number of emails sent for this campaign.
         */
        emails_sent?: number;
        /**
         * The number of abuse reports generated for this campaign.
         */
        abuse_reports?: number;
        /**
         * The total number of unsubscribed members for this campaign.
         */
        readonly unsubscribed?: number;
        /**
         * The date and time a campaign was sent in ISO 8601 format.
         */
        readonly send_time?: string;
        /**
         * For RSS campaigns, the date and time of the last send in ISO 8601 format.
         */
        readonly rss_last_send?: string;
        /**
         * An object describing the bounce summary for the campaign.
         */
        bounces?: {
            /**
             * The total number of hard bounced email addresses.
             */
            hard_bounces?: number;
            /**
             * The total number of soft bounced email addresses.
             */
            soft_bounces?: number;
            /**
             * The total number of addresses that were syntax-related bounces.
             */
            syntax_errors?: number;
        };
        /**
         * An object describing the forwards and forward activity for the campaign.
         */
        forwards?: {
            /**
             * How many times the campaign has been forwarded.
             */
            forwards_count?: number;
            /**
             * How many times the forwarded campaign has been opened.
             */
            forwards_opens?: number;
        };
        /**
         * An object describing the open activity for the campaign.
         */
        opens?: {
            /**
             * The total number of opens for a campaign.
             */
            opens_total?: number;
            /**
             * The total number of unique opens.
             */
            unique_opens?: number;
            /**
             * The number of unique opens divided by the total number of successful deliveries.
             */
            open_rate?: number;
            /**
             * The date and time of the last recorded open in ISO 8601 format.
             */
            last_open?: string;
        };
        /**
         * An object describing the click activity for the campaign.
         */
        clicks?: {
            /**
             * The total number of clicks for the campaign.
             */
            clicks_total?: number;
            /**
             * The total number of unique clicks for links across a campaign.
             */
            unique_clicks?: number;
            /**
             * The total number of subscribers who clicked on a campaign.
             */
            unique_subscriber_clicks?: number;
            /**
             * The number of unique clicks divided by the total number of successful deliveries.
             */
            click_rate?: number;
            /**
             * The date and time of the last recorded click for the campaign in ISO 8601 format.
             */
            last_click?: string;
        };
        /**
         * An object describing campaign engagement on Facebook.
         */
        facebook_likes?: {
            /**
             * The number of recipients who liked the campaign on Facebook.
             */
            recipient_likes?: number;
            /**
             * The number of unique likes.
             */
            unique_likes?: number;
            /**
             * The number of Facebook likes for the campaign.
             */
            facebook_likes?: number;
        };
        /**
         * The average campaign statistics for your industry.
         */
        industry_stats?: {
            /**
             * The type of business industry associated with your account. For example: retail, education, etc.
             */
            type?: string;
            /**
             * The industry open rate.
             */
            open_rate?: number;
            /**
             * The industry click rate.
             */
            click_rate?: number;
            /**
             * The industry bounce rate.
             */
            bounce_rate?: number;
            /**
             * The industry unopened rate.
             */
            unopen_rate?: number;
            /**
             * The industry unsubscribe rate.
             */
            unsub_rate?: number;
            /**
             * The industry abuse rate.
             */
            abuse_rate?: number;
        };
        /**
         * The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list.
         */
        list_stats?: {
            /**
             * The average number of subscriptions per month for the list.
             */
            readonly sub_rate?: number;
            /**
             * The average number of unsubscriptions per month for the list.
             */
            readonly unsub_rate?: number;
            /**
             * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list.
             */
            readonly open_rate?: number;
            /**
             * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list.
             */
            readonly click_rate?: number;
        };
        /**
         * General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns.
         */
        ab_split?: {
            /**
             * Stats for Campaign A.
             */
            a?: {
                /**
                 * Bounces for Campaign A.
                 */
                bounces?: number;
                /**
                 * Abuse reports for Campaign A.
                 */
                abuse_reports?: number;
                /**
                 * Unsubscribes for Campaign A.
                 */
                unsubs?: number;
                /**
                 * Recipient Clicks for Campaign A.
                 */
                recipient_clicks?: number;
                /**
                 * Forwards for Campaign A.
                 */
                forwards?: number;
                /**
                 * Opens from forwards for Campaign A.
                 */
                forwards_opens?: number;
                /**
                 * Opens for Campaign A.
                 */
                opens?: number;
                /**
                 * The last open for Campaign A.
                 */
                last_open?: string;
                /**
                 * Unique opens for Campaign A.
                 */
                unique_opens?: number;
            };
            /**
             * Stats for Campaign B.
             */
            b?: {
                /**
                 * Bounces for Campaign B.
                 */
                bounces?: number;
                /**
                 * Abuse reports for Campaign B.
                 */
                abuse_reports?: number;
                /**
                 * Unsubscribes for Campaign B.
                 */
                unsubs?: number;
                /**
                 * Recipients clicks for Campaign B.
                 */
                recipient_clicks?: number;
                /**
                 * Forwards for Campaign B.
                 */
                forwards?: number;
                /**
                 * Opens for forwards from Campaign B.
                 */
                forwards_opens?: number;
                /**
                 * Opens for Campaign B.
                 */
                opens?: number;
                /**
                 * The last open for Campaign B.
                 */
                last_open?: string;
                /**
                 * Unique opens for Campaign B.
                 */
                unique_opens?: number;
            };
        };
        /**
         * An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp.
         */
        timewarp?: Array<{
            /**
             * For campaigns sent with timewarp, the time zone group the member is apart of.
             */
            gmt_offset?: number;
            /**
             * The number of opens.
             */
            opens?: number;
            /**
             * The date and time of the last open in ISO 8601 format.
             */
            last_open?: string;
            /**
             * The number of unique opens.
             */
            unique_opens?: number;
            /**
             * The number of clicks.
             */
            clicks?: number;
            /**
             * The date and time of the last click in ISO 8601 format.
             */
            last_click?: string;
            /**
             * The number of unique clicks.
             */
            unique_clicks?: number;
            /**
             * The number of bounces.
             */
            bounces?: number;
        }>;
        /**
         * An hourly breakdown of the performance of the campaign over the first 24 hours.
         */
        timeseries?: Array<{
            /**
             * The date and time for the series in ISO 8601 format.
             */
            timestamp?: string;
            /**
             * The number of emails sent in the timeseries.
             */
            emails_sent?: number;
            /**
             * The number of unique opens in the timeseries.
             */
            unique_opens?: number;
            /**
             * The number of clicks in the timeseries.
             */
            recipients_clicks?: number;
        }>;
        /**
         * The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/).
         */
        share_report?: {
            /**
             * The URL for the VIP report.
             */
            readonly share_url?: string;
            /**
             * If password protected, the password for the VIP report.
             */
            readonly share_password?: string;
        };
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
            readonly currency_code?: string;
        };
        /**
         * Updates on campaigns in the process of sending.
         */
        delivery_status?: {
            /**
             * Whether Campaign Delivery Status is enabled for this account and campaign.
             */
            readonly enabled?: boolean;
            /**
             * Whether a campaign send can be canceled.
             */
            readonly can_cancel?: boolean;
            /**
             * The current state of a campaign delivery.
             */
            readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
            /**
             * The total number of emails confirmed sent for this campaign so far.
             */
            readonly emails_sent?: number;
            /**
             * The total number of emails canceled for this campaign.
             */
            readonly emails_canceled?: number;
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdResponse = ({
    /**
     * A string that uniquely identifies this campaign.
     */
    id?: string;
    /**
     * The title of the campaign.
     */
    readonly campaign_title?: string;
    /**
     * The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto).
     */
    type?: string;
    /**
     * The unique list id.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The name of the list.
     */
    readonly list_name?: string;
    /**
     * The subject line for the campaign.
     */
    readonly subject_line?: string;
    /**
     * The preview text for the campaign.
     */
    preview_text?: string;
    /**
     * The total number of emails sent for this campaign.
     */
    emails_sent?: number;
    /**
     * The number of abuse reports generated for this campaign.
     */
    abuse_reports?: number;
    /**
     * The total number of unsubscribed members for this campaign.
     */
    readonly unsubscribed?: number;
    /**
     * The date and time a campaign was sent in ISO 8601 format.
     */
    readonly send_time?: string;
    /**
     * For RSS campaigns, the date and time of the last send in ISO 8601 format.
     */
    readonly rss_last_send?: string;
    /**
     * An object describing the bounce summary for the campaign.
     */
    bounces?: {
        /**
         * The total number of hard bounced email addresses.
         */
        hard_bounces?: number;
        /**
         * The total number of soft bounced email addresses.
         */
        soft_bounces?: number;
        /**
         * The total number of addresses that were syntax-related bounces.
         */
        syntax_errors?: number;
    };
    /**
     * An object describing the forwards and forward activity for the campaign.
     */
    forwards?: {
        /**
         * How many times the campaign has been forwarded.
         */
        forwards_count?: number;
        /**
         * How many times the forwarded campaign has been opened.
         */
        forwards_opens?: number;
    };
    /**
     * An object describing the open activity for the campaign.
     */
    opens?: {
        /**
         * The total number of opens for a campaign.
         */
        opens_total?: number;
        /**
         * The total number of unique opens.
         */
        unique_opens?: number;
        /**
         * The number of unique opens divided by the total number of successful deliveries.
         */
        open_rate?: number;
        /**
         * The date and time of the last recorded open in ISO 8601 format.
         */
        last_open?: string;
    };
    /**
     * An object describing the click activity for the campaign.
     */
    clicks?: {
        /**
         * The total number of clicks for the campaign.
         */
        clicks_total?: number;
        /**
         * The total number of unique clicks for links across a campaign.
         */
        unique_clicks?: number;
        /**
         * The total number of subscribers who clicked on a campaign.
         */
        unique_subscriber_clicks?: number;
        /**
         * The number of unique clicks divided by the total number of successful deliveries.
         */
        click_rate?: number;
        /**
         * The date and time of the last recorded click for the campaign in ISO 8601 format.
         */
        last_click?: string;
    };
    /**
     * An object describing campaign engagement on Facebook.
     */
    facebook_likes?: {
        /**
         * The number of recipients who liked the campaign on Facebook.
         */
        recipient_likes?: number;
        /**
         * The number of unique likes.
         */
        unique_likes?: number;
        /**
         * The number of Facebook likes for the campaign.
         */
        facebook_likes?: number;
    };
    /**
     * The average campaign statistics for your industry.
     */
    industry_stats?: {
        /**
         * The type of business industry associated with your account. For example: retail, education, etc.
         */
        type?: string;
        /**
         * The industry open rate.
         */
        open_rate?: number;
        /**
         * The industry click rate.
         */
        click_rate?: number;
        /**
         * The industry bounce rate.
         */
        bounce_rate?: number;
        /**
         * The industry unopened rate.
         */
        unopen_rate?: number;
        /**
         * The industry unsubscribe rate.
         */
        unsub_rate?: number;
        /**
         * The industry abuse rate.
         */
        abuse_rate?: number;
    };
    /**
     * The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list.
     */
    list_stats?: {
        /**
         * The average number of subscriptions per month for the list.
         */
        readonly sub_rate?: number;
        /**
         * The average number of unsubscriptions per month for the list.
         */
        readonly unsub_rate?: number;
        /**
         * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list.
         */
        readonly open_rate?: number;
        /**
         * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list.
         */
        readonly click_rate?: number;
    };
    /**
     * General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns.
     */
    ab_split?: {
        /**
         * Stats for Campaign A.
         */
        a?: {
            /**
             * Bounces for Campaign A.
             */
            bounces?: number;
            /**
             * Abuse reports for Campaign A.
             */
            abuse_reports?: number;
            /**
             * Unsubscribes for Campaign A.
             */
            unsubs?: number;
            /**
             * Recipient Clicks for Campaign A.
             */
            recipient_clicks?: number;
            /**
             * Forwards for Campaign A.
             */
            forwards?: number;
            /**
             * Opens from forwards for Campaign A.
             */
            forwards_opens?: number;
            /**
             * Opens for Campaign A.
             */
            opens?: number;
            /**
             * The last open for Campaign A.
             */
            last_open?: string;
            /**
             * Unique opens for Campaign A.
             */
            unique_opens?: number;
        };
        /**
         * Stats for Campaign B.
         */
        b?: {
            /**
             * Bounces for Campaign B.
             */
            bounces?: number;
            /**
             * Abuse reports for Campaign B.
             */
            abuse_reports?: number;
            /**
             * Unsubscribes for Campaign B.
             */
            unsubs?: number;
            /**
             * Recipients clicks for Campaign B.
             */
            recipient_clicks?: number;
            /**
             * Forwards for Campaign B.
             */
            forwards?: number;
            /**
             * Opens for forwards from Campaign B.
             */
            forwards_opens?: number;
            /**
             * Opens for Campaign B.
             */
            opens?: number;
            /**
             * The last open for Campaign B.
             */
            last_open?: string;
            /**
             * Unique opens for Campaign B.
             */
            unique_opens?: number;
        };
    };
    /**
     * An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp.
     */
    timewarp?: Array<{
        /**
         * For campaigns sent with timewarp, the time zone group the member is apart of.
         */
        gmt_offset?: number;
        /**
         * The number of opens.
         */
        opens?: number;
        /**
         * The date and time of the last open in ISO 8601 format.
         */
        last_open?: string;
        /**
         * The number of unique opens.
         */
        unique_opens?: number;
        /**
         * The number of clicks.
         */
        clicks?: number;
        /**
         * The date and time of the last click in ISO 8601 format.
         */
        last_click?: string;
        /**
         * The number of unique clicks.
         */
        unique_clicks?: number;
        /**
         * The number of bounces.
         */
        bounces?: number;
    }>;
    /**
     * An hourly breakdown of the performance of the campaign over the first 24 hours.
     */
    timeseries?: Array<{
        /**
         * The date and time for the series in ISO 8601 format.
         */
        timestamp?: string;
        /**
         * The number of emails sent in the timeseries.
         */
        emails_sent?: number;
        /**
         * The number of unique opens in the timeseries.
         */
        unique_opens?: number;
        /**
         * The number of clicks in the timeseries.
         */
        recipients_clicks?: number;
    }>;
    /**
     * The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/).
     */
    share_report?: {
        /**
         * The URL for the VIP report.
         */
        readonly share_url?: string;
        /**
         * If password protected, the password for the VIP report.
         */
        readonly share_password?: string;
    };
    /**
     * E-Commerce stats for a campaign.
     */
    ecommerce?: {
        /**
         * The total orders for a campaign.
         */
        readonly total_orders?: number;
        /**
         * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
         */
        readonly total_spent?: number;
        /**
         * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
         */
        readonly total_revenue?: number;
        readonly currency_code?: string;
    };
    /**
     * Updates on campaigns in the process of sending.
     */
    delivery_status?: {
        /**
         * Whether Campaign Delivery Status is enabled for this account and campaign.
         */
        readonly enabled?: boolean;
        /**
         * Whether a campaign send can be canceled.
         */
        readonly can_cancel?: boolean;
        /**
         * The current state of a campaign delivery.
         */
        readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
        /**
         * The total number of emails confirmed sent for this campaign so far.
         */
        readonly emails_sent?: number;
        /**
         * The total number of emails canceled for this campaign.
         */
        readonly emails_canceled?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdAbuseReportsIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdAbuseReportsIdResponse = ({
    /**
     * An array of objects, each representing an abuse report resource.
     */
    abuse_reports?: Array<{
        /**
         * The id for the abuse report
         */
        readonly id?: number;
        /**
         * The campaign id for the abuse report
         */
        readonly campaign_id?: string;
        /**
         * The unique id of the list for the abuse report.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        readonly vip?: boolean;
        /**
         * Date for the abuse report
         */
        readonly date?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdAbuseReportsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdAbuseReportsIdIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The id for the abuse report.
         */
        report_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdAbuseReportsIdIdResponse = ({
    /**
     * The id for the abuse report
     */
    readonly id?: number;
    /**
     * The campaign id for the abuse report
     */
    readonly campaign_id?: string;
    /**
     * The unique id of the list for the abuse report.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    readonly vip?: boolean;
    /**
     * Date for the abuse report
     */
    readonly date?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdAbuseReportsIdIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdAdviceData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdAdviceResponse = ({
    /**
     * An array of objects, each representing a point of campaign feedback.
     */
    advice?: Array<{
        /**
         * The sentiment type for a feedback message.
         */
        readonly type?: 'negative' | 'positive' | 'neutral';
        /**
         * The advice message.
         */
        readonly message?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdAdviceError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdClickDetailsData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns click reports sorted by the specified field.
         */
        sort_field?: 'total_clicks' | 'unique_clicks';
    };
};

export type GetReportsIdClickDetailsResponse = ({
    /**
     * An array of objects, each representing a specific URL contained in the campaign.
     */
    urls_clicked?: Array<{
        /**
         * The unique id for the link.
         */
        readonly id?: string;
        /**
         * The URL for the link in the campaign.
         */
        readonly url?: string;
        /**
         * The number of total clicks for a link.
         */
        readonly total_clicks?: number;
        /**
         * The percentage of total clicks a link generated for a campaign.
         */
        readonly click_percentage?: number;
        /**
         * Number of unique clicks for a link.
         */
        readonly unique_clicks?: number;
        /**
         * The percentage of unique clicks a link generated for a campaign.
         */
        readonly unique_click_percentage?: number;
        /**
         * The date and time for the last recorded click for a link in ISO 8601 format.
         */
        readonly last_click?: string;
        /**
         * A breakdown of clicks by different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns.
         */
        ab_split?: {
            /**
             * Stats for Group A.
             */
            a?: {
                /**
                 * The total number of clicks for Group A.
                 */
                readonly total_clicks_a?: number;
                /**
                 * The percentage of total clicks for Group A.
                 */
                readonly click_percentage_a?: number;
                /**
                 * The number of unique clicks for Group A.
                 */
                readonly unique_clicks_a?: number;
                /**
                 * The percentage of unique clicks for Group A.
                 */
                readonly unique_click_percentage_a?: number;
            };
            /**
             * Stats for Group B.
             */
            b?: {
                /**
                 * The total number of clicks for Group B.
                 */
                readonly total_clicks_b?: number;
                /**
                 * The percentage of total clicks for Group B.
                 */
                readonly click_percentage_b?: number;
                /**
                 * The number of unique clicks for Group B.
                 */
                readonly unique_clicks_b?: number;
                /**
                 * The percentage of unique clicks for Group B.
                 */
                readonly unique_click_percentage_b?: number;
            };
        };
        /**
         * The campaign id.
         */
        readonly campaign_id?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdClickDetailsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdClickDetailsIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The id for the link.
         */
        link_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdClickDetailsIdResponse = ({
    /**
     * The unique id for the link.
     */
    readonly id?: string;
    /**
     * The URL for the link in the campaign.
     */
    readonly url?: string;
    /**
     * The number of total clicks for a link.
     */
    readonly total_clicks?: number;
    /**
     * The percentage of total clicks a link generated for a campaign.
     */
    readonly click_percentage?: number;
    /**
     * Number of unique clicks for a link.
     */
    readonly unique_clicks?: number;
    /**
     * The percentage of unique clicks a link generated for a campaign.
     */
    readonly unique_click_percentage?: number;
    /**
     * The date and time for the last recorded click for a link in ISO 8601 format.
     */
    readonly last_click?: string;
    /**
     * A breakdown of clicks by different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns.
     */
    ab_split?: {
        /**
         * Stats for Group A.
         */
        a?: {
            /**
             * The total number of clicks for Group A.
             */
            readonly total_clicks_a?: number;
            /**
             * The percentage of total clicks for Group A.
             */
            readonly click_percentage_a?: number;
            /**
             * The number of unique clicks for Group A.
             */
            readonly unique_clicks_a?: number;
            /**
             * The percentage of unique clicks for Group A.
             */
            readonly unique_click_percentage_a?: number;
        };
        /**
         * Stats for Group B.
         */
        b?: {
            /**
             * The total number of clicks for Group B.
             */
            readonly total_clicks_b?: number;
            /**
             * The percentage of total clicks for Group B.
             */
            readonly click_percentage_b?: number;
            /**
             * The number of unique clicks for Group B.
             */
            readonly unique_clicks_b?: number;
            /**
             * The percentage of unique clicks for Group B.
             */
            readonly unique_click_percentage_b?: number;
        };
    };
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdClickDetailsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdClickDetailsIdMembersData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The id for the link.
         */
        link_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetReportsIdClickDetailsIdMembersResponse = ({
    /**
     * An array of objects, each representing a member who clicked a specific link within a campaign.
     */
    members?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        readonly vip?: boolean;
        /**
         * The total number of times the subscriber clicked on the link.
         */
        readonly clicks?: number;
        /**
         * The campaign id.
         */
        readonly campaign_id?: string;
        /**
         * The id for the tracked URL in the campaign.
         */
        readonly url_id?: string;
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation.
         */
        readonly contact_status?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdClickDetailsIdMembersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdClickDetailsIdMembersIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The id for the link.
         */
        link_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdClickDetailsIdMembersIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    readonly vip?: boolean;
    /**
     * The total number of times the subscriber clicked on the link.
     */
    readonly clicks?: number;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The id for the tracked URL in the campaign.
     */
    readonly url_id?: string;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation.
     */
    readonly contact_status?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdClickDetailsIdMembersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdOpenDetailsData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since?: string;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns open reports sorted by the specified field.
         */
        sort_field?: 'opens_count';
    };
};

export type GetReportsIdOpenDetailsResponse = ({
    /**
     * An array of objects, each representing a list member who opened a campaign email. Each members object will contain information about the number of total opens by a single member, as well as timestamps for each open event.
     */
    members?: Array<{
        /**
         * The unique id for the campaign.
         */
        readonly campaign_id?: string;
        /**
         * The unique id for the list.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation.
         */
        readonly contact_status?: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        readonly vip?: boolean;
        /**
         * The total number of times the this campaign was opened by the list member.
         */
        readonly opens_count?: number;
        /**
         * An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event.
         */
        opens?: Array<{
            /**
             * The date and time recorded for the action in ISO 8601 format.
             */
            timestamp?: string;
        }>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of opens matching the query regardless of pagination.
     */
    total_opens?: number;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdOpenDetailsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdOpenDetailsIdMembersIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdOpenDetailsIdMembersIdResponse = ({
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation.
     */
    readonly contact_status?: string;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    readonly vip?: boolean;
    /**
     * The total number of times the this campaign was opened by the list member.
     */
    readonly opens_count?: number;
    /**
     * An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event.
     */
    opens?: Array<{
        /**
         * The date and time recorded for the action in ISO 8601 format.
         */
        timestamp?: string;
    }>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdOpenDetailsIdMembersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdDomainPerformanceData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdDomainPerformanceResponse = ({
    /**
     * The top 5 email domains based on total delivered emails.
     */
    readonly domains?: Array<{
        /**
         * The name of the domain (gmail.com, hotmail.com, yahoo.com).
         */
        readonly domain?: string;
        /**
         * The number of emails sent to that specific domain.
         */
        readonly emails_sent?: number;
        /**
         * The number of bounces at a domain.
         */
        readonly bounces?: number;
        /**
         * The number of opens for a domain.
         */
        readonly opens?: number;
        /**
         * The number of clicks for a domain.
         */
        readonly clicks?: number;
        /**
         * The total number of unsubscribes for a domain.
         */
        readonly unsubs?: number;
        /**
         * The number of successful deliveries for a domain.
         */
        readonly delivered?: number;
        /**
         * The percentage of total emails that went to this domain.
         */
        readonly emails_pct?: number;
        /**
         * The percentage of total bounces from this domain.
         */
        readonly bounces_pct?: number;
        /**
         * The percentage of total opens from this domain.
         */
        readonly opens_pct?: number;
        /**
         * The percentage of total clicks from this domain.
         */
        readonly clicks_pct?: number;
        /**
         * The percentage of total unsubscribes from this domain.
         */
        readonly unsubs_pct?: number;
    }>;
    /**
     * The total number of emails sent for the campaign.
     */
    readonly total_sent?: number;
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdDomainPerformanceError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdEepurlData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdEepurlResponse = ({
    /**
     * A summary of Twitter activity for a campaign.
     */
    twitter?: {
        /**
         * The number of tweets including a link to the campaign.
         */
        readonly tweets?: number;
        /**
         * The day and time of the first recorded tweet with a link to the campaign.
         */
        readonly first_tweet?: string;
        /**
         * The day and time of the last recorded tweet with a link to the campaign.
         */
        readonly last_tweet?: string;
        /**
         * The number of retweets that include a link to the campaign.
         */
        readonly retweets?: number;
        /**
         * A summary of tweets that include a link to the campaign.
         */
        readonly statuses?: Array<{
            /**
             * The body of the tweet.
             */
            readonly status?: string;
            /**
             * The Twitter handle for the author of the tweet.
             */
            readonly screen_name?: string;
            /**
             * The individual id for the tweet.
             */
            readonly status_id?: string;
            /**
             * A timestamp for the tweet.
             */
            readonly datetime?: string;
            /**
             * A 'true' or 'false' status of whether the tweet is a retweet.
             */
            readonly is_retweet?: boolean;
        }>;
    };
    /**
     * A summary of the click-throughs on the campaign's URL.
     */
    readonly clicks?: {
        /**
         * The total number of clicks to the campaign's URL.
         */
        readonly clicks?: number;
        /**
         * The timestamp for the first click to the URL.
         */
        readonly first_click?: string;
        /**
         * The timestamp for the last click to the URL.
         */
        readonly last_click?: string;
        /**
         * A summary of the top click locations.
         */
        readonly locations?: Array<{
            /**
             * The two-digit country code for a recorded click.
             */
            country?: string;
            /**
             * If available, a specific region where the click was recorded.
             */
            region?: string;
        }>;
    };
    /**
     * A summary of the top referrers for the campaign.
     */
    readonly referrers?: Array<{
        /**
         * A referrer (truncated to 100 bytes).
         */
        referrer?: string;
        /**
         * The number of clicks a single referrer generated.
         */
        clicks?: number;
        /**
         * The timestamp for the first click from this referrer.
         */
        first_click?: string;
        /**
         * The timestamp for the last click from this referrer.
         */
        last_click?: string;
    }>;
    /**
     * The shortened link used for tracking.
     */
    readonly eepurl?: string;
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdEepurlError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdEmailActivityData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since?: string;
    };
};

export type GetReportsIdEmailActivityResponse = ({
    /**
     * An array of members that were sent the campaign.
     */
    emails?: Array<{
        /**
         * The unique id for the campaign.
         */
        readonly campaign_id?: string;
        /**
         * The unique id for the list.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign.
         */
        activity?: Array<{
            /**
             * One of the following actions: 'open', 'click', or 'bounce'
             */
            action?: string;
            /**
             * If the action is a 'bounce', the type of bounce received: 'hard', 'soft'.
             */
            type?: string;
            /**
             * The date and time recorded for the action in ISO 8601 format.
             */
            timestamp?: string;
            /**
             * If the action is a 'click', the URL on which the member clicked.
             */
            url?: string;
            /**
             * The IP address recorded for the action.
             */
            ip?: string;
        }>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The unique id for the sent campaign.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdEmailActivityError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdEmailActivityIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since?: string;
    };
};

export type GetReportsIdEmailActivityIdResponse = ({
    /**
     * The unique id for the campaign.
     */
    readonly campaign_id?: string;
    /**
     * The unique id for the list.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign.
     */
    activity?: Array<{
        /**
         * One of the following actions: 'open', 'click', or 'bounce'
         */
        action?: string;
        /**
         * If the action is a 'bounce', the type of bounce received: 'hard', 'soft'.
         */
        type?: string;
        /**
         * The date and time recorded for the action in ISO 8601 format.
         */
        timestamp?: string;
        /**
         * If the action is a 'click', the URL on which the member clicked.
         */
        url?: string;
        /**
         * The IP address recorded for the action.
         */
        ip?: string;
    }>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdEmailActivityIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdLocationsData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetReportsIdLocationsResponse = ({
    /**
     * An array of objects, each representing a top location for opens.
     */
    locations?: Array<{
        /**
         * The ISO 3166 2 digit country code.
         */
        readonly country_code?: string;
        /**
         * An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region.
         */
        readonly region?: string;
        /**
         * The name of the region, if we have one. For blank "region" values, this will be "Rest of Country".
         */
        readonly region_name?: string;
        /**
         * The number of unique campaign opens for a region.
         */
        readonly opens?: number;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdLocationsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdSentToData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetReportsIdSentToResponse = ({
    /**
     * An array of objects, each representing a campaign recipient.
     */
    sent_to?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        readonly vip?: boolean;
        /**
         * The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/).
         */
        status?: 'sent' | 'hard' | 'soft';
        /**
         * The number of times a campaign was opened by this member.
         */
        open_count?: number;
        /**
         * The date and time of the last open for this member in ISO 8601 format.
         */
        last_open?: string;
        /**
         * For A/B Split Campaigns, the group the member was apart of.
         */
        absplit_group?: 'a' | 'b' | 'winner';
        /**
         * For campaigns sent with timewarp, the time zone group the member is apart of.
         */
        gmt_offset?: number;
        /**
         * The campaign id.
         */
        readonly campaign_id?: string;
        /**
         * The unique list id.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdSentToError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdSentToIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdSentToIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    readonly vip?: boolean;
    /**
     * The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/).
     */
    status?: 'sent' | 'hard' | 'soft';
    /**
     * The number of times a campaign was opened by this member.
     */
    open_count?: number;
    /**
     * The date and time of the last open for this member in ISO 8601 format.
     */
    last_open?: string;
    /**
     * For A/B Split Campaigns, the group the member was apart of.
     */
    absplit_group?: 'a' | 'b' | 'winner';
    /**
     * For campaigns sent with timewarp, the time zone group the member is apart of.
     */
    gmt_offset?: number;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The unique list id.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdSentToIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdSubReportsIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdSubReportsIdResponse = ({
    /**
     * An array of objects, each representing a report resource.
     */
    reports?: Array<{
        /**
         * A string that uniquely identifies this campaign.
         */
        id?: string;
        /**
         * The title of the campaign.
         */
        readonly campaign_title?: string;
        /**
         * The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto).
         */
        type?: string;
        /**
         * The unique list id.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * The subject line for the campaign.
         */
        readonly subject_line?: string;
        /**
         * The preview text for the campaign.
         */
        preview_text?: string;
        /**
         * The total number of emails sent for this campaign.
         */
        emails_sent?: number;
        /**
         * The number of abuse reports generated for this campaign.
         */
        abuse_reports?: number;
        /**
         * The total number of unsubscribed members for this campaign.
         */
        readonly unsubscribed?: number;
        /**
         * The date and time a campaign was sent in ISO 8601 format.
         */
        readonly send_time?: string;
        /**
         * For RSS campaigns, the date and time of the last send in ISO 8601 format.
         */
        readonly rss_last_send?: string;
        /**
         * An object describing the bounce summary for the campaign.
         */
        bounces?: {
            /**
             * The total number of hard bounced email addresses.
             */
            hard_bounces?: number;
            /**
             * The total number of soft bounced email addresses.
             */
            soft_bounces?: number;
            /**
             * The total number of addresses that were syntax-related bounces.
             */
            syntax_errors?: number;
        };
        /**
         * An object describing the forwards and forward activity for the campaign.
         */
        forwards?: {
            /**
             * How many times the campaign has been forwarded.
             */
            forwards_count?: number;
            /**
             * How many times the forwarded campaign has been opened.
             */
            forwards_opens?: number;
        };
        /**
         * An object describing the open activity for the campaign.
         */
        opens?: {
            /**
             * The total number of opens for a campaign.
             */
            opens_total?: number;
            /**
             * The total number of unique opens.
             */
            unique_opens?: number;
            /**
             * The number of unique opens divided by the total number of successful deliveries.
             */
            open_rate?: number;
            /**
             * The date and time of the last recorded open in ISO 8601 format.
             */
            last_open?: string;
        };
        /**
         * An object describing the click activity for the campaign.
         */
        clicks?: {
            /**
             * The total number of clicks for the campaign.
             */
            clicks_total?: number;
            /**
             * The total number of unique clicks for links across a campaign.
             */
            unique_clicks?: number;
            /**
             * The total number of subscribers who clicked on a campaign.
             */
            unique_subscriber_clicks?: number;
            /**
             * The number of unique clicks divided by the total number of successful deliveries.
             */
            click_rate?: number;
            /**
             * The date and time of the last recorded click for the campaign in ISO 8601 format.
             */
            last_click?: string;
        };
        /**
         * An object describing campaign engagement on Facebook.
         */
        facebook_likes?: {
            /**
             * The number of recipients who liked the campaign on Facebook.
             */
            recipient_likes?: number;
            /**
             * The number of unique likes.
             */
            unique_likes?: number;
            /**
             * The number of Facebook likes for the campaign.
             */
            facebook_likes?: number;
        };
        /**
         * The average campaign statistics for your industry.
         */
        industry_stats?: {
            /**
             * The type of business industry associated with your account. For example: retail, education, etc.
             */
            type?: string;
            /**
             * The industry open rate.
             */
            open_rate?: number;
            /**
             * The industry click rate.
             */
            click_rate?: number;
            /**
             * The industry bounce rate.
             */
            bounce_rate?: number;
            /**
             * The industry unopened rate.
             */
            unopen_rate?: number;
            /**
             * The industry unsubscribe rate.
             */
            unsub_rate?: number;
            /**
             * The industry abuse rate.
             */
            abuse_rate?: number;
        };
        /**
         * The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list.
         */
        list_stats?: {
            /**
             * The average number of subscriptions per month for the list.
             */
            readonly sub_rate?: number;
            /**
             * The average number of unsubscriptions per month for the list.
             */
            readonly unsub_rate?: number;
            /**
             * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list.
             */
            readonly open_rate?: number;
            /**
             * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list.
             */
            readonly click_rate?: number;
        };
        /**
         * General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns.
         */
        ab_split?: {
            /**
             * Stats for Campaign A.
             */
            a?: {
                /**
                 * Bounces for Campaign A.
                 */
                bounces?: number;
                /**
                 * Abuse reports for Campaign A.
                 */
                abuse_reports?: number;
                /**
                 * Unsubscribes for Campaign A.
                 */
                unsubs?: number;
                /**
                 * Recipient Clicks for Campaign A.
                 */
                recipient_clicks?: number;
                /**
                 * Forwards for Campaign A.
                 */
                forwards?: number;
                /**
                 * Opens from forwards for Campaign A.
                 */
                forwards_opens?: number;
                /**
                 * Opens for Campaign A.
                 */
                opens?: number;
                /**
                 * The last open for Campaign A.
                 */
                last_open?: string;
                /**
                 * Unique opens for Campaign A.
                 */
                unique_opens?: number;
            };
            /**
             * Stats for Campaign B.
             */
            b?: {
                /**
                 * Bounces for Campaign B.
                 */
                bounces?: number;
                /**
                 * Abuse reports for Campaign B.
                 */
                abuse_reports?: number;
                /**
                 * Unsubscribes for Campaign B.
                 */
                unsubs?: number;
                /**
                 * Recipients clicks for Campaign B.
                 */
                recipient_clicks?: number;
                /**
                 * Forwards for Campaign B.
                 */
                forwards?: number;
                /**
                 * Opens for forwards from Campaign B.
                 */
                forwards_opens?: number;
                /**
                 * Opens for Campaign B.
                 */
                opens?: number;
                /**
                 * The last open for Campaign B.
                 */
                last_open?: string;
                /**
                 * Unique opens for Campaign B.
                 */
                unique_opens?: number;
            };
        };
        /**
         * An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp.
         */
        timewarp?: Array<{
            /**
             * For campaigns sent with timewarp, the time zone group the member is apart of.
             */
            gmt_offset?: number;
            /**
             * The number of opens.
             */
            opens?: number;
            /**
             * The date and time of the last open in ISO 8601 format.
             */
            last_open?: string;
            /**
             * The number of unique opens.
             */
            unique_opens?: number;
            /**
             * The number of clicks.
             */
            clicks?: number;
            /**
             * The date and time of the last click in ISO 8601 format.
             */
            last_click?: string;
            /**
             * The number of unique clicks.
             */
            unique_clicks?: number;
            /**
             * The number of bounces.
             */
            bounces?: number;
        }>;
        /**
         * An hourly breakdown of the performance of the campaign over the first 24 hours.
         */
        timeseries?: Array<{
            /**
             * The date and time for the series in ISO 8601 format.
             */
            timestamp?: string;
            /**
             * The number of emails sent in the timeseries.
             */
            emails_sent?: number;
            /**
             * The number of unique opens in the timeseries.
             */
            unique_opens?: number;
            /**
             * The number of clicks in the timeseries.
             */
            recipients_clicks?: number;
        }>;
        /**
         * The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/).
         */
        share_report?: {
            /**
             * The URL for the VIP report.
             */
            readonly share_url?: string;
            /**
             * If password protected, the password for the VIP report.
             */
            readonly share_password?: string;
        };
        /**
         * E-Commerce stats for a campaign.
         */
        ecommerce?: {
            /**
             * The total orders for a campaign.
             */
            readonly total_orders?: number;
            /**
             * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
             */
            readonly total_spent?: number;
            /**
             * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
             */
            readonly total_revenue?: number;
            readonly currency_code?: string;
        };
        /**
         * Updates on campaigns in the process of sending.
         */
        delivery_status?: {
            /**
             * Whether Campaign Delivery Status is enabled for this account and campaign.
             */
            readonly enabled?: boolean;
            /**
             * Whether a campaign send can be canceled.
             */
            readonly can_cancel?: boolean;
            /**
             * The current state of a campaign delivery.
             */
            readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
            /**
             * The total number of emails confirmed sent for this campaign so far.
             */
            readonly emails_sent?: number;
            /**
             * The total number of emails canceled for this campaign.
             */
            readonly emails_canceled?: number;
        };
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * Unique identifier of the parent campaign
     */
    campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdSubReportsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdUnsubscribedData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetReportsIdUnsubscribedResponse = ({
    /**
     * An array of objects, each representing a member who unsubscribed from a campaign.
     */
    unsubscribes?: Array<{
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * Email address for a subscriber.
         */
        readonly email_address?: string;
        /**
         * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
         */
        merge_fields?: {
            [key: string]: unknown;
        };
        /**
         * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
         */
        readonly vip?: boolean;
        /**
         * The date and time the member opted-out in ISO 8601 format.
         */
        readonly timestamp?: string;
        /**
         * If available, the reason listed by the member for unsubscribing.
         */
        readonly reason?: string;
        /**
         * The campaign id.
         */
        readonly campaign_id?: string;
        /**
         * The list id.
         */
        readonly list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdUnsubscribedError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdUnsubscribedIdData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        subscriber_hash: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportsIdUnsubscribedIdResponse = ({
    /**
     * The MD5 hash of the lowercase version of the list member's email address.
     */
    readonly email_id?: string;
    /**
     * Email address for a subscriber.
     */
    readonly email_address?: string;
    /**
     * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
     */
    merge_fields?: {
        [key: string]: unknown;
    };
    /**
     * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
     */
    readonly vip?: boolean;
    /**
     * The date and time the member opted-out in ISO 8601 format.
     */
    readonly timestamp?: string;
    /**
     * If available, the reason listed by the member for unsubscribing.
     */
    readonly reason?: string;
    /**
     * The campaign id.
     */
    readonly campaign_id?: string;
    /**
     * The list id.
     */
    readonly list_id?: string;
    /**
     * The status of the list used, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdUnsubscribedIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportsIdEcommerceProductActivityData = {
    path: {
        /**
         * The unique id for the campaign.
         */
        campaign_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'title' | 'total_revenue' | 'total_purchased';
    };
};

export type GetReportsIdEcommerceProductActivityResponse = ({
    products?: Array<{
        title?: string;
        sku?: string;
        image_url?: string;
        total_revenue?: number;
        total_purchased?: number;
        currency_code?: string;
        recommendation_total?: number;
        recommendation_purchased?: number;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportsIdEcommerceProductActivityError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetTemplatesData = {
    query?: {
        /**
         * Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        before_date_created?: string;
        /**
         * Limit results based on category.
         */
        category?: string;
        /**
         * Limit results based on how the template's content is put together. Only templates of type `user` can be filtered by `content_type`. If you want to retrieve saved templates created with the legacy email editor, then filter `content_type` to `template`. If you'd rather pull your saved templates for the new editor, filter to `multichannel`. For code your own templates, filter to `html`.
         */
        content_type?: 'html' | 'template' | 'multichannel';
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * The Mailchimp account user who created the template.
         */
        created_by?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * The unique folder id.
         */
        folder_id?: string;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         */
        since_date_created?: string;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns user templates sorted by the specified field.
         */
        sort_field?: 'date_created' | 'date_edited' | 'name';
        /**
         * Limit results based on template type.
         */
        type?: string;
    };
};

export type GetTemplatesResponse = ({
    /**
     * All of an account's saved or custom templates.
     */
    templates?: Array<{
        /**
         * The individual id for the template.
         */
        readonly id?: number;
        /**
         * The type of template (user, base, or gallery).
         */
        readonly type?: string;
        /**
         * The name of the template.
         */
        name?: string;
        /**
         * Whether the template uses the drag and drop editor.
         */
        readonly drag_and_drop?: boolean;
        /**
         * Whether the template contains media queries to make it responsive.
         */
        readonly responsive?: boolean;
        /**
         * If available, the category the template is listed in.
         */
        readonly category?: string;
        /**
         * The date and time the template was created in ISO 8601 format.
         */
        readonly date_created?: string;
        /**
         * The date and time the template was edited in ISO 8601 format.
         */
        readonly date_edited?: string;
        /**
         * The login name for template's creator.
         */
        readonly created_by?: string;
        /**
         * The login name who last edited the template.
         */
        readonly edited_by?: string;
        /**
         * User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.
         */
        readonly active?: boolean;
        /**
         * The id of the folder the template is currently in.
         */
        folder_id?: string;
        /**
         * If available, the URL for a thumbnail of the template.
         */
        readonly thumbnail?: string;
        /**
         * The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).
         */
        readonly share_url?: string;
        /**
         * How the template's content is put together.
         */
        readonly content_type?: 'template' | 'multichannel' | 'html';
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetTemplatesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostTemplatesData = {
    body: {
        /**
         * The name of the template.
         */
        name: string;
        /**
         * The id of the folder the template is currently in.
         */
        folder_id?: string;
        /**
         * The raw HTML for the template. We  support the Mailchimp [Template Language](https://mailchimp.com/help/getting-started-with-mailchimps-template-language/) in any HTML code passed via the API.
         */
        html: string;
    };
};

export type PostTemplatesResponse = ({
    /**
     * The individual id for the template.
     */
    readonly id?: number;
    /**
     * The type of template (user, base, or gallery).
     */
    readonly type?: string;
    /**
     * The name of the template.
     */
    name?: string;
    /**
     * Whether the template uses the drag and drop editor.
     */
    readonly drag_and_drop?: boolean;
    /**
     * Whether the template contains media queries to make it responsive.
     */
    readonly responsive?: boolean;
    /**
     * If available, the category the template is listed in.
     */
    readonly category?: string;
    /**
     * The date and time the template was created in ISO 8601 format.
     */
    readonly date_created?: string;
    /**
     * The date and time the template was edited in ISO 8601 format.
     */
    readonly date_edited?: string;
    /**
     * The login name for template's creator.
     */
    readonly created_by?: string;
    /**
     * The login name who last edited the template.
     */
    readonly edited_by?: string;
    /**
     * User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.
     */
    readonly active?: boolean;
    /**
     * The id of the folder the template is currently in.
     */
    folder_id?: string;
    /**
     * If available, the URL for a thumbnail of the template.
     */
    readonly thumbnail?: string;
    /**
     * The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).
     */
    readonly share_url?: string;
    /**
     * How the template's content is put together.
     */
    readonly content_type?: 'template' | 'multichannel' | 'html';
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostTemplatesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetTemplatesIdData = {
    path: {
        /**
         * The unique id for the template.
         */
        template_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetTemplatesIdResponse = ({
    /**
     * The individual id for the template.
     */
    readonly id?: number;
    /**
     * The type of template (user, base, or gallery).
     */
    readonly type?: string;
    /**
     * The name of the template.
     */
    name?: string;
    /**
     * Whether the template uses the drag and drop editor.
     */
    readonly drag_and_drop?: boolean;
    /**
     * Whether the template contains media queries to make it responsive.
     */
    readonly responsive?: boolean;
    /**
     * If available, the category the template is listed in.
     */
    readonly category?: string;
    /**
     * The date and time the template was created in ISO 8601 format.
     */
    readonly date_created?: string;
    /**
     * The date and time the template was edited in ISO 8601 format.
     */
    readonly date_edited?: string;
    /**
     * The login name for template's creator.
     */
    readonly created_by?: string;
    /**
     * The login name who last edited the template.
     */
    readonly edited_by?: string;
    /**
     * User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.
     */
    readonly active?: boolean;
    /**
     * The id of the folder the template is currently in.
     */
    folder_id?: string;
    /**
     * If available, the URL for a thumbnail of the template.
     */
    readonly thumbnail?: string;
    /**
     * The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).
     */
    readonly share_url?: string;
    /**
     * How the template's content is put together.
     */
    readonly content_type?: 'template' | 'multichannel' | 'html';
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetTemplatesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchTemplatesIdData = {
    body: {
        /**
         * The name of the template.
         */
        name: string;
        /**
         * The id of the folder the template is currently in.
         */
        folder_id?: string;
        /**
         * The raw HTML for the template. We  support the Mailchimp [Template Language](https://mailchimp.com/help/getting-started-with-mailchimps-template-language/) in any HTML code passed via the API.
         */
        html: string;
    };
    path: {
        /**
         * The unique id for the template.
         */
        template_id: string;
    };
};

export type PatchTemplatesIdResponse = ({
    /**
     * The individual id for the template.
     */
    readonly id?: number;
    /**
     * The type of template (user, base, or gallery).
     */
    readonly type?: string;
    /**
     * The name of the template.
     */
    name?: string;
    /**
     * Whether the template uses the drag and drop editor.
     */
    readonly drag_and_drop?: boolean;
    /**
     * Whether the template contains media queries to make it responsive.
     */
    readonly responsive?: boolean;
    /**
     * If available, the category the template is listed in.
     */
    readonly category?: string;
    /**
     * The date and time the template was created in ISO 8601 format.
     */
    readonly date_created?: string;
    /**
     * The date and time the template was edited in ISO 8601 format.
     */
    readonly date_edited?: string;
    /**
     * The login name for template's creator.
     */
    readonly created_by?: string;
    /**
     * The login name who last edited the template.
     */
    readonly edited_by?: string;
    /**
     * User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.
     */
    readonly active?: boolean;
    /**
     * The id of the folder the template is currently in.
     */
    folder_id?: string;
    /**
     * If available, the URL for a thumbnail of the template.
     */
    readonly thumbnail?: string;
    /**
     * The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).
     */
    readonly share_url?: string;
    /**
     * How the template's content is put together.
     */
    readonly content_type?: 'template' | 'multichannel' | 'html';
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchTemplatesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteTemplatesIdData = {
    path: {
        /**
         * The unique id for the template.
         */
        template_id: string;
    };
};

export type DeleteTemplatesIdResponse = (void);

export type DeleteTemplatesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetTemplatesIdDefaultContentData = {
    path: {
        /**
         * The unique id for the template.
         */
        template_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetTemplatesIdDefaultContentResponse = ({
    /**
     * The sections that you can edit in the template, including each section's default content.
     */
    sections?: {
        [key: string]: unknown;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetTemplatesIdDefaultContentError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceOrdersData = {
    query?: {
        /**
         * Restrict results to orders with a specific `campaign_id` value.
         */
        campaign_id?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * Restrict results to orders made by a specific customer.
         */
        customer_id?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
         */
        has_outreach?: boolean;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict results to orders with a specific `outreach_id` value.
         */
        outreach_id?: string;
    };
};

export type GetEcommerceOrdersResponse = ({
    /**
     * An array of objects, each representing an order resource.
     */
    orders?: Array<{
        /**
         * A unique identifier for the order.
         */
        readonly id?: string;
        /**
         * Information about a specific customer.
         */
        customer?: {
            /**
             * A unique identifier for the customer.
             */
            readonly id?: string;
            /**
             * The customer's email address.
             */
            readonly email_address?: string;
            /**
             * A US phone number for SMS contact.
             */
            sms_phone_number?: string;
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's total order count.
             */
            readonly orders_count?: number;
            /**
             * The total amount the customer has spent.
             */
            readonly total_spent?: number;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
            /**
             * The date and time the customer was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The date and time the customer was last updated in ISO 8601 format.
             */
            readonly updated_at?: string;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        };
        /**
         * The unique identifier for the store.
         */
        readonly store_id?: string;
        /**
         * A string that uniquely identifies the campaign associated with an order.
         */
        campaign_id?: string;
        /**
         * The URL for the page where the buyer landed when entering the shop.
         */
        landing_site?: string;
        /**
         * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        financial_status?: string;
        /**
         * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        fulfillment_status?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code?: string;
        /**
         * The order total associated with an order.
         */
        order_total?: number;
        /**
         * The URL for the order.
         */
        order_url?: string;
        /**
         * The total amount of the discounts to be applied to the price of the order.
         */
        discount_total?: number;
        /**
         * The tax total associated with an order.
         */
        tax_total?: number;
        /**
         * The shipping total for the order.
         */
        shipping_total?: number;
        /**
         * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
         */
        tracking_code?: 'prec';
        /**
         * The date and time the order was processed in ISO 8601 format.
         */
        processed_at_foreign?: string;
        /**
         * The date and time the order was cancelled in ISO 8601 format.
         */
        cancelled_at_foreign?: string;
        /**
         * The date and time the order was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
        /**
         * The shipping address for the order.
         */
        shipping_address?: {
            /**
             * The name associated with an order's shipping address.
             */
            name?: string;
            /**
             * The shipping address for the order.
             */
            address1?: string;
            /**
             * An additional field for the shipping address.
             */
            address2?: string;
            /**
             * The city in the order's shipping address.
             */
            city?: string;
            /**
             * The state or normalized province in the order's shipping address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state the order's shipping address is located in.
             */
            province_code?: string;
            /**
             * The postal or zip code in the order's shipping address.
             */
            postal_code?: string;
            /**
             * The country in the order's shipping address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the shipping address.
             */
            country_code?: string;
            /**
             * The longitude for the shipping address location.
             */
            longitude?: number;
            /**
             * The latitude for the shipping address location.
             */
            latitude?: number;
            /**
             * The phone number for the order's shipping address
             */
            phone?: string;
            /**
             * The company associated with an order's shipping address.
             */
            company?: string;
        };
        /**
         * The billing address for the order.
         */
        billing_address?: {
            /**
             * The name associated with an order's billing address.
             */
            name?: string;
            /**
             * The billing address for the order.
             */
            address1?: string;
            /**
             * An additional field for the billing address.
             */
            address2?: string;
            /**
             * The city in the billing address.
             */
            city?: string;
            /**
             * The state or normalized province in the billing address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state in the billing address.
             */
            province_code?: string;
            /**
             * The postal or zip code in the billing address.
             */
            postal_code?: string;
            /**
             * The country in the billing address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the billing address.
             */
            country_code?: string;
            /**
             * The longitude for the billing address location.
             */
            longitude?: number;
            /**
             * The latitude for the billing address location.
             */
            latitude?: number;
            /**
             * The phone number for the billing address.
             */
            phone?: string;
            /**
             * The company associated with the billing address.
             */
            company?: string;
        };
        /**
         * The promo codes applied on the order
         */
        promos?: Array<{
            /**
             * The Promo Code
             */
            code?: string;
            /**
             * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
             */
            amount_discounted?: number;
            /**
             * Type of discount. For free shipping set type to fixed
             */
            type?: 'fixed' | 'percentage';
        }>;
        /**
         * An array of the order's line items.
         */
        lines?: Array<{
            /**
             * A unique identifier for an order line item.
             */
            readonly id?: string;
            /**
             * A unique identifier for the product associated with an order line item.
             */
            product_id?: string;
            /**
             * The name of the product for an order line item.
             */
            readonly product_title?: string;
            /**
             * A unique identifier for the product variant associated with an order line item.
             */
            product_variant_id?: string;
            /**
             * The name of the product variant for an order line item.
             */
            readonly product_variant_title?: string;
            /**
             * The image URL for a product.
             */
            readonly image_url?: string;
            /**
             * The order line item quantity.
             */
            quantity?: number;
            /**
             * The order line item price.
             */
            price?: number;
            /**
             * The total discount amount applied to a line item.
             */
            discount?: number;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        }>;
        /**
         * The outreach associated with this order. For example, an email campaign or Facebook ad.
         */
        outreach?: {
            /**
             * A unique identifier for the outreach. Can be an email campaign ID.
             */
            id?: string;
            /**
             * The name for the outreach.
             */
            readonly name?: string;
            /**
             * The type of the outreach.
             */
            readonly type?: string;
            /**
             * The date and time the Outreach was published in ISO 8601 format.
             */
            readonly published_time?: string;
        };
        /**
         * The tracking number associated with the order.
         */
        tracking_number?: string;
        /**
         * The tracking carrier associated with the order.
         */
        tracking_carrier?: string;
        /**
         * The tracking URL associated with the order.
         */
        tracking_url?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceOrdersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresResponse = ({
    /**
     * An array of objects, each representing a store.
     */
    stores?: Array<{
        /**
         * The unique identifier for the store.
         */
        readonly id?: string;
        /**
         * The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change.
         */
        readonly list_id?: string;
        /**
         * The name of the store.
         */
        name?: string;
        /**
         * The e-commerce platform of the store.
         */
        platform?: string;
        /**
         * The store domain.  The store domain must be unique within a user account.
         */
        domain?: string;
        /**
         * Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations).
         */
        is_syncing?: boolean;
        /**
         * The email address for the store.
         */
        email_address?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code?: string;
        /**
         * The currency format for the store. For example: `$`, `£`, etc.
         */
        money_format?: string;
        /**
         * The primary locale for the store. For example: `en`, `de`, etc.
         */
        primary_locale?: string;
        /**
         * The timezone for the store.
         */
        timezone?: string;
        /**
         * The store phone number.
         */
        phone?: string;
        /**
         * The store address.
         */
        address?: {
            /**
             * The store's mailing address.
             */
            address1?: string;
            /**
             * An additional field for the store's mailing address.
             */
            address2?: string;
            /**
             * The city the store is located in.
             */
            city?: string;
            /**
             * The store's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the store's province or state.
             */
            province_code?: string;
            /**
             * The store's postal or zip code.
             */
            postal_code?: string;
            /**
             * The store's country.
             */
            country?: string;
            /**
             * The two-letter code for to the store's country.
             */
            country_code?: string;
            /**
             * The longitude of the store location.
             */
            longitude?: number;
            /**
             * The latitude of the store location.
             */
            latitude?: number;
        };
        /**
         * The Connected Site associated with the store.
         */
        readonly connected_site?: {
            /**
             * The unique identifier for the connected site.
             */
            readonly site_foreign_id?: string;
            /**
             * The script used to connect your site with Mailchimp.
             */
            readonly site_script?: {
                /**
                 * The URL used for any integrations that offer built-in support for connected sites.
                 */
                readonly url?: string;
                /**
                 * A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
                 */
                readonly fragment?: string;
            };
        };
        /**
         * Details for the automations attached to this store.
         */
        readonly automations?: {
            /**
             * abandonedCart automation details.
             */
            readonly abandoned_cart?: {
                /**
                 * Whether this store supports the abandonedCart automation.
                 */
                readonly is_supported?: boolean;
                /**
                 * Unique ID of automation parent campaign.
                 */
                readonly id?: string;
                /**
                 * Status of the abandonedCart automation.
                 */
                readonly status?: 'save' | 'sending' | 'paused';
            };
            /**
             * abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web.
             */
            readonly abandoned_browse?: {
                /**
                 * Whether this store supports the abandonedBrowse automation.
                 */
                readonly is_supported?: boolean;
                /**
                 * Unique ID of automation parent campaign.
                 */
                readonly id?: string;
                /**
                 * Status of the abandonedBrowse automation.
                 */
                readonly status?: 'save' | 'sending' | 'paused';
            };
        };
        /**
         * The status of the list connected to the store, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The date and time the store was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the store was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresData = {
    body: {
        /**
         * The unique identifier for the store.
         */
        id: string;
        /**
         * The unique identifier for the list associated with the store. The `list_id` for a specific store cannot change.
         */
        list_id: string;
        /**
         * The name of the store.
         */
        name: string;
        /**
         * The e-commerce platform of the store.
         */
        platform?: string;
        /**
         * The store domain. This parameter is required for Connected Sites and Google Ads.
         */
        domain?: string;
        /**
         * Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations).
         */
        is_syncing?: boolean;
        /**
         * The email address for the store.
         */
        email_address?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code: string;
        /**
         * The currency format for the store. For example: `$`, `£`, etc.
         */
        money_format?: string;
        /**
         * The primary locale for the store. For example: `en`, `de`, etc.
         */
        primary_locale?: string;
        /**
         * The timezone for the store.
         */
        timezone?: string;
        /**
         * The store phone number.
         */
        phone?: string;
        /**
         * The store address.
         */
        address?: {
            /**
             * The store's mailing address.
             */
            address1?: string;
            /**
             * An additional field for the store's mailing address.
             */
            address2?: string;
            /**
             * The city the store is located in.
             */
            city?: string;
            /**
             * The store's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the store's province or state.
             */
            province_code?: string;
            /**
             * The store's postal or zip code.
             */
            postal_code?: string;
            /**
             * The store's country.
             */
            country?: string;
            /**
             * The two-letter code for to the store's country.
             */
            country_code?: string;
            /**
             * The longitude of the store location.
             */
            longitude?: number;
            /**
             * The latitude of the store location.
             */
            latitude?: number;
        };
    };
};

export type PostEcommerceStoresResponse = ({
    /**
     * The unique identifier for the store.
     */
    readonly id?: string;
    /**
     * The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change.
     */
    readonly list_id?: string;
    /**
     * The name of the store.
     */
    name?: string;
    /**
     * The e-commerce platform of the store.
     */
    platform?: string;
    /**
     * The store domain.  The store domain must be unique within a user account.
     */
    domain?: string;
    /**
     * Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations).
     */
    is_syncing?: boolean;
    /**
     * The email address for the store.
     */
    email_address?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the store accepts.
     */
    currency_code?: string;
    /**
     * The currency format for the store. For example: `$`, `£`, etc.
     */
    money_format?: string;
    /**
     * The primary locale for the store. For example: `en`, `de`, etc.
     */
    primary_locale?: string;
    /**
     * The timezone for the store.
     */
    timezone?: string;
    /**
     * The store phone number.
     */
    phone?: string;
    /**
     * The store address.
     */
    address?: {
        /**
         * The store's mailing address.
         */
        address1?: string;
        /**
         * An additional field for the store's mailing address.
         */
        address2?: string;
        /**
         * The city the store is located in.
         */
        city?: string;
        /**
         * The store's state name or normalized province.
         */
        province?: string;
        /**
         * The two-letter code for the store's province or state.
         */
        province_code?: string;
        /**
         * The store's postal or zip code.
         */
        postal_code?: string;
        /**
         * The store's country.
         */
        country?: string;
        /**
         * The two-letter code for to the store's country.
         */
        country_code?: string;
        /**
         * The longitude of the store location.
         */
        longitude?: number;
        /**
         * The latitude of the store location.
         */
        latitude?: number;
    };
    /**
     * The Connected Site associated with the store.
     */
    readonly connected_site?: {
        /**
         * The unique identifier for the connected site.
         */
        readonly site_foreign_id?: string;
        /**
         * The script used to connect your site with Mailchimp.
         */
        readonly site_script?: {
            /**
             * The URL used for any integrations that offer built-in support for connected sites.
             */
            readonly url?: string;
            /**
             * A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
             */
            readonly fragment?: string;
        };
    };
    /**
     * Details for the automations attached to this store.
     */
    readonly automations?: {
        /**
         * abandonedCart automation details.
         */
        readonly abandoned_cart?: {
            /**
             * Whether this store supports the abandonedCart automation.
             */
            readonly is_supported?: boolean;
            /**
             * Unique ID of automation parent campaign.
             */
            readonly id?: string;
            /**
             * Status of the abandonedCart automation.
             */
            readonly status?: 'save' | 'sending' | 'paused';
        };
        /**
         * abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web.
         */
        readonly abandoned_browse?: {
            /**
             * Whether this store supports the abandonedBrowse automation.
             */
            readonly is_supported?: boolean;
            /**
             * Unique ID of automation parent campaign.
             */
            readonly id?: string;
            /**
             * Status of the abandonedBrowse automation.
             */
            readonly status?: 'save' | 'sending' | 'paused';
        };
    };
    /**
     * The status of the list connected to the store, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The date and time the store was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the store was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdData = {
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdResponse = ({
    /**
     * The unique identifier for the store.
     */
    readonly id?: string;
    /**
     * The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change.
     */
    readonly list_id?: string;
    /**
     * The name of the store.
     */
    name?: string;
    /**
     * The e-commerce platform of the store.
     */
    platform?: string;
    /**
     * The store domain.  The store domain must be unique within a user account.
     */
    domain?: string;
    /**
     * Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations).
     */
    is_syncing?: boolean;
    /**
     * The email address for the store.
     */
    email_address?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the store accepts.
     */
    currency_code?: string;
    /**
     * The currency format for the store. For example: `$`, `£`, etc.
     */
    money_format?: string;
    /**
     * The primary locale for the store. For example: `en`, `de`, etc.
     */
    primary_locale?: string;
    /**
     * The timezone for the store.
     */
    timezone?: string;
    /**
     * The store phone number.
     */
    phone?: string;
    /**
     * The store address.
     */
    address?: {
        /**
         * The store's mailing address.
         */
        address1?: string;
        /**
         * An additional field for the store's mailing address.
         */
        address2?: string;
        /**
         * The city the store is located in.
         */
        city?: string;
        /**
         * The store's state name or normalized province.
         */
        province?: string;
        /**
         * The two-letter code for the store's province or state.
         */
        province_code?: string;
        /**
         * The store's postal or zip code.
         */
        postal_code?: string;
        /**
         * The store's country.
         */
        country?: string;
        /**
         * The two-letter code for to the store's country.
         */
        country_code?: string;
        /**
         * The longitude of the store location.
         */
        longitude?: number;
        /**
         * The latitude of the store location.
         */
        latitude?: number;
    };
    /**
     * The Connected Site associated with the store.
     */
    readonly connected_site?: {
        /**
         * The unique identifier for the connected site.
         */
        readonly site_foreign_id?: string;
        /**
         * The script used to connect your site with Mailchimp.
         */
        readonly site_script?: {
            /**
             * The URL used for any integrations that offer built-in support for connected sites.
             */
            readonly url?: string;
            /**
             * A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
             */
            readonly fragment?: string;
        };
    };
    /**
     * Details for the automations attached to this store.
     */
    readonly automations?: {
        /**
         * abandonedCart automation details.
         */
        readonly abandoned_cart?: {
            /**
             * Whether this store supports the abandonedCart automation.
             */
            readonly is_supported?: boolean;
            /**
             * Unique ID of automation parent campaign.
             */
            readonly id?: string;
            /**
             * Status of the abandonedCart automation.
             */
            readonly status?: 'save' | 'sending' | 'paused';
        };
        /**
         * abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web.
         */
        readonly abandoned_browse?: {
            /**
             * Whether this store supports the abandonedBrowse automation.
             */
            readonly is_supported?: boolean;
            /**
             * Unique ID of automation parent campaign.
             */
            readonly id?: string;
            /**
             * Status of the abandonedBrowse automation.
             */
            readonly status?: 'save' | 'sending' | 'paused';
        };
    };
    /**
     * The status of the list connected to the store, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The date and time the store was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the store was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdData = {
    body: {
        /**
         * The name of the store.
         */
        name?: string;
        /**
         * The e-commerce platform of the store.
         */
        platform?: string;
        /**
         * The store domain.
         */
        domain?: string;
        /**
         * Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations).
         */
        is_syncing?: boolean;
        /**
         * The email address for the store.
         */
        email_address?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code?: string;
        /**
         * The currency format for the store. For example: `$`, `£`, etc.
         */
        money_format?: string;
        /**
         * The primary locale for the store. For example: `en`, `de`, etc.
         */
        primary_locale?: string;
        /**
         * The timezone for the store.
         */
        timezone?: string;
        /**
         * The store phone number.
         */
        phone?: string;
        /**
         * The store address.
         */
        address?: {
            /**
             * The store's mailing address.
             */
            address1?: string;
            /**
             * An additional field for the store's mailing address.
             */
            address2?: string;
            /**
             * The city the store is located in.
             */
            city?: string;
            /**
             * The store's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the store's province or state.
             */
            province_code?: string;
            /**
             * The store's postal or zip code.
             */
            postal_code?: string;
            /**
             * The store's country.
             */
            country?: string;
            /**
             * The two-letter code for to the store's country.
             */
            country_code?: string;
            /**
             * The longitude of the store location.
             */
            longitude?: number;
            /**
             * The latitude of the store location.
             */
            latitude?: number;
        };
    };
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdResponse = ({
    /**
     * The unique identifier for the store.
     */
    readonly id?: string;
    /**
     * The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change.
     */
    readonly list_id?: string;
    /**
     * The name of the store.
     */
    name?: string;
    /**
     * The e-commerce platform of the store.
     */
    platform?: string;
    /**
     * The store domain.  The store domain must be unique within a user account.
     */
    domain?: string;
    /**
     * Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations).
     */
    is_syncing?: boolean;
    /**
     * The email address for the store.
     */
    email_address?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the store accepts.
     */
    currency_code?: string;
    /**
     * The currency format for the store. For example: `$`, `£`, etc.
     */
    money_format?: string;
    /**
     * The primary locale for the store. For example: `en`, `de`, etc.
     */
    primary_locale?: string;
    /**
     * The timezone for the store.
     */
    timezone?: string;
    /**
     * The store phone number.
     */
    phone?: string;
    /**
     * The store address.
     */
    address?: {
        /**
         * The store's mailing address.
         */
        address1?: string;
        /**
         * An additional field for the store's mailing address.
         */
        address2?: string;
        /**
         * The city the store is located in.
         */
        city?: string;
        /**
         * The store's state name or normalized province.
         */
        province?: string;
        /**
         * The two-letter code for the store's province or state.
         */
        province_code?: string;
        /**
         * The store's postal or zip code.
         */
        postal_code?: string;
        /**
         * The store's country.
         */
        country?: string;
        /**
         * The two-letter code for to the store's country.
         */
        country_code?: string;
        /**
         * The longitude of the store location.
         */
        longitude?: number;
        /**
         * The latitude of the store location.
         */
        latitude?: number;
    };
    /**
     * The Connected Site associated with the store.
     */
    readonly connected_site?: {
        /**
         * The unique identifier for the connected site.
         */
        readonly site_foreign_id?: string;
        /**
         * The script used to connect your site with Mailchimp.
         */
        readonly site_script?: {
            /**
             * The URL used for any integrations that offer built-in support for connected sites.
             */
            readonly url?: string;
            /**
             * A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
             */
            readonly fragment?: string;
        };
    };
    /**
     * Details for the automations attached to this store.
     */
    readonly automations?: {
        /**
         * abandonedCart automation details.
         */
        readonly abandoned_cart?: {
            /**
             * Whether this store supports the abandonedCart automation.
             */
            readonly is_supported?: boolean;
            /**
             * Unique ID of automation parent campaign.
             */
            readonly id?: string;
            /**
             * Status of the abandonedCart automation.
             */
            readonly status?: 'save' | 'sending' | 'paused';
        };
        /**
         * abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web.
         */
        readonly abandoned_browse?: {
            /**
             * Whether this store supports the abandonedBrowse automation.
             */
            readonly is_supported?: boolean;
            /**
             * Unique ID of automation parent campaign.
             */
            readonly id?: string;
            /**
             * Status of the abandonedBrowse automation.
             */
            readonly status?: 'save' | 'sending' | 'paused';
        };
    };
    /**
     * The status of the list connected to the store, namely if it's deleted or disabled.
     */
    readonly list_is_active?: boolean;
    /**
     * The date and time the store was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the store was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdData = {
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdResponse = (unknown);

export type DeleteEcommerceStoresIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdCartsData = {
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdCartsResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * An array of objects, each representing a cart.
     */
    carts?: Array<{
        /**
         * A unique identifier for the cart.
         */
        readonly id?: string;
        /**
         * Information about a specific customer.
         */
        customer?: {
            /**
             * A unique identifier for the customer.
             */
            readonly id?: string;
            /**
             * The customer's email address.
             */
            readonly email_address?: string;
            /**
             * A US phone number for SMS contact.
             */
            sms_phone_number?: string;
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's total order count.
             */
            readonly orders_count?: number;
            /**
             * The total amount the customer has spent.
             */
            readonly total_spent?: number;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
            /**
             * The date and time the customer was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The date and time the customer was last updated in ISO 8601 format.
             */
            readonly updated_at?: string;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        };
        /**
         * A string that uniquely identifies the campaign associated with a cart.
         */
        campaign_id?: string;
        /**
         * The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.
         */
        checkout_url?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the cart uses.
         */
        currency_code?: string;
        /**
         * The order total for the cart.
         */
        order_total?: number;
        /**
         * The total tax for the cart.
         */
        tax_total?: number;
        /**
         * An array of the cart's line items.
         */
        lines?: Array<{
            /**
             * A unique identifier for the cart line item.
             */
            readonly id?: string;
            /**
             * A unique identifier for the product associated with the cart line item.
             */
            product_id?: string;
            /**
             * The name of the product for the cart line item.
             */
            readonly product_title?: string;
            /**
             * A unique identifier for the product variant associated with the cart line item.
             */
            product_variant_id?: string;
            /**
             * The name of the product variant for the cart line item.
             */
            readonly product_variant_title?: string;
            /**
             * The quantity of a cart line item.
             */
            quantity?: number;
            /**
             * The price of a cart line item.
             */
            price?: number;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        }>;
        /**
         * The date and time the cart was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the cart was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdCartsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdCartsData = {
    body: {
        /**
         * A unique identifier for the cart.
         */
        id: string;
        /**
         * Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body.
         */
        customer: {
            /**
             * A unique identifier for the customer. Limited to 50 characters.
             */
            id: string;
            /**
             * The customer's email address.
             */
            email_address?: string;
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
        };
        /**
         * A string that uniquely identifies the campaign for a cart.
         */
        campaign_id?: string;
        /**
         * The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.
         */
        checkout_url?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the cart uses.
         */
        currency_code: string;
        /**
         * The order total for the cart.
         */
        order_total: number;
        /**
         * The total tax for the cart.
         */
        tax_total?: number;
        /**
         * An array of the cart's line items.
         */
        lines: Array<{
            /**
             * A unique identifier for the cart line item.
             */
            id: string;
            /**
             * A unique identifier for the product associated with the cart line item.
             */
            product_id: string;
            /**
             * A unique identifier for the product variant associated with the cart line item.
             */
            product_variant_id: string;
            /**
             * The quantity of a cart line item.
             */
            quantity: number;
            /**
             * The price of a cart line item.
             */
            price: number;
        }>;
    };
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdCartsResponse = ({
    /**
     * A unique identifier for the cart.
     */
    readonly id?: string;
    /**
     * Information about a specific customer.
     */
    customer?: {
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    };
    /**
     * A string that uniquely identifies the campaign associated with a cart.
     */
    campaign_id?: string;
    /**
     * The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.
     */
    checkout_url?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the cart uses.
     */
    currency_code?: string;
    /**
     * The order total for the cart.
     */
    order_total?: number;
    /**
     * The total tax for the cart.
     */
    tax_total?: number;
    /**
     * An array of the cart's line items.
     */
    lines?: Array<{
        /**
         * A unique identifier for the cart line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with the cart line item.
         */
        product_id?: string;
        /**
         * The name of the product for the cart line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with the cart line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for the cart line item.
         */
        readonly product_variant_title?: string;
        /**
         * The quantity of a cart line item.
         */
        quantity?: number;
        /**
         * The price of a cart line item.
         */
        price?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The date and time the cart was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the cart was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdCartsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdCartsIdData = {
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdCartsIdResponse = ({
    /**
     * A unique identifier for the cart.
     */
    readonly id?: string;
    /**
     * Information about a specific customer.
     */
    customer?: {
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    };
    /**
     * A string that uniquely identifies the campaign associated with a cart.
     */
    campaign_id?: string;
    /**
     * The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.
     */
    checkout_url?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the cart uses.
     */
    currency_code?: string;
    /**
     * The order total for the cart.
     */
    order_total?: number;
    /**
     * The total tax for the cart.
     */
    tax_total?: number;
    /**
     * An array of the cart's line items.
     */
    lines?: Array<{
        /**
         * A unique identifier for the cart line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with the cart line item.
         */
        product_id?: string;
        /**
         * The name of the product for the cart line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with the cart line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for the cart line item.
         */
        readonly product_variant_title?: string;
        /**
         * The quantity of a cart line item.
         */
        quantity?: number;
        /**
         * The price of a cart line item.
         */
        price?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The date and time the cart was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the cart was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdCartsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdCartsIdData = {
    body: {
        /**
         * Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body.
         */
        customer?: {
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
        };
        /**
         * A string that uniquely identifies the campaign associated with a cart.
         */
        campaign_id?: string;
        /**
         * The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.
         */
        checkout_url?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the cart uses.
         */
        currency_code?: string;
        /**
         * The order total for the cart.
         */
        order_total?: number;
        /**
         * The total tax for the cart.
         */
        tax_total?: number;
        /**
         * An array of the cart's line items.
         */
        lines?: Array<{
            /**
             * A unique identifier for the product associated with the cart line item.
             */
            product_id?: string;
            /**
             * A unique identifier for the product variant associated with the cart line item.
             */
            product_variant_id?: string;
            /**
             * The quantity of a cart line item.
             */
            quantity?: number;
            /**
             * The price of a cart line item.
             */
            price?: number;
        }>;
    };
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdCartsIdResponse = ({
    /**
     * A unique identifier for the cart.
     */
    readonly id?: string;
    /**
     * Information about a specific customer.
     */
    customer?: {
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    };
    /**
     * A string that uniquely identifies the campaign associated with a cart.
     */
    campaign_id?: string;
    /**
     * The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.
     */
    checkout_url?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the cart uses.
     */
    currency_code?: string;
    /**
     * The order total for the cart.
     */
    order_total?: number;
    /**
     * The total tax for the cart.
     */
    tax_total?: number;
    /**
     * An array of the cart's line items.
     */
    lines?: Array<{
        /**
         * A unique identifier for the cart line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with the cart line item.
         */
        product_id?: string;
        /**
         * The name of the product for the cart line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with the cart line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for the cart line item.
         */
        readonly product_variant_title?: string;
        /**
         * The quantity of a cart line item.
         */
        quantity?: number;
        /**
         * The price of a cart line item.
         */
        price?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The date and time the cart was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the cart was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdCartsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdCartsIdData = {
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdCartsIdResponse = (void);

export type DeleteEcommerceStoresIdCartsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdCartsIdLinesData = {
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdCartsIdLinesResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * The cart id.
     */
    cart_id?: string;
    /**
     * An array of objects, each representing a cart's line item.
     */
    lines?: Array<{
        /**
         * A unique identifier for the cart line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with the cart line item.
         */
        product_id?: string;
        /**
         * The name of the product for the cart line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with the cart line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for the cart line item.
         */
        readonly product_variant_title?: string;
        /**
         * The quantity of a cart line item.
         */
        quantity?: number;
        /**
         * The price of a cart line item.
         */
        price?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdCartsIdLinesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdCartsIdLinesData = {
    body: {
        /**
         * A unique identifier for the cart line item.
         */
        id: string;
        /**
         * A unique identifier for the product associated with the cart line item.
         */
        product_id: string;
        /**
         * A unique identifier for the product variant associated with the cart line item.
         */
        product_variant_id: string;
        /**
         * The quantity of a cart line item.
         */
        quantity: number;
        /**
         * The price of a cart line item.
         */
        price: number;
    };
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdCartsIdLinesResponse = ({
    /**
     * A unique identifier for the cart line item.
     */
    readonly id?: string;
    /**
     * A unique identifier for the product associated with the cart line item.
     */
    product_id?: string;
    /**
     * The name of the product for the cart line item.
     */
    readonly product_title?: string;
    /**
     * A unique identifier for the product variant associated with the cart line item.
     */
    product_variant_id?: string;
    /**
     * The name of the product variant for the cart line item.
     */
    readonly product_variant_title?: string;
    /**
     * The quantity of a cart line item.
     */
    quantity?: number;
    /**
     * The price of a cart line item.
     */
    price?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdCartsIdLinesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdCartsIdLinesIdData = {
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The id for the line item of a cart.
         */
        line_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdCartsIdLinesIdResponse = ({
    /**
     * A unique identifier for the cart line item.
     */
    readonly id?: string;
    /**
     * A unique identifier for the product associated with the cart line item.
     */
    product_id?: string;
    /**
     * The name of the product for the cart line item.
     */
    readonly product_title?: string;
    /**
     * A unique identifier for the product variant associated with the cart line item.
     */
    product_variant_id?: string;
    /**
     * The name of the product variant for the cart line item.
     */
    readonly product_variant_title?: string;
    /**
     * The quantity of a cart line item.
     */
    quantity?: number;
    /**
     * The price of a cart line item.
     */
    price?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdCartsIdLinesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdCartsIdLinesIdData = {
    body: {
        /**
         * A unique identifier for the product associated with the cart line item.
         */
        product_id?: string;
        /**
         * A unique identifier for the product variant associated with the cart line item.
         */
        product_variant_id?: string;
        /**
         * The quantity of a cart line item.
         */
        quantity?: number;
        /**
         * The price of a cart line item.
         */
        price?: number;
    };
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The id for the line item of a cart.
         */
        line_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdCartsIdLinesIdResponse = ({
    /**
     * A unique identifier for the cart line item.
     */
    readonly id?: string;
    /**
     * A unique identifier for the product associated with the cart line item.
     */
    product_id?: string;
    /**
     * The name of the product for the cart line item.
     */
    readonly product_title?: string;
    /**
     * A unique identifier for the product variant associated with the cart line item.
     */
    product_variant_id?: string;
    /**
     * The name of the product variant for the cart line item.
     */
    readonly product_variant_title?: string;
    /**
     * The quantity of a cart line item.
     */
    quantity?: number;
    /**
     * The price of a cart line item.
     */
    price?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdCartsIdLinesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdCartsLinesIdData = {
    path: {
        /**
         * The id for the cart.
         */
        cart_id: string;
        /**
         * The id for the line item of a cart.
         */
        line_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdCartsLinesIdResponse = (void);

export type DeleteEcommerceStoresIdCartsLinesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdCustomersData = {
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * Restrict the response to customers with the email address.
         */
        email_address?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdCustomersResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * An array of objects, each representing a customer of a store.
     */
    customers?: Array<{
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdCustomersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdCustomersData = {
    body: {
        /**
         * A unique identifier for the customer. Limited to 50 characters.
         */
        id: string;
        /**
         * The customer's email address.
         */
        email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
    };
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdCustomersResponse = ({
    /**
     * A unique identifier for the customer.
     */
    readonly id?: string;
    /**
     * The customer's email address.
     */
    readonly email_address?: string;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
     */
    opt_in_status?: boolean;
    /**
     * The customer's company.
     */
    company?: string;
    /**
     * The customer's first name.
     */
    first_name?: string;
    /**
     * The customer's last name.
     */
    last_name?: string;
    /**
     * The customer's total order count.
     */
    readonly orders_count?: number;
    /**
     * The total amount the customer has spent.
     */
    readonly total_spent?: number;
    /**
     * The customer's address.
     */
    address?: {
        /**
         * The mailing address of the customer.
         */
        address1?: string;
        /**
         * An additional field for the customer's mailing address.
         */
        address2?: string;
        /**
         * The city the customer is located in.
         */
        city?: string;
        /**
         * The customer's state name or normalized province.
         */
        province?: string;
        /**
         * The two-letter code for the customer's province or state.
         */
        province_code?: string;
        /**
         * The customer's postal or zip code.
         */
        postal_code?: string;
        /**
         * The customer's country.
         */
        country?: string;
        /**
         * The two-letter code for the customer's country.
         */
        country_code?: string;
    };
    /**
     * The date and time the customer was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the customer was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdCustomersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdCustomersIdData = {
    path: {
        /**
         * The id for the customer of a store.
         */
        customer_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdCustomersIdResponse = ({
    /**
     * A unique identifier for the customer.
     */
    readonly id?: string;
    /**
     * The customer's email address.
     */
    readonly email_address?: string;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
     */
    opt_in_status?: boolean;
    /**
     * The customer's company.
     */
    company?: string;
    /**
     * The customer's first name.
     */
    first_name?: string;
    /**
     * The customer's last name.
     */
    last_name?: string;
    /**
     * The customer's total order count.
     */
    readonly orders_count?: number;
    /**
     * The total amount the customer has spent.
     */
    readonly total_spent?: number;
    /**
     * The customer's address.
     */
    address?: {
        /**
         * The mailing address of the customer.
         */
        address1?: string;
        /**
         * An additional field for the customer's mailing address.
         */
        address2?: string;
        /**
         * The city the customer is located in.
         */
        city?: string;
        /**
         * The customer's state name or normalized province.
         */
        province?: string;
        /**
         * The two-letter code for the customer's province or state.
         */
        province_code?: string;
        /**
         * The customer's postal or zip code.
         */
        postal_code?: string;
        /**
         * The customer's country.
         */
        country?: string;
        /**
         * The two-letter code for the customer's country.
         */
        country_code?: string;
    };
    /**
     * The date and time the customer was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the customer was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdCustomersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PutEcommerceStoresIdCustomersIdData = {
    body: {
        /**
         * A unique identifier for the customer. Limited to 50 characters.
         */
        id: string;
        /**
         * The customer's email address.
         */
        email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
    };
    path: {
        /**
         * The id for the customer of a store.
         */
        customer_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PutEcommerceStoresIdCustomersIdResponse = ({
    /**
     * A unique identifier for the customer.
     */
    readonly id?: string;
    /**
     * The customer's email address.
     */
    readonly email_address?: string;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
     */
    opt_in_status?: boolean;
    /**
     * The customer's company.
     */
    company?: string;
    /**
     * The customer's first name.
     */
    first_name?: string;
    /**
     * The customer's last name.
     */
    last_name?: string;
    /**
     * The customer's total order count.
     */
    readonly orders_count?: number;
    /**
     * The total amount the customer has spent.
     */
    readonly total_spent?: number;
    /**
     * The customer's address.
     */
    address?: {
        /**
         * The mailing address of the customer.
         */
        address1?: string;
        /**
         * An additional field for the customer's mailing address.
         */
        address2?: string;
        /**
         * The city the customer is located in.
         */
        city?: string;
        /**
         * The customer's state name or normalized province.
         */
        province?: string;
        /**
         * The two-letter code for the customer's province or state.
         */
        province_code?: string;
        /**
         * The customer's postal or zip code.
         */
        postal_code?: string;
        /**
         * The customer's country.
         */
        country?: string;
        /**
         * The two-letter code for the customer's country.
         */
        country_code?: string;
    };
    /**
     * The date and time the customer was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the customer was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PutEcommerceStoresIdCustomersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdCustomersIdData = {
    body: {
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
    };
    path: {
        /**
         * The id for the customer of a store.
         */
        customer_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdCustomersIdResponse = ({
    /**
     * A unique identifier for the customer.
     */
    readonly id?: string;
    /**
     * The customer's email address.
     */
    readonly email_address?: string;
    /**
     * A US phone number for SMS contact.
     */
    sms_phone_number?: string;
    /**
     * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
     */
    opt_in_status?: boolean;
    /**
     * The customer's company.
     */
    company?: string;
    /**
     * The customer's first name.
     */
    first_name?: string;
    /**
     * The customer's last name.
     */
    last_name?: string;
    /**
     * The customer's total order count.
     */
    readonly orders_count?: number;
    /**
     * The total amount the customer has spent.
     */
    readonly total_spent?: number;
    /**
     * The customer's address.
     */
    address?: {
        /**
         * The mailing address of the customer.
         */
        address1?: string;
        /**
         * An additional field for the customer's mailing address.
         */
        address2?: string;
        /**
         * The city the customer is located in.
         */
        city?: string;
        /**
         * The customer's state name or normalized province.
         */
        province?: string;
        /**
         * The two-letter code for the customer's province or state.
         */
        province_code?: string;
        /**
         * The customer's postal or zip code.
         */
        postal_code?: string;
        /**
         * The customer's country.
         */
        country?: string;
        /**
         * The two-letter code for the customer's country.
         */
        country_code?: string;
    };
    /**
     * The date and time the customer was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the customer was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdCustomersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdCustomersIdData = {
    path: {
        /**
         * The id for the customer of a store.
         */
        customer_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdCustomersIdResponse = (void);

export type DeleteEcommerceStoresIdCustomersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdPromorulesData = {
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdPromorulesResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * An array of objects, each representing promo rules defined for a store.
     */
    promo_rules?: Array<{
        /**
         * A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50.
         */
        readonly id?: string;
        /**
         * The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes.
         */
        title?: string;
        /**
         * The description of a promotion restricted to UTF-8 characters with max length 255.
         */
        description?: string;
        /**
         * The date and time when the promotion is in effect in ISO 8601 format.
         */
        starts_at?: string;
        /**
         * The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format.
         */
        ends_at?: string;
        /**
         * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
         */
        amount?: number;
        /**
         * Type of discount. For free shipping set type to fixed.
         */
        type?: 'fixed' | 'percentage';
        /**
         * The target that the discount applies to.
         */
        target?: 'per_item' | 'total' | 'shipping';
        /**
         * Whether the promo rule is currently enabled.
         */
        enabled?: boolean;
        /**
         * The date and time the promotion was created in ISO 8601 format.
         */
        created_at_foreign?: string;
        /**
         * The date and time the promotion was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdPromorulesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdPromorulesData = {
    body: {
        /**
         * A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50.
         */
        id: string;
        /**
         * The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes.
         */
        title?: string;
        /**
         * The description of a promotion restricted to UTF-8 characters with max length 255.
         */
        description: string;
        /**
         * The date and time when the promotion is in effect in ISO 8601 format.
         */
        starts_at?: string;
        /**
         * The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format.
         */
        ends_at?: string;
        /**
         * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
         */
        amount: number;
        /**
         * Type of discount. For free shipping set type to fixed.
         */
        type: 'fixed' | 'percentage';
        /**
         * The target that the discount applies to.
         */
        target: 'per_item' | 'total' | 'shipping';
        /**
         * Whether the promo rule is currently enabled.
         */
        enabled?: boolean;
        /**
         * The date and time the promotion was created in ISO 8601 format.
         */
        created_at_foreign?: string;
        /**
         * The date and time the promotion was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
    };
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdPromorulesResponse = ({
    /**
     * A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50.
     */
    readonly id?: string;
    /**
     * The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes.
     */
    title?: string;
    /**
     * The description of a promotion restricted to UTF-8 characters with max length 255.
     */
    description?: string;
    /**
     * The date and time when the promotion is in effect in ISO 8601 format.
     */
    starts_at?: string;
    /**
     * The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format.
     */
    ends_at?: string;
    /**
     * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
     */
    amount?: number;
    /**
     * Type of discount. For free shipping set type to fixed.
     */
    type?: 'fixed' | 'percentage';
    /**
     * The target that the discount applies to.
     */
    target?: 'per_item' | 'total' | 'shipping';
    /**
     * Whether the promo rule is currently enabled.
     */
    enabled?: boolean;
    /**
     * The date and time the promotion was created in ISO 8601 format.
     */
    created_at_foreign?: string;
    /**
     * The date and time the promotion was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdPromorulesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdPromorulesIdData = {
    path: {
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdPromorulesIdResponse = ({
    /**
     * A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50.
     */
    readonly id?: string;
    /**
     * The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes.
     */
    title?: string;
    /**
     * The description of a promotion restricted to UTF-8 characters with max length 255.
     */
    description?: string;
    /**
     * The date and time when the promotion is in effect in ISO 8601 format.
     */
    starts_at?: string;
    /**
     * The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format.
     */
    ends_at?: string;
    /**
     * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
     */
    amount?: number;
    /**
     * Type of discount. For free shipping set type to fixed.
     */
    type?: 'fixed' | 'percentage';
    /**
     * The target that the discount applies to.
     */
    target?: 'per_item' | 'total' | 'shipping';
    /**
     * Whether the promo rule is currently enabled.
     */
    enabled?: boolean;
    /**
     * The date and time the promotion was created in ISO 8601 format.
     */
    created_at_foreign?: string;
    /**
     * The date and time the promotion was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdPromorulesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdPromorulesIdData = {
    body: {
        /**
         * The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes.
         */
        title?: string;
        /**
         * The description of a promotion restricted to UTF-8 characters with max length 255.
         */
        description?: string;
        /**
         * The date and time when the promotion is in effect in ISO 8601 format.
         */
        starts_at?: string;
        /**
         * The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format.
         */
        ends_at?: string;
        /**
         * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
         */
        amount?: number;
        /**
         * Type of discount. For free shipping set type to fixed.
         */
        type?: 'fixed' | 'percentage';
        /**
         * The target that the discount applies to.
         */
        target?: 'per_item' | 'total' | 'shipping';
        /**
         * Whether the promo rule is currently enabled.
         */
        enabled?: boolean;
        /**
         * The date and time the promotion was created in ISO 8601 format.
         */
        created_at_foreign?: string;
        /**
         * The date and time the promotion was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
    };
    path: {
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdPromorulesIdResponse = ({
    /**
     * A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50.
     */
    readonly id?: string;
    /**
     * The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes.
     */
    title?: string;
    /**
     * The description of a promotion restricted to UTF-8 characters with max length 255.
     */
    description?: string;
    /**
     * The date and time when the promotion is in effect in ISO 8601 format.
     */
    starts_at?: string;
    /**
     * The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format.
     */
    ends_at?: string;
    /**
     * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
     */
    amount?: number;
    /**
     * Type of discount. For free shipping set type to fixed.
     */
    type?: 'fixed' | 'percentage';
    /**
     * The target that the discount applies to.
     */
    target?: 'per_item' | 'total' | 'shipping';
    /**
     * Whether the promo rule is currently enabled.
     */
    enabled?: boolean;
    /**
     * The date and time the promotion was created in ISO 8601 format.
     */
    created_at_foreign?: string;
    /**
     * The date and time the promotion was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdPromorulesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdPromorulesIdData = {
    path: {
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdPromorulesIdResponse = (void);

export type DeleteEcommerceStoresIdPromorulesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdPromocodesData = {
    path: {
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdPromocodesResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * An array of objects, each representing promo codes defined for a store.
     */
    promo_codes?: Array<{
        /**
         * A unique identifier for the promo Code.
         */
        readonly id?: string;
        /**
         * The discount code. Restricted to UTF-8 characters with max length 50.
         */
        code?: string;
        /**
         * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
         */
        redemption_url?: string;
        /**
         * Number of times promo code has been used.
         */
        usage_count?: number;
        /**
         * Whether the promo code is currently enabled.
         */
        enabled?: boolean;
        /**
         * The date and time the promotion was created in ISO 8601 format.
         */
        created_at_foreign?: string;
        /**
         * The date and time the promotion was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdPromocodesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdPromocodesData = {
    body: {
        /**
         * A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50.
         */
        id: string;
        /**
         * The discount code. Restricted to UTF-8 characters with max length 50.
         */
        code: string;
        /**
         * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
         */
        redemption_url: string;
        /**
         * Number of times promo code has been used.
         */
        usage_count?: number;
        /**
         * Whether the promo code is currently enabled.
         */
        enabled?: boolean;
        /**
         * The date and time the promotion was created in ISO 8601 format.
         */
        created_at_foreign?: string;
        /**
         * The date and time the promotion was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
    };
    path: {
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdPromocodesResponse = ({
    /**
     * A unique identifier for the promo Code.
     */
    readonly id?: string;
    /**
     * The discount code. Restricted to UTF-8 characters with max length 50.
     */
    code?: string;
    /**
     * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
     */
    redemption_url?: string;
    /**
     * Number of times promo code has been used.
     */
    usage_count?: number;
    /**
     * Whether the promo code is currently enabled.
     */
    enabled?: boolean;
    /**
     * The date and time the promotion was created in ISO 8601 format.
     */
    created_at_foreign?: string;
    /**
     * The date and time the promotion was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdPromocodesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdPromocodesIdData = {
    path: {
        /**
         * The id for the promo code of a store.
         */
        promo_code_id: string;
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdPromocodesIdResponse = ({
    /**
     * A unique identifier for the promo Code.
     */
    readonly id?: string;
    /**
     * The discount code. Restricted to UTF-8 characters with max length 50.
     */
    code?: string;
    /**
     * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
     */
    redemption_url?: string;
    /**
     * Number of times promo code has been used.
     */
    usage_count?: number;
    /**
     * Whether the promo code is currently enabled.
     */
    enabled?: boolean;
    /**
     * The date and time the promotion was created in ISO 8601 format.
     */
    created_at_foreign?: string;
    /**
     * The date and time the promotion was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdPromocodesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdPromocodesIdData = {
    body: {
        /**
         * The discount code. Restricted to UTF-8 characters with max length 50.
         */
        code?: string;
        /**
         * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
         */
        redemption_url?: string;
        /**
         * Number of times promo code has been used.
         */
        usage_count?: number;
        /**
         * Whether the promo code is currently enabled.
         */
        enabled?: boolean;
        /**
         * The date and time the promotion was created in ISO 8601 format.
         */
        created_at_foreign?: string;
        /**
         * The date and time the promotion was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
    };
    path: {
        /**
         * The id for the promo code of a store.
         */
        promo_code_id: string;
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdPromocodesIdResponse = ({
    /**
     * A unique identifier for the promo Code.
     */
    readonly id?: string;
    /**
     * The discount code. Restricted to UTF-8 characters with max length 50.
     */
    code?: string;
    /**
     * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
     */
    redemption_url?: string;
    /**
     * Number of times promo code has been used.
     */
    usage_count?: number;
    /**
     * Whether the promo code is currently enabled.
     */
    enabled?: boolean;
    /**
     * The date and time the promotion was created in ISO 8601 format.
     */
    created_at_foreign?: string;
    /**
     * The date and time the promotion was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdPromocodesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdPromocodesIdData = {
    path: {
        /**
         * The id for the promo code of a store.
         */
        promo_code_id: string;
        /**
         * The id for the promo rule of a store.
         */
        promo_rule_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdPromocodesIdResponse = (void);

export type DeleteEcommerceStoresIdPromocodesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdOrdersData = {
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * Restrict results to orders with a specific `campaign_id` value.
         */
        campaign_id?: string;
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * Restrict results to orders made by a specific customer.
         */
        customer_id?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
         */
        has_outreach?: boolean;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Restrict results to orders with a specific `outreach_id` value.
         */
        outreach_id?: string;
    };
};

export type GetEcommerceStoresIdOrdersResponse = ({
    /**
     * The unique identifier for the store.
     */
    store_id?: string;
    /**
     * An array of objects, each representing an order in a store.
     */
    orders?: Array<{
        /**
         * A unique identifier for the order.
         */
        readonly id?: string;
        /**
         * Information about a specific customer.
         */
        customer?: {
            /**
             * A unique identifier for the customer.
             */
            readonly id?: string;
            /**
             * The customer's email address.
             */
            readonly email_address?: string;
            /**
             * A US phone number for SMS contact.
             */
            sms_phone_number?: string;
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's total order count.
             */
            readonly orders_count?: number;
            /**
             * The total amount the customer has spent.
             */
            readonly total_spent?: number;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
            /**
             * The date and time the customer was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The date and time the customer was last updated in ISO 8601 format.
             */
            readonly updated_at?: string;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        };
        /**
         * The unique identifier for the store.
         */
        readonly store_id?: string;
        /**
         * A string that uniquely identifies the campaign associated with an order.
         */
        campaign_id?: string;
        /**
         * The URL for the page where the buyer landed when entering the shop.
         */
        landing_site?: string;
        /**
         * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        financial_status?: string;
        /**
         * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        fulfillment_status?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code?: string;
        /**
         * The order total associated with an order.
         */
        order_total?: number;
        /**
         * The URL for the order.
         */
        order_url?: string;
        /**
         * The total amount of the discounts to be applied to the price of the order.
         */
        discount_total?: number;
        /**
         * The tax total associated with an order.
         */
        tax_total?: number;
        /**
         * The shipping total for the order.
         */
        shipping_total?: number;
        /**
         * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
         */
        tracking_code?: 'prec';
        /**
         * The date and time the order was processed in ISO 8601 format.
         */
        processed_at_foreign?: string;
        /**
         * The date and time the order was cancelled in ISO 8601 format.
         */
        cancelled_at_foreign?: string;
        /**
         * The date and time the order was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
        /**
         * The shipping address for the order.
         */
        shipping_address?: {
            /**
             * The name associated with an order's shipping address.
             */
            name?: string;
            /**
             * The shipping address for the order.
             */
            address1?: string;
            /**
             * An additional field for the shipping address.
             */
            address2?: string;
            /**
             * The city in the order's shipping address.
             */
            city?: string;
            /**
             * The state or normalized province in the order's shipping address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state the order's shipping address is located in.
             */
            province_code?: string;
            /**
             * The postal or zip code in the order's shipping address.
             */
            postal_code?: string;
            /**
             * The country in the order's shipping address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the shipping address.
             */
            country_code?: string;
            /**
             * The longitude for the shipping address location.
             */
            longitude?: number;
            /**
             * The latitude for the shipping address location.
             */
            latitude?: number;
            /**
             * The phone number for the order's shipping address
             */
            phone?: string;
            /**
             * The company associated with an order's shipping address.
             */
            company?: string;
        };
        /**
         * The billing address for the order.
         */
        billing_address?: {
            /**
             * The name associated with an order's billing address.
             */
            name?: string;
            /**
             * The billing address for the order.
             */
            address1?: string;
            /**
             * An additional field for the billing address.
             */
            address2?: string;
            /**
             * The city in the billing address.
             */
            city?: string;
            /**
             * The state or normalized province in the billing address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state in the billing address.
             */
            province_code?: string;
            /**
             * The postal or zip code in the billing address.
             */
            postal_code?: string;
            /**
             * The country in the billing address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the billing address.
             */
            country_code?: string;
            /**
             * The longitude for the billing address location.
             */
            longitude?: number;
            /**
             * The latitude for the billing address location.
             */
            latitude?: number;
            /**
             * The phone number for the billing address.
             */
            phone?: string;
            /**
             * The company associated with the billing address.
             */
            company?: string;
        };
        /**
         * The promo codes applied on the order
         */
        promos?: Array<{
            /**
             * The Promo Code
             */
            code?: string;
            /**
             * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
             */
            amount_discounted?: number;
            /**
             * Type of discount. For free shipping set type to fixed
             */
            type?: 'fixed' | 'percentage';
        }>;
        /**
         * An array of the order's line items.
         */
        lines?: Array<{
            /**
             * A unique identifier for an order line item.
             */
            readonly id?: string;
            /**
             * A unique identifier for the product associated with an order line item.
             */
            product_id?: string;
            /**
             * The name of the product for an order line item.
             */
            readonly product_title?: string;
            /**
             * A unique identifier for the product variant associated with an order line item.
             */
            product_variant_id?: string;
            /**
             * The name of the product variant for an order line item.
             */
            readonly product_variant_title?: string;
            /**
             * The image URL for a product.
             */
            readonly image_url?: string;
            /**
             * The order line item quantity.
             */
            quantity?: number;
            /**
             * The order line item price.
             */
            price?: number;
            /**
             * The total discount amount applied to a line item.
             */
            discount?: number;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        }>;
        /**
         * The outreach associated with this order. For example, an email campaign or Facebook ad.
         */
        outreach?: {
            /**
             * A unique identifier for the outreach. Can be an email campaign ID.
             */
            id?: string;
            /**
             * The name for the outreach.
             */
            readonly name?: string;
            /**
             * The type of the outreach.
             */
            readonly type?: string;
            /**
             * The date and time the Outreach was published in ISO 8601 format.
             */
            readonly published_time?: string;
        };
        /**
         * The tracking number associated with the order.
         */
        tracking_number?: string;
        /**
         * The tracking carrier associated with the order.
         */
        tracking_carrier?: string;
        /**
         * The tracking URL associated with the order.
         */
        tracking_url?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdOrdersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdOrdersData = {
    body: {
        /**
         * A unique identifier for the order.
         */
        id: string;
        /**
         * Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body.
         */
        customer: {
            /**
             * A unique identifier for the customer. Limited to 50 characters.
             */
            id: string;
            /**
             * The customer's email address.
             */
            email_address?: string;
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
        };
        /**
         * A string that uniquely identifies the campaign for an order.
         */
        campaign_id?: string;
        /**
         * The URL for the page where the buyer landed when entering the shop.
         */
        landing_site?: string;
        /**
         * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        financial_status?: string;
        /**
         * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        fulfillment_status?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code: string;
        /**
         * The total for the order.
         */
        order_total: number;
        /**
         * The URL for the order.
         */
        order_url?: string;
        /**
         * The total amount of the discounts to be applied to the price of the order.
         */
        discount_total?: number;
        /**
         * The tax total for the order.
         */
        tax_total?: number;
        /**
         * The shipping total for the order.
         */
        shipping_total?: number;
        /**
         * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
         */
        tracking_code?: 'prec';
        /**
         * The date and time the order was processed in ISO 8601 format.
         */
        processed_at_foreign?: string;
        /**
         * The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created.
         */
        cancelled_at_foreign?: string;
        /**
         * The date and time the order was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
        /**
         * The shipping address for the order.
         */
        shipping_address?: {
            /**
             * The name associated with an order's shipping address.
             */
            name?: string;
            /**
             * The shipping address for the order.
             */
            address1?: string;
            /**
             * An additional field for the shipping address.
             */
            address2?: string;
            /**
             * The city in the order's shipping address.
             */
            city?: string;
            /**
             * The state or normalized province in the order's shipping address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state in the shipping address.
             */
            province_code?: string;
            /**
             * The postal or zip code in the shipping address.
             */
            postal_code?: string;
            /**
             * The country in the shipping address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the shipping address.
             */
            country_code?: string;
            /**
             * The longitude for the shipping address location.
             */
            longitude?: number;
            /**
             * The latitude for the shipping address location.
             */
            latitude?: number;
            /**
             * The phone number for the order's shipping address.
             */
            phone?: string;
            /**
             * The company associated with the shipping address.
             */
            company?: string;
        };
        /**
         * The billing address for the order.
         */
        billing_address?: {
            /**
             * The name associated with the billing address.
             */
            name?: string;
            /**
             * The billing address for the order.
             */
            address1?: string;
            /**
             * An additional field for the billing address.
             */
            address2?: string;
            /**
             * The city in the billing address.
             */
            city?: string;
            /**
             * The state or normalized province in the billing address.
             */
            province?: string;
            /**
             * The two-letter code for the province in the billing address.
             */
            province_code?: string;
            /**
             * The postal or zip code in the billing address.
             */
            postal_code?: string;
            /**
             * The country in the billing address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the billing address.
             */
            country_code?: string;
            /**
             * The longitude for the billing address location.
             */
            longitude?: number;
            /**
             * The latitude for the billing address location.
             */
            latitude?: number;
            /**
             * The phone number for the billing address
             */
            phone?: string;
            /**
             * The company associated with the billing address.
             */
            company?: string;
        };
        /**
         * The promo codes applied on the order
         */
        promos?: Array<{
            /**
             * The Promo Code
             */
            code: string;
            /**
             * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
             */
            amount_discounted: number;
            /**
             * Type of discount. For free shipping set type to fixed
             */
            type: 'fixed' | 'percentage';
        }>;
        /**
         * An array of the order's line items.
         */
        lines: Array<{
            /**
             * A unique identifier for the order line item.
             */
            id: string;
            /**
             * A unique identifier for the product associated with the order line item.
             */
            product_id: string;
            /**
             * A unique identifier for the product variant associated with the order line item.
             */
            product_variant_id: string;
            /**
             * The quantity of an order line item.
             */
            quantity: number;
            /**
             * The price of an order line item.
             */
            price: number;
            /**
             * The total discount amount applied to this line item.
             */
            discount?: number;
        }>;
        /**
         * The outreach associated with this order. For example, an email campaign or Facebook ad.
         */
        outreach?: {
            /**
             * A unique identifier for the outreach. Can be an email campaign ID.
             */
            id?: string;
        };
        /**
         * The tracking number associated with the order.
         */
        tracking_number?: string;
        /**
         * The tracking carrier associated with the order.
         */
        tracking_carrier?: string;
        /**
         * The tracking URL associated with the order.
         */
        tracking_url?: string;
    };
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdOrdersResponse = ({
    /**
     * A unique identifier for the order.
     */
    readonly id?: string;
    /**
     * Information about a specific customer.
     */
    customer?: {
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    };
    /**
     * The unique identifier for the store.
     */
    readonly store_id?: string;
    /**
     * A string that uniquely identifies the campaign associated with an order.
     */
    campaign_id?: string;
    /**
     * The URL for the page where the buyer landed when entering the shop.
     */
    landing_site?: string;
    /**
     * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    financial_status?: string;
    /**
     * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    fulfillment_status?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the store accepts.
     */
    currency_code?: string;
    /**
     * The order total associated with an order.
     */
    order_total?: number;
    /**
     * The URL for the order.
     */
    order_url?: string;
    /**
     * The total amount of the discounts to be applied to the price of the order.
     */
    discount_total?: number;
    /**
     * The tax total associated with an order.
     */
    tax_total?: number;
    /**
     * The shipping total for the order.
     */
    shipping_total?: number;
    /**
     * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
     */
    tracking_code?: 'prec';
    /**
     * The date and time the order was processed in ISO 8601 format.
     */
    processed_at_foreign?: string;
    /**
     * The date and time the order was cancelled in ISO 8601 format.
     */
    cancelled_at_foreign?: string;
    /**
     * The date and time the order was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * The shipping address for the order.
     */
    shipping_address?: {
        /**
         * The name associated with an order's shipping address.
         */
        name?: string;
        /**
         * The shipping address for the order.
         */
        address1?: string;
        /**
         * An additional field for the shipping address.
         */
        address2?: string;
        /**
         * The city in the order's shipping address.
         */
        city?: string;
        /**
         * The state or normalized province in the order's shipping address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state the order's shipping address is located in.
         */
        province_code?: string;
        /**
         * The postal or zip code in the order's shipping address.
         */
        postal_code?: string;
        /**
         * The country in the order's shipping address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the shipping address.
         */
        country_code?: string;
        /**
         * The longitude for the shipping address location.
         */
        longitude?: number;
        /**
         * The latitude for the shipping address location.
         */
        latitude?: number;
        /**
         * The phone number for the order's shipping address
         */
        phone?: string;
        /**
         * The company associated with an order's shipping address.
         */
        company?: string;
    };
    /**
     * The billing address for the order.
     */
    billing_address?: {
        /**
         * The name associated with an order's billing address.
         */
        name?: string;
        /**
         * The billing address for the order.
         */
        address1?: string;
        /**
         * An additional field for the billing address.
         */
        address2?: string;
        /**
         * The city in the billing address.
         */
        city?: string;
        /**
         * The state or normalized province in the billing address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state in the billing address.
         */
        province_code?: string;
        /**
         * The postal or zip code in the billing address.
         */
        postal_code?: string;
        /**
         * The country in the billing address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the billing address.
         */
        country_code?: string;
        /**
         * The longitude for the billing address location.
         */
        longitude?: number;
        /**
         * The latitude for the billing address location.
         */
        latitude?: number;
        /**
         * The phone number for the billing address.
         */
        phone?: string;
        /**
         * The company associated with the billing address.
         */
        company?: string;
    };
    /**
     * The promo codes applied on the order
     */
    promos?: Array<{
        /**
         * The Promo Code
         */
        code?: string;
        /**
         * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
         */
        amount_discounted?: number;
        /**
         * Type of discount. For free shipping set type to fixed
         */
        type?: 'fixed' | 'percentage';
    }>;
    /**
     * An array of the order's line items.
     */
    lines?: Array<{
        /**
         * A unique identifier for an order line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with an order line item.
         */
        product_id?: string;
        /**
         * The name of the product for an order line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with an order line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for an order line item.
         */
        readonly product_variant_title?: string;
        /**
         * The image URL for a product.
         */
        readonly image_url?: string;
        /**
         * The order line item quantity.
         */
        quantity?: number;
        /**
         * The order line item price.
         */
        price?: number;
        /**
         * The total discount amount applied to a line item.
         */
        discount?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The outreach associated with this order. For example, an email campaign or Facebook ad.
     */
    outreach?: {
        /**
         * A unique identifier for the outreach. Can be an email campaign ID.
         */
        id?: string;
        /**
         * The name for the outreach.
         */
        readonly name?: string;
        /**
         * The type of the outreach.
         */
        readonly type?: string;
        /**
         * The date and time the Outreach was published in ISO 8601 format.
         */
        readonly published_time?: string;
    };
    /**
     * The tracking number associated with the order.
     */
    tracking_number?: string;
    /**
     * The tracking carrier associated with the order.
     */
    tracking_carrier?: string;
    /**
     * The tracking URL associated with the order.
     */
    tracking_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdOrdersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdOrdersIdData = {
    path: {
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdOrdersIdResponse = ({
    /**
     * A unique identifier for the order.
     */
    readonly id?: string;
    /**
     * Information about a specific customer.
     */
    customer?: {
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    };
    /**
     * The unique identifier for the store.
     */
    readonly store_id?: string;
    /**
     * A string that uniquely identifies the campaign associated with an order.
     */
    campaign_id?: string;
    /**
     * The URL for the page where the buyer landed when entering the shop.
     */
    landing_site?: string;
    /**
     * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    financial_status?: string;
    /**
     * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    fulfillment_status?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the store accepts.
     */
    currency_code?: string;
    /**
     * The order total associated with an order.
     */
    order_total?: number;
    /**
     * The URL for the order.
     */
    order_url?: string;
    /**
     * The total amount of the discounts to be applied to the price of the order.
     */
    discount_total?: number;
    /**
     * The tax total associated with an order.
     */
    tax_total?: number;
    /**
     * The shipping total for the order.
     */
    shipping_total?: number;
    /**
     * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
     */
    tracking_code?: 'prec';
    /**
     * The date and time the order was processed in ISO 8601 format.
     */
    processed_at_foreign?: string;
    /**
     * The date and time the order was cancelled in ISO 8601 format.
     */
    cancelled_at_foreign?: string;
    /**
     * The date and time the order was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * The shipping address for the order.
     */
    shipping_address?: {
        /**
         * The name associated with an order's shipping address.
         */
        name?: string;
        /**
         * The shipping address for the order.
         */
        address1?: string;
        /**
         * An additional field for the shipping address.
         */
        address2?: string;
        /**
         * The city in the order's shipping address.
         */
        city?: string;
        /**
         * The state or normalized province in the order's shipping address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state the order's shipping address is located in.
         */
        province_code?: string;
        /**
         * The postal or zip code in the order's shipping address.
         */
        postal_code?: string;
        /**
         * The country in the order's shipping address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the shipping address.
         */
        country_code?: string;
        /**
         * The longitude for the shipping address location.
         */
        longitude?: number;
        /**
         * The latitude for the shipping address location.
         */
        latitude?: number;
        /**
         * The phone number for the order's shipping address
         */
        phone?: string;
        /**
         * The company associated with an order's shipping address.
         */
        company?: string;
    };
    /**
     * The billing address for the order.
     */
    billing_address?: {
        /**
         * The name associated with an order's billing address.
         */
        name?: string;
        /**
         * The billing address for the order.
         */
        address1?: string;
        /**
         * An additional field for the billing address.
         */
        address2?: string;
        /**
         * The city in the billing address.
         */
        city?: string;
        /**
         * The state or normalized province in the billing address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state in the billing address.
         */
        province_code?: string;
        /**
         * The postal or zip code in the billing address.
         */
        postal_code?: string;
        /**
         * The country in the billing address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the billing address.
         */
        country_code?: string;
        /**
         * The longitude for the billing address location.
         */
        longitude?: number;
        /**
         * The latitude for the billing address location.
         */
        latitude?: number;
        /**
         * The phone number for the billing address.
         */
        phone?: string;
        /**
         * The company associated with the billing address.
         */
        company?: string;
    };
    /**
     * The promo codes applied on the order
     */
    promos?: Array<{
        /**
         * The Promo Code
         */
        code?: string;
        /**
         * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
         */
        amount_discounted?: number;
        /**
         * Type of discount. For free shipping set type to fixed
         */
        type?: 'fixed' | 'percentage';
    }>;
    /**
     * An array of the order's line items.
     */
    lines?: Array<{
        /**
         * A unique identifier for an order line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with an order line item.
         */
        product_id?: string;
        /**
         * The name of the product for an order line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with an order line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for an order line item.
         */
        readonly product_variant_title?: string;
        /**
         * The image URL for a product.
         */
        readonly image_url?: string;
        /**
         * The order line item quantity.
         */
        quantity?: number;
        /**
         * The order line item price.
         */
        price?: number;
        /**
         * The total discount amount applied to a line item.
         */
        discount?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The outreach associated with this order. For example, an email campaign or Facebook ad.
     */
    outreach?: {
        /**
         * A unique identifier for the outreach. Can be an email campaign ID.
         */
        id?: string;
        /**
         * The name for the outreach.
         */
        readonly name?: string;
        /**
         * The type of the outreach.
         */
        readonly type?: string;
        /**
         * The date and time the Outreach was published in ISO 8601 format.
         */
        readonly published_time?: string;
    };
    /**
     * The tracking number associated with the order.
     */
    tracking_number?: string;
    /**
     * The tracking carrier associated with the order.
     */
    tracking_carrier?: string;
    /**
     * The tracking URL associated with the order.
     */
    tracking_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdOrdersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PutEcommerceStoresIdOrdersIdData = {
    body: {
        /**
         * A unique identifier for the order.
         */
        id: string;
        /**
         * Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body.
         */
        customer?: {
            /**
             * A unique identifier for the customer. Limited to 50 characters.
             */
            id: string;
            /**
             * The customer's email address.
             */
            email_address?: string;
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
        };
        /**
         * A string that uniquely identifies the campaign for an order.
         */
        campaign_id?: string;
        /**
         * The URL for the page where the buyer landed when entering the shop.
         */
        landing_site?: string;
        /**
         * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        financial_status?: string;
        /**
         * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        fulfillment_status?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code?: string;
        /**
         * The total for the order.
         */
        order_total?: number;
        /**
         * The URL for the order.
         */
        order_url?: string;
        /**
         * The total amount of the discounts to be applied to the price of the order.
         */
        discount_total?: number;
        /**
         * The tax total for the order.
         */
        tax_total?: number;
        /**
         * The shipping total for the order.
         */
        shipping_total?: number;
        /**
         * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
         */
        tracking_code?: 'prec';
        /**
         * The date and time the order was processed in ISO 8601 format.
         */
        processed_at_foreign?: string;
        /**
         * The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created.
         */
        cancelled_at_foreign?: string;
        /**
         * The date and time the order was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
        /**
         * The shipping address for the order.
         */
        shipping_address?: {
            /**
             * The name associated with an order's shipping address.
             */
            name?: string;
            /**
             * The shipping address for the order.
             */
            address1?: string;
            /**
             * An additional field for the shipping address.
             */
            address2?: string;
            /**
             * The city in the order's shipping address.
             */
            city?: string;
            /**
             * The state or normalized province in the order's shipping address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state in the shipping address.
             */
            province_code?: string;
            /**
             * The postal or zip code in the shipping address.
             */
            postal_code?: string;
            /**
             * The country in the shipping address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the shipping address.
             */
            country_code?: string;
            /**
             * The longitude for the shipping address location.
             */
            longitude?: number;
            /**
             * The latitude for the shipping address location.
             */
            latitude?: number;
            /**
             * The phone number for the order's shipping address.
             */
            phone?: string;
            /**
             * The company associated with the shipping address.
             */
            company?: string;
        };
        /**
         * The billing address for the order.
         */
        billing_address?: {
            /**
             * The name associated with the billing address.
             */
            name?: string;
            /**
             * The billing address for the order.
             */
            address1?: string;
            /**
             * An additional field for the billing address.
             */
            address2?: string;
            /**
             * The city in the billing address.
             */
            city?: string;
            /**
             * The state or normalized province in the billing address.
             */
            province?: string;
            /**
             * The two-letter code for the province in the billing address.
             */
            province_code?: string;
            /**
             * The postal or zip code in the billing address.
             */
            postal_code?: string;
            /**
             * The country in the billing address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the billing address.
             */
            country_code?: string;
            /**
             * The longitude for the billing address location.
             */
            longitude?: number;
            /**
             * The latitude for the billing address location.
             */
            latitude?: number;
            /**
             * The phone number for the billing address
             */
            phone?: string;
            /**
             * The company associated with the billing address.
             */
            company?: string;
        };
        /**
         * The promo codes applied on the order
         */
        promos?: Array<{
            /**
             * The Promo Code
             */
            code: string;
            /**
             * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
             */
            amount_discounted: number;
            /**
             * Type of discount. For free shipping set type to fixed
             */
            type: 'fixed' | 'percentage';
        }>;
        /**
         * An array of the order's line items.
         */
        lines?: Array<{
            /**
             * A unique identifier for the order line item.
             */
            id: string;
            /**
             * A unique identifier for the product associated with the order line item.
             */
            product_id?: string;
            /**
             * A unique identifier for the product variant associated with the order line item.
             */
            product_variant_id?: string;
            /**
             * The quantity of an order line item.
             */
            quantity?: number;
            /**
             * The price of an order line item.
             */
            price?: number;
            /**
             * The total discount amount applied to this line item.
             */
            discount?: number;
        }>;
        /**
         * The outreach associated with this order. For example, an email campaign or Facebook ad.
         */
        outreach?: {
            /**
             * A unique identifier for the outreach. Can be an email campaign ID.
             */
            id?: string;
        };
        /**
         * The tracking number associated with the order.
         */
        tracking_number?: string;
        /**
         * The tracking carrier associated with the order.
         */
        tracking_carrier?: string;
        /**
         * The tracking URL associated with the order.
         */
        tracking_url?: string;
    };
    path: {
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PutEcommerceStoresIdOrdersIdResponse = ({
    /**
     * A unique identifier for the order.
     */
    readonly id?: string;
    /**
     * Information about a specific customer.
     */
    customer?: {
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    };
    /**
     * The unique identifier for the store.
     */
    readonly store_id?: string;
    /**
     * A string that uniquely identifies the campaign associated with an order.
     */
    campaign_id?: string;
    /**
     * The URL for the page where the buyer landed when entering the shop.
     */
    landing_site?: string;
    /**
     * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    financial_status?: string;
    /**
     * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    fulfillment_status?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the store accepts.
     */
    currency_code?: string;
    /**
     * The order total associated with an order.
     */
    order_total?: number;
    /**
     * The URL for the order.
     */
    order_url?: string;
    /**
     * The total amount of the discounts to be applied to the price of the order.
     */
    discount_total?: number;
    /**
     * The tax total associated with an order.
     */
    tax_total?: number;
    /**
     * The shipping total for the order.
     */
    shipping_total?: number;
    /**
     * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
     */
    tracking_code?: 'prec';
    /**
     * The date and time the order was processed in ISO 8601 format.
     */
    processed_at_foreign?: string;
    /**
     * The date and time the order was cancelled in ISO 8601 format.
     */
    cancelled_at_foreign?: string;
    /**
     * The date and time the order was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * The shipping address for the order.
     */
    shipping_address?: {
        /**
         * The name associated with an order's shipping address.
         */
        name?: string;
        /**
         * The shipping address for the order.
         */
        address1?: string;
        /**
         * An additional field for the shipping address.
         */
        address2?: string;
        /**
         * The city in the order's shipping address.
         */
        city?: string;
        /**
         * The state or normalized province in the order's shipping address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state the order's shipping address is located in.
         */
        province_code?: string;
        /**
         * The postal or zip code in the order's shipping address.
         */
        postal_code?: string;
        /**
         * The country in the order's shipping address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the shipping address.
         */
        country_code?: string;
        /**
         * The longitude for the shipping address location.
         */
        longitude?: number;
        /**
         * The latitude for the shipping address location.
         */
        latitude?: number;
        /**
         * The phone number for the order's shipping address
         */
        phone?: string;
        /**
         * The company associated with an order's shipping address.
         */
        company?: string;
    };
    /**
     * The billing address for the order.
     */
    billing_address?: {
        /**
         * The name associated with an order's billing address.
         */
        name?: string;
        /**
         * The billing address for the order.
         */
        address1?: string;
        /**
         * An additional field for the billing address.
         */
        address2?: string;
        /**
         * The city in the billing address.
         */
        city?: string;
        /**
         * The state or normalized province in the billing address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state in the billing address.
         */
        province_code?: string;
        /**
         * The postal or zip code in the billing address.
         */
        postal_code?: string;
        /**
         * The country in the billing address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the billing address.
         */
        country_code?: string;
        /**
         * The longitude for the billing address location.
         */
        longitude?: number;
        /**
         * The latitude for the billing address location.
         */
        latitude?: number;
        /**
         * The phone number for the billing address.
         */
        phone?: string;
        /**
         * The company associated with the billing address.
         */
        company?: string;
    };
    /**
     * The promo codes applied on the order
     */
    promos?: Array<{
        /**
         * The Promo Code
         */
        code?: string;
        /**
         * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
         */
        amount_discounted?: number;
        /**
         * Type of discount. For free shipping set type to fixed
         */
        type?: 'fixed' | 'percentage';
    }>;
    /**
     * An array of the order's line items.
     */
    lines?: Array<{
        /**
         * A unique identifier for an order line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with an order line item.
         */
        product_id?: string;
        /**
         * The name of the product for an order line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with an order line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for an order line item.
         */
        readonly product_variant_title?: string;
        /**
         * The image URL for a product.
         */
        readonly image_url?: string;
        /**
         * The order line item quantity.
         */
        quantity?: number;
        /**
         * The order line item price.
         */
        price?: number;
        /**
         * The total discount amount applied to a line item.
         */
        discount?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The outreach associated with this order. For example, an email campaign or Facebook ad.
     */
    outreach?: {
        /**
         * A unique identifier for the outreach. Can be an email campaign ID.
         */
        id?: string;
        /**
         * The name for the outreach.
         */
        readonly name?: string;
        /**
         * The type of the outreach.
         */
        readonly type?: string;
        /**
         * The date and time the Outreach was published in ISO 8601 format.
         */
        readonly published_time?: string;
    };
    /**
     * The tracking number associated with the order.
     */
    tracking_number?: string;
    /**
     * The tracking carrier associated with the order.
     */
    tracking_carrier?: string;
    /**
     * The tracking URL associated with the order.
     */
    tracking_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PutEcommerceStoresIdOrdersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdOrdersIdData = {
    body: {
        /**
         * Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body.
         */
        customer?: {
            /**
             * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
             */
            opt_in_status?: boolean;
            /**
             * The customer's company.
             */
            company?: string;
            /**
             * The customer's first name.
             */
            first_name?: string;
            /**
             * The customer's last name.
             */
            last_name?: string;
            /**
             * The customer's address.
             */
            address?: {
                /**
                 * The mailing address of the customer.
                 */
                address1?: string;
                /**
                 * An additional field for the customer's mailing address.
                 */
                address2?: string;
                /**
                 * The city the customer is located in.
                 */
                city?: string;
                /**
                 * The customer's state name or normalized province.
                 */
                province?: string;
                /**
                 * The two-letter code for the customer's province or state.
                 */
                province_code?: string;
                /**
                 * The customer's postal or zip code.
                 */
                postal_code?: string;
                /**
                 * The customer's country.
                 */
                country?: string;
                /**
                 * The two-letter code for the customer's country.
                 */
                country_code?: string;
            };
        };
        /**
         * A string that uniquely identifies the campaign associated with an order.
         */
        campaign_id?: string;
        /**
         * The URL for the page where the buyer landed when entering the shop.
         */
        landing_site?: string;
        /**
         * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        financial_status?: string;
        /**
         * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
         */
        fulfillment_status?: string;
        /**
         * The three-letter ISO 4217 code for the currency that the store accepts.
         */
        currency_code?: string;
        /**
         * The order total associated with an order.
         */
        order_total?: number;
        /**
         * The URL for the order.
         */
        order_url?: string;
        /**
         * The total amount of the discounts to be applied to the price of the order.
         */
        discount_total?: number;
        /**
         * The tax total associated with an order.
         */
        tax_total?: number;
        /**
         * The shipping total for the order.
         */
        shipping_total?: number;
        /**
         * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
         */
        tracking_code?: 'prec';
        /**
         * The date and time the order was processed in ISO 8601 format.
         */
        processed_at_foreign?: string;
        /**
         * The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited.
         */
        cancelled_at_foreign?: string;
        /**
         * The date and time the order was updated in ISO 8601 format.
         */
        updated_at_foreign?: string;
        /**
         * The shipping address for the order.
         */
        shipping_address?: {
            /**
             * The name associated with an order's shipping address.
             */
            name?: string;
            /**
             * The shipping address for the order.
             */
            address1?: string;
            /**
             * An additional field for the shipping address.
             */
            address2?: string;
            /**
             * The city in the order's shipping address.
             */
            city?: string;
            /**
             * The state or normalized province in the order's shipping address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state the order's shipping address is located in.
             */
            province_code?: string;
            /**
             * The postal or zip code in the order's shipping address.
             */
            postal_code?: string;
            /**
             * The country in the order's shipping address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the shipping address.
             */
            country_code?: string;
            /**
             * The longitude for the shipping address location.
             */
            longitude?: number;
            /**
             * The latitude for the shipping address location.
             */
            latitude?: number;
            /**
             * The phone number for the order's shipping address
             */
            phone?: string;
            /**
             * The company associated with an order's shipping address.
             */
            company?: string;
        };
        /**
         * The billing address for the order.
         */
        billing_address?: {
            /**
             * The name associated with an order's billing address.
             */
            name?: string;
            /**
             * The billing address for the order.
             */
            address1?: string;
            /**
             * An additional field for the billing address.
             */
            address2?: string;
            /**
             * The city in the billing address.
             */
            city?: string;
            /**
             * The state or normalized province in the billing address.
             */
            province?: string;
            /**
             * The two-letter code for the province or state in the billing address.
             */
            province_code?: string;
            /**
             * The postal or zip code in the billing address.
             */
            postal_code?: string;
            /**
             * The country in the billing address.
             */
            country?: string;
            /**
             * The two-letter code for the country in the billing address.
             */
            country_code?: string;
            /**
             * The longitude for the billing address location.
             */
            longitude?: number;
            /**
             * The latitude for the billing address location.
             */
            latitude?: number;
            /**
             * The phone number for the billing address.
             */
            phone?: string;
            /**
             * The company associated with the billing address.
             */
            company?: string;
        };
        /**
         * The promo codes applied on the order. Note: Patch will completely replace the value of promos with the new one provided.
         */
        promos?: Array<{
            /**
             * The Promo Code
             */
            code: string;
            /**
             * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
             */
            amount_discounted: number;
            /**
             * Type of discount. For free shipping set type to fixed
             */
            type: 'fixed' | 'percentage';
        }>;
        /**
         * An array of the order's line items.
         */
        lines?: Array<{
            /**
             * A unique identifier for the product associated with the order line item.
             */
            product_id?: string;
            /**
             * A unique identifier for the product variant associated with the order line item.
             */
            product_variant_id?: string;
            /**
             * The quantity of an order line item.
             */
            quantity?: number;
            /**
             * The price of an order line item.
             */
            price?: number;
            /**
             * The total discount amount applied to this line item.
             */
            discount?: number;
        }>;
        /**
         * The outreach associated with this order. For example, an email campaign or Facebook ad.
         */
        outreach?: {
            /**
             * A unique identifier for the outreach. Can be an email campaign ID.
             */
            id?: string;
        };
        /**
         * The tracking number associated with the order.
         */
        tracking_number?: string;
        /**
         * The tracking carrier associated with the order.
         */
        tracking_carrier?: string;
        /**
         * The tracking URL associated with the order.
         */
        tracking_url?: string;
    };
    path: {
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdOrdersIdResponse = ({
    /**
     * A unique identifier for the order.
     */
    readonly id?: string;
    /**
     * Information about a specific customer.
     */
    customer?: {
        /**
         * A unique identifier for the customer.
         */
        readonly id?: string;
        /**
         * The customer's email address.
         */
        readonly email_address?: string;
        /**
         * A US phone number for SMS contact.
         */
        sms_phone_number?: string;
        /**
         * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
         */
        opt_in_status?: boolean;
        /**
         * The customer's company.
         */
        company?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's last name.
         */
        last_name?: string;
        /**
         * The customer's total order count.
         */
        readonly orders_count?: number;
        /**
         * The total amount the customer has spent.
         */
        readonly total_spent?: number;
        /**
         * The customer's address.
         */
        address?: {
            /**
             * The mailing address of the customer.
             */
            address1?: string;
            /**
             * An additional field for the customer's mailing address.
             */
            address2?: string;
            /**
             * The city the customer is located in.
             */
            city?: string;
            /**
             * The customer's state name or normalized province.
             */
            province?: string;
            /**
             * The two-letter code for the customer's province or state.
             */
            province_code?: string;
            /**
             * The customer's postal or zip code.
             */
            postal_code?: string;
            /**
             * The customer's country.
             */
            country?: string;
            /**
             * The two-letter code for the customer's country.
             */
            country_code?: string;
        };
        /**
         * The date and time the customer was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the customer was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    };
    /**
     * The unique identifier for the store.
     */
    readonly store_id?: string;
    /**
     * A string that uniquely identifies the campaign associated with an order.
     */
    campaign_id?: string;
    /**
     * The URL for the page where the buyer landed when entering the shop.
     */
    landing_site?: string;
    /**
     * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    financial_status?: string;
    /**
     * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
     */
    fulfillment_status?: string;
    /**
     * The three-letter ISO 4217 code for the currency that the store accepts.
     */
    currency_code?: string;
    /**
     * The order total associated with an order.
     */
    order_total?: number;
    /**
     * The URL for the order.
     */
    order_url?: string;
    /**
     * The total amount of the discounts to be applied to the price of the order.
     */
    discount_total?: number;
    /**
     * The tax total associated with an order.
     */
    tax_total?: number;
    /**
     * The shipping total for the order.
     */
    shipping_total?: number;
    /**
     * The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.
     */
    tracking_code?: 'prec';
    /**
     * The date and time the order was processed in ISO 8601 format.
     */
    processed_at_foreign?: string;
    /**
     * The date and time the order was cancelled in ISO 8601 format.
     */
    cancelled_at_foreign?: string;
    /**
     * The date and time the order was updated in ISO 8601 format.
     */
    updated_at_foreign?: string;
    /**
     * The shipping address for the order.
     */
    shipping_address?: {
        /**
         * The name associated with an order's shipping address.
         */
        name?: string;
        /**
         * The shipping address for the order.
         */
        address1?: string;
        /**
         * An additional field for the shipping address.
         */
        address2?: string;
        /**
         * The city in the order's shipping address.
         */
        city?: string;
        /**
         * The state or normalized province in the order's shipping address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state the order's shipping address is located in.
         */
        province_code?: string;
        /**
         * The postal or zip code in the order's shipping address.
         */
        postal_code?: string;
        /**
         * The country in the order's shipping address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the shipping address.
         */
        country_code?: string;
        /**
         * The longitude for the shipping address location.
         */
        longitude?: number;
        /**
         * The latitude for the shipping address location.
         */
        latitude?: number;
        /**
         * The phone number for the order's shipping address
         */
        phone?: string;
        /**
         * The company associated with an order's shipping address.
         */
        company?: string;
    };
    /**
     * The billing address for the order.
     */
    billing_address?: {
        /**
         * The name associated with an order's billing address.
         */
        name?: string;
        /**
         * The billing address for the order.
         */
        address1?: string;
        /**
         * An additional field for the billing address.
         */
        address2?: string;
        /**
         * The city in the billing address.
         */
        city?: string;
        /**
         * The state or normalized province in the billing address.
         */
        province?: string;
        /**
         * The two-letter code for the province or state in the billing address.
         */
        province_code?: string;
        /**
         * The postal or zip code in the billing address.
         */
        postal_code?: string;
        /**
         * The country in the billing address.
         */
        country?: string;
        /**
         * The two-letter code for the country in the billing address.
         */
        country_code?: string;
        /**
         * The longitude for the billing address location.
         */
        longitude?: number;
        /**
         * The latitude for the billing address location.
         */
        latitude?: number;
        /**
         * The phone number for the billing address.
         */
        phone?: string;
        /**
         * The company associated with the billing address.
         */
        company?: string;
    };
    /**
     * The promo codes applied on the order
     */
    promos?: Array<{
        /**
         * The Promo Code
         */
        code?: string;
        /**
         * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
         */
        amount_discounted?: number;
        /**
         * Type of discount. For free shipping set type to fixed
         */
        type?: 'fixed' | 'percentage';
    }>;
    /**
     * An array of the order's line items.
     */
    lines?: Array<{
        /**
         * A unique identifier for an order line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with an order line item.
         */
        product_id?: string;
        /**
         * The name of the product for an order line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with an order line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for an order line item.
         */
        readonly product_variant_title?: string;
        /**
         * The image URL for a product.
         */
        readonly image_url?: string;
        /**
         * The order line item quantity.
         */
        quantity?: number;
        /**
         * The order line item price.
         */
        price?: number;
        /**
         * The total discount amount applied to a line item.
         */
        discount?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The outreach associated with this order. For example, an email campaign or Facebook ad.
     */
    outreach?: {
        /**
         * A unique identifier for the outreach. Can be an email campaign ID.
         */
        id?: string;
        /**
         * The name for the outreach.
         */
        readonly name?: string;
        /**
         * The type of the outreach.
         */
        readonly type?: string;
        /**
         * The date and time the Outreach was published in ISO 8601 format.
         */
        readonly published_time?: string;
    };
    /**
     * The tracking number associated with the order.
     */
    tracking_number?: string;
    /**
     * The tracking carrier associated with the order.
     */
    tracking_carrier?: string;
    /**
     * The tracking URL associated with the order.
     */
    tracking_url?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdOrdersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdOrdersIdData = {
    path: {
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdOrdersIdResponse = (void);

export type DeleteEcommerceStoresIdOrdersIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdOrdersIdLinesData = {
    path: {
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdOrdersIdLinesResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * The order id.
     */
    order_id?: string;
    /**
     * An array of objects, each representing an order's line item.
     */
    lines?: Array<{
        /**
         * A unique identifier for an order line item.
         */
        readonly id?: string;
        /**
         * A unique identifier for the product associated with an order line item.
         */
        product_id?: string;
        /**
         * The name of the product for an order line item.
         */
        readonly product_title?: string;
        /**
         * A unique identifier for the product variant associated with an order line item.
         */
        product_variant_id?: string;
        /**
         * The name of the product variant for an order line item.
         */
        readonly product_variant_title?: string;
        /**
         * The image URL for a product.
         */
        readonly image_url?: string;
        /**
         * The order line item quantity.
         */
        quantity?: number;
        /**
         * The order line item price.
         */
        price?: number;
        /**
         * The total discount amount applied to a line item.
         */
        discount?: number;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdOrdersIdLinesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdOrdersIdLinesData = {
    body: {
        /**
         * A unique identifier for the order line item.
         */
        id: string;
        /**
         * A unique identifier for the product associated with the order line item.
         */
        product_id: string;
        /**
         * A unique identifier for the product variant associated with the order line item.
         */
        product_variant_id: string;
        /**
         * The quantity of an order line item.
         */
        quantity: number;
        /**
         * The price of an order line item.
         */
        price: number;
        /**
         * The total discount amount applied to this line item.
         */
        discount?: number;
    };
    path: {
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdOrdersIdLinesResponse = ({
    /**
     * A unique identifier for an order line item.
     */
    readonly id?: string;
    /**
     * A unique identifier for the product associated with an order line item.
     */
    product_id?: string;
    /**
     * The name of the product for an order line item.
     */
    readonly product_title?: string;
    /**
     * A unique identifier for the product variant associated with an order line item.
     */
    product_variant_id?: string;
    /**
     * The name of the product variant for an order line item.
     */
    readonly product_variant_title?: string;
    /**
     * The image URL for a product.
     */
    readonly image_url?: string;
    /**
     * The order line item quantity.
     */
    quantity?: number;
    /**
     * The order line item price.
     */
    price?: number;
    /**
     * The total discount amount applied to a line item.
     */
    discount?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdOrdersIdLinesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdOrdersIdLinesIdData = {
    path: {
        /**
         * The id for the line item of an order.
         */
        line_id: string;
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdOrdersIdLinesIdResponse = ({
    /**
     * A unique identifier for an order line item.
     */
    readonly id?: string;
    /**
     * A unique identifier for the product associated with an order line item.
     */
    product_id?: string;
    /**
     * The name of the product for an order line item.
     */
    readonly product_title?: string;
    /**
     * A unique identifier for the product variant associated with an order line item.
     */
    product_variant_id?: string;
    /**
     * The name of the product variant for an order line item.
     */
    readonly product_variant_title?: string;
    /**
     * The image URL for a product.
     */
    readonly image_url?: string;
    /**
     * The order line item quantity.
     */
    quantity?: number;
    /**
     * The order line item price.
     */
    price?: number;
    /**
     * The total discount amount applied to a line item.
     */
    discount?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdOrdersIdLinesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdOrdersIdLinesIdData = {
    body: {
        /**
         * A unique identifier for the product associated with the order line item.
         */
        product_id?: string;
        /**
         * A unique identifier for the product variant associated with the order line item.
         */
        product_variant_id?: string;
        /**
         * The quantity of an order line item.
         */
        quantity?: number;
        /**
         * The price of an order line item.
         */
        price?: number;
        /**
         * The total discount amount applied to this line item.
         */
        discount?: number;
    };
    path: {
        /**
         * The id for the line item of an order.
         */
        line_id: string;
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdOrdersIdLinesIdResponse = ({
    /**
     * A unique identifier for an order line item.
     */
    readonly id?: string;
    /**
     * A unique identifier for the product associated with an order line item.
     */
    product_id?: string;
    /**
     * The name of the product for an order line item.
     */
    readonly product_title?: string;
    /**
     * A unique identifier for the product variant associated with an order line item.
     */
    product_variant_id?: string;
    /**
     * The name of the product variant for an order line item.
     */
    readonly product_variant_title?: string;
    /**
     * The image URL for a product.
     */
    readonly image_url?: string;
    /**
     * The order line item quantity.
     */
    quantity?: number;
    /**
     * The order line item price.
     */
    price?: number;
    /**
     * The total discount amount applied to a line item.
     */
    discount?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdOrdersIdLinesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdOrdersIdLinesIdData = {
    path: {
        /**
         * The id for the line item of an order.
         */
        line_id: string;
        /**
         * The id for the order in a store.
         */
        order_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdOrdersIdLinesIdResponse = (void);

export type DeleteEcommerceStoresIdOrdersIdLinesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdProductsData = {
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdProductsResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * An array of objects, each representing a store product.
     */
    products?: Array<{
        /**
         * A unique identifier for the product.
         */
        readonly id?: string;
        /**
         * The currency code
         */
        readonly currency_code?: string;
        /**
         * The title of a product.
         */
        title?: string;
        /**
         * The handle of a product.
         */
        handle?: string;
        /**
         * The URL for a product.
         */
        url?: string;
        /**
         * The description of a product.
         */
        description?: string;
        /**
         * The type of product.
         */
        type?: string;
        /**
         * The vendor for a product.
         */
        vendor?: string;
        /**
         * The image URL for a product.
         */
        image_url?: string;
        /**
         * Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).
         */
        variants?: Array<{
            /**
             * A unique identifier for the product variant.
             */
            readonly id?: string;
            /**
             * The title of a product variant.
             */
            title?: string;
            /**
             * The URL for a product variant.
             */
            url?: string;
            /**
             * The stock keeping unit (SKU) of a product variant.
             */
            sku?: string;
            /**
             * The price of a product variant.
             */
            price?: number;
            /**
             * The inventory quantity of a product variant.
             */
            inventory_quantity?: number;
            /**
             * The image URL for a product variant.
             */
            image_url?: string;
            /**
             * The backorders of a product variant.
             */
            backorders?: string;
            /**
             * The visibility of a product variant.
             */
            visibility?: string;
            /**
             * The date and time the product was created in ISO 8601 format.
             */
            readonly created_at?: string;
            /**
             * The date and time the product was last updated in ISO 8601 format.
             */
            readonly updated_at?: string;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        }>;
        /**
         * An array of the product's images.
         */
        images?: Array<{
            /**
             * A unique identifier for the product image.
             */
            id?: string;
            /**
             * The URL for a product image.
             */
            url?: string;
            /**
             * The list of product variants using the image.
             */
            variant_ids?: Array<(string)>;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        }>;
        /**
         * The date and time the product was published in ISO 8601 format.
         */
        published_at_foreign?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdProductsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdProductsData = {
    body: {
        /**
         * A unique identifier for the product.
         */
        id: string;
        /**
         * The title of a product.
         */
        title: string;
        /**
         * The handle of a product.
         */
        handle?: string;
        /**
         * The URL for a product.
         */
        url?: string;
        /**
         * The description of a product.
         */
        description?: string;
        /**
         * The type of product.
         */
        type?: string;
        /**
         * The vendor for a product.
         */
        vendor?: string;
        /**
         * The image URL for a product.
         */
        image_url?: string;
        /**
         * An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product.
         */
        variants: Array<{
            /**
             * A unique identifier for the product variant.
             */
            id: string;
            /**
             * The title of a product variant.
             */
            title: string;
            /**
             * The URL for a product variant.
             */
            url?: string;
            /**
             * The stock keeping unit (SKU) of a product variant.
             */
            sku?: string;
            /**
             * The price of a product variant.
             */
            price?: number;
            /**
             * The inventory quantity of a product variant.
             */
            inventory_quantity?: number;
            /**
             * The image URL for a product variant.
             */
            image_url?: string;
            /**
             * The backorders of a product variant.
             */
            backorders?: string;
            /**
             * The visibility of a product variant.
             */
            visibility?: string;
        }>;
        /**
         * An array of the product's images.
         */
        images?: Array<{
            /**
             * A unique identifier for the product image.
             */
            id: string;
            /**
             * The URL for a product image.
             */
            url: string;
            /**
             * The list of product variants using the image.
             */
            variant_ids?: Array<(string)>;
        }>;
        /**
         * The date and time the product was published.
         */
        published_at_foreign?: string;
    };
    path: {
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdProductsResponse = ({
    /**
     * A unique identifier for the product.
     */
    readonly id?: string;
    /**
     * The currency code
     */
    readonly currency_code?: string;
    /**
     * The title of a product.
     */
    title?: string;
    /**
     * The handle of a product.
     */
    handle?: string;
    /**
     * The URL for a product.
     */
    url?: string;
    /**
     * The description of a product.
     */
    description?: string;
    /**
     * The type of product.
     */
    type?: string;
    /**
     * The vendor for a product.
     */
    vendor?: string;
    /**
     * The image URL for a product.
     */
    image_url?: string;
    /**
     * Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).
     */
    variants?: Array<{
        /**
         * A unique identifier for the product variant.
         */
        readonly id?: string;
        /**
         * The title of a product variant.
         */
        title?: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
        /**
         * The date and time the product was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the product was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of the product's images.
     */
    images?: Array<{
        /**
         * A unique identifier for the product image.
         */
        id?: string;
        /**
         * The URL for a product image.
         */
        url?: string;
        /**
         * The list of product variants using the image.
         */
        variant_ids?: Array<(string)>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The date and time the product was published in ISO 8601 format.
     */
    published_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdProductsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdProductsIdData = {
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdProductsIdResponse = ({
    /**
     * A unique identifier for the product.
     */
    readonly id?: string;
    /**
     * The currency code
     */
    readonly currency_code?: string;
    /**
     * The title of a product.
     */
    title?: string;
    /**
     * The handle of a product.
     */
    handle?: string;
    /**
     * The URL for a product.
     */
    url?: string;
    /**
     * The description of a product.
     */
    description?: string;
    /**
     * The type of product.
     */
    type?: string;
    /**
     * The vendor for a product.
     */
    vendor?: string;
    /**
     * The image URL for a product.
     */
    image_url?: string;
    /**
     * Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).
     */
    variants?: Array<{
        /**
         * A unique identifier for the product variant.
         */
        readonly id?: string;
        /**
         * The title of a product variant.
         */
        title?: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
        /**
         * The date and time the product was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the product was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of the product's images.
     */
    images?: Array<{
        /**
         * A unique identifier for the product image.
         */
        id?: string;
        /**
         * The URL for a product image.
         */
        url?: string;
        /**
         * The list of product variants using the image.
         */
        variant_ids?: Array<(string)>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The date and time the product was published in ISO 8601 format.
     */
    published_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdProductsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdProductsIdData = {
    body: {
        /**
         * The title of a product.
         */
        title?: string;
        /**
         * The handle of a product.
         */
        handle?: string;
        /**
         * The URL for a product.
         */
        url?: string;
        /**
         * The description of a product.
         */
        description?: string;
        /**
         * The type of product.
         */
        type?: string;
        /**
         * The vendor for a product.
         */
        vendor?: string;
        /**
         * The image URL for a product.
         */
        image_url?: string;
        /**
         * An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product.
         */
        variants?: Array<{
            /**
             * The title of a product variant.
             */
            title?: string;
            /**
             * The URL for a product variant.
             */
            url?: string;
            /**
             * The stock keeping unit (SKU) of a product variant.
             */
            sku?: string;
            /**
             * The price of a product variant.
             */
            price?: number;
            /**
             * The inventory quantity of a product variant.
             */
            inventory_quantity?: number;
            /**
             * The image URL for a product variant.
             */
            image_url?: string;
            /**
             * The backorders of a product variant.
             */
            backorders?: string;
            /**
             * The visibility of a product variant.
             */
            visibility?: string;
        }>;
        /**
         * An array of the product's images.
         */
        images?: Array<{
            /**
             * A unique identifier for the product image.
             */
            id?: string;
            /**
             * The URL for a product image.
             */
            url?: string;
            /**
             * The list of product variants using the image.
             */
            variant_ids?: Array<(string)>;
        }>;
        /**
         * The date and time the product was published in ISO 8601 format.
         */
        published_at_foreign?: string;
    };
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdProductsIdResponse = ({
    /**
     * A unique identifier for the product.
     */
    readonly id?: string;
    /**
     * The currency code
     */
    readonly currency_code?: string;
    /**
     * The title of a product.
     */
    title?: string;
    /**
     * The handle of a product.
     */
    handle?: string;
    /**
     * The URL for a product.
     */
    url?: string;
    /**
     * The description of a product.
     */
    description?: string;
    /**
     * The type of product.
     */
    type?: string;
    /**
     * The vendor for a product.
     */
    vendor?: string;
    /**
     * The image URL for a product.
     */
    image_url?: string;
    /**
     * Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).
     */
    variants?: Array<{
        /**
         * A unique identifier for the product variant.
         */
        readonly id?: string;
        /**
         * The title of a product variant.
         */
        title?: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
        /**
         * The date and time the product was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the product was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of the product's images.
     */
    images?: Array<{
        /**
         * A unique identifier for the product image.
         */
        id?: string;
        /**
         * The URL for a product image.
         */
        url?: string;
        /**
         * The list of product variants using the image.
         */
        variant_ids?: Array<(string)>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The date and time the product was published in ISO 8601 format.
     */
    published_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdProductsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PutEcommerceStoresIdProductsIdData = {
    body: {
        /**
         * A unique identifier for the product.
         */
        id: string;
        /**
         * The title of a product.
         */
        title?: string;
        /**
         * The handle of a product.
         */
        handle?: string;
        /**
         * The URL for a product.
         */
        url?: string;
        /**
         * The description of a product.
         */
        description?: string;
        /**
         * The type of product.
         */
        type?: string;
        /**
         * The vendor for a product.
         */
        vendor?: string;
        /**
         * The image URL for a product.
         */
        image_url?: string;
        /**
         * An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product.
         */
        variants?: Array<{
            /**
             * A unique identifier for the product variant.
             */
            id: string;
            /**
             * The title of a product variant.
             */
            title: string;
            /**
             * The URL for a product variant.
             */
            url?: string;
            /**
             * The stock keeping unit (SKU) of a product variant.
             */
            sku?: string;
            /**
             * The price of a product variant.
             */
            price?: number;
            /**
             * The inventory quantity of a product variant.
             */
            inventory_quantity?: number;
            /**
             * The image URL for a product variant.
             */
            image_url?: string;
            /**
             * The backorders of a product variant.
             */
            backorders?: string;
            /**
             * The visibility of a product variant.
             */
            visibility?: string;
        }>;
        /**
         * An array of the product's images.
         */
        images?: Array<{
            /**
             * A unique identifier for the product image.
             */
            id: string;
            /**
             * The URL for a product image.
             */
            url: string;
            /**
             * The list of product variants using the image.
             */
            variant_ids?: Array<(string)>;
        }>;
        /**
         * The date and time the product was published.
         */
        published_at_foreign?: string;
    };
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PutEcommerceStoresIdProductsIdResponse = ({
    /**
     * A unique identifier for the product.
     */
    readonly id?: string;
    /**
     * The currency code
     */
    readonly currency_code?: string;
    /**
     * The title of a product.
     */
    title?: string;
    /**
     * The handle of a product.
     */
    handle?: string;
    /**
     * The URL for a product.
     */
    url?: string;
    /**
     * The description of a product.
     */
    description?: string;
    /**
     * The type of product.
     */
    type?: string;
    /**
     * The vendor for a product.
     */
    vendor?: string;
    /**
     * The image URL for a product.
     */
    image_url?: string;
    /**
     * Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).
     */
    variants?: Array<{
        /**
         * A unique identifier for the product variant.
         */
        readonly id?: string;
        /**
         * The title of a product variant.
         */
        title?: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
        /**
         * The date and time the product was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the product was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * An array of the product's images.
     */
    images?: Array<{
        /**
         * A unique identifier for the product image.
         */
        id?: string;
        /**
         * The URL for a product image.
         */
        url?: string;
        /**
         * The list of product variants using the image.
         */
        variant_ids?: Array<(string)>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The date and time the product was published in ISO 8601 format.
     */
    published_at_foreign?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PutEcommerceStoresIdProductsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdProductsIdData = {
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdProductsIdResponse = (void);

export type DeleteEcommerceStoresIdProductsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdProductsIdVariantsData = {
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdProductsIdVariantsResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * The product id.
     */
    product_id?: string;
    /**
     * An array of objects, each representing a product's variants.
     */
    variants?: Array<{
        /**
         * A unique identifier for the product variant.
         */
        readonly id?: string;
        /**
         * The title of a product variant.
         */
        title?: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
        /**
         * The date and time the product was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the product was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdProductsIdVariantsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdProductsIdVariantsData = {
    body: {
        /**
         * A unique identifier for the product variant.
         */
        id: string;
        /**
         * The title of a product variant.
         */
        title: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
    };
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdProductsIdVariantsResponse = ({
    /**
     * A unique identifier for the product variant.
     */
    readonly id?: string;
    /**
     * The title of a product variant.
     */
    title?: string;
    /**
     * The URL for a product variant.
     */
    url?: string;
    /**
     * The stock keeping unit (SKU) of a product variant.
     */
    sku?: string;
    /**
     * The price of a product variant.
     */
    price?: number;
    /**
     * The inventory quantity of a product variant.
     */
    inventory_quantity?: number;
    /**
     * The image URL for a product variant.
     */
    image_url?: string;
    /**
     * The backorders of a product variant.
     */
    backorders?: string;
    /**
     * The visibility of a product variant.
     */
    visibility?: string;
    /**
     * The date and time the product was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the product was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdProductsIdVariantsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdProductsIdVariantsIdData = {
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
        /**
         * The id for the product variant.
         */
        variant_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdProductsIdVariantsIdResponse = ({
    /**
     * A unique identifier for the product variant.
     */
    readonly id?: string;
    /**
     * The title of a product variant.
     */
    title?: string;
    /**
     * The URL for a product variant.
     */
    url?: string;
    /**
     * The stock keeping unit (SKU) of a product variant.
     */
    sku?: string;
    /**
     * The price of a product variant.
     */
    price?: number;
    /**
     * The inventory quantity of a product variant.
     */
    inventory_quantity?: number;
    /**
     * The image URL for a product variant.
     */
    image_url?: string;
    /**
     * The backorders of a product variant.
     */
    backorders?: string;
    /**
     * The visibility of a product variant.
     */
    visibility?: string;
    /**
     * The date and time the product was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the product was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdProductsIdVariantsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PutEcommerceStoresIdProductsIdVariantsIdData = {
    body: {
        /**
         * A unique identifier for the product variant.
         */
        id: string;
        /**
         * The title of a product variant.
         */
        title: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
    };
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
        /**
         * The id for the product variant.
         */
        variant_id: string;
    };
};

export type PutEcommerceStoresIdProductsIdVariantsIdResponse = ({
    /**
     * A unique identifier for the product variant.
     */
    readonly id?: string;
    /**
     * The title of a product variant.
     */
    title?: string;
    /**
     * The URL for a product variant.
     */
    url?: string;
    /**
     * The stock keeping unit (SKU) of a product variant.
     */
    sku?: string;
    /**
     * The price of a product variant.
     */
    price?: number;
    /**
     * The inventory quantity of a product variant.
     */
    inventory_quantity?: number;
    /**
     * The image URL for a product variant.
     */
    image_url?: string;
    /**
     * The backorders of a product variant.
     */
    backorders?: string;
    /**
     * The visibility of a product variant.
     */
    visibility?: string;
    /**
     * The date and time the product was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the product was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PutEcommerceStoresIdProductsIdVariantsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdProductsIdVariantsIdData = {
    body: {
        /**
         * The title of a product variant.
         */
        title?: string;
        /**
         * The URL for a product variant.
         */
        url?: string;
        /**
         * The stock keeping unit (SKU) of a product variant.
         */
        sku?: string;
        /**
         * The price of a product variant.
         */
        price?: number;
        /**
         * The inventory quantity of a product variant.
         */
        inventory_quantity?: number;
        /**
         * The image URL for a product variant.
         */
        image_url?: string;
        /**
         * The backorders of a product variant.
         */
        backorders?: string;
        /**
         * The visibility of a product variant.
         */
        visibility?: string;
    };
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
        /**
         * The id for the product variant.
         */
        variant_id: string;
    };
};

export type PatchEcommerceStoresIdProductsIdVariantsIdResponse = ({
    /**
     * A unique identifier for the product variant.
     */
    readonly id?: string;
    /**
     * The title of a product variant.
     */
    title?: string;
    /**
     * The URL for a product variant.
     */
    url?: string;
    /**
     * The stock keeping unit (SKU) of a product variant.
     */
    sku?: string;
    /**
     * The price of a product variant.
     */
    price?: number;
    /**
     * The inventory quantity of a product variant.
     */
    inventory_quantity?: number;
    /**
     * The image URL for a product variant.
     */
    image_url?: string;
    /**
     * The backorders of a product variant.
     */
    backorders?: string;
    /**
     * The visibility of a product variant.
     */
    visibility?: string;
    /**
     * The date and time the product was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the product was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdProductsIdVariantsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdProductsIdVariantsIdData = {
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
        /**
         * The id for the product variant.
         */
        variant_id: string;
    };
};

export type DeleteEcommerceStoresIdProductsIdVariantsIdResponse = (void);

export type DeleteEcommerceStoresIdProductsIdVariantsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdProductsIdImagesData = {
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetEcommerceStoresIdProductsIdImagesResponse = ({
    /**
     * The store id.
     */
    store_id?: string;
    /**
     * The product id.
     */
    product_id?: string;
    /**
     * An array of objects, each representing a product image resource.
     */
    images?: Array<{
        /**
         * A unique identifier for the product image.
         */
        id?: string;
        /**
         * The URL for a product image.
         */
        url?: string;
        /**
         * The list of product variants using the image.
         */
        variant_ids?: Array<(string)>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdProductsIdImagesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PostEcommerceStoresIdProductsIdImagesData = {
    body: {
        /**
         * A unique identifier for the product image.
         */
        id: string;
        /**
         * The URL for a product image.
         */
        url: string;
        /**
         * The list of product variants using the image.
         */
        variant_ids?: Array<(string)>;
    };
    path: {
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PostEcommerceStoresIdProductsIdImagesResponse = ({
    /**
     * A unique identifier for the product image.
     */
    id?: string;
    /**
     * The URL for a product image.
     */
    url?: string;
    /**
     * The list of product variants using the image.
     */
    variant_ids?: Array<(string)>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PostEcommerceStoresIdProductsIdImagesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetEcommerceStoresIdProductsIdImagesIdData = {
    path: {
        /**
         * The id for the product image.
         */
        image_id: string;
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetEcommerceStoresIdProductsIdImagesIdResponse = ({
    /**
     * A unique identifier for the product image.
     */
    id?: string;
    /**
     * The URL for a product image.
     */
    url?: string;
    /**
     * The list of product variants using the image.
     */
    variant_ids?: Array<(string)>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetEcommerceStoresIdProductsIdImagesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type PatchEcommerceStoresIdProductsIdImagesIdData = {
    body: {
        /**
         * A unique identifier for the product image.
         */
        id?: string;
        /**
         * The URL for a product image.
         */
        url?: string;
        /**
         * The list of product variants using the image.
         */
        variant_ids?: Array<(string)>;
    };
    path: {
        /**
         * The id for the product image.
         */
        image_id: string;
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type PatchEcommerceStoresIdProductsIdImagesIdResponse = ({
    /**
     * A unique identifier for the product image.
     */
    id?: string;
    /**
     * The URL for a product image.
     */
    url?: string;
    /**
     * The list of product variants using the image.
     */
    variant_ids?: Array<(string)>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type PatchEcommerceStoresIdProductsIdImagesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteEcommerceStoresIdProductsIdImagesIdData = {
    path: {
        /**
         * The id for the product image.
         */
        image_id: string;
        /**
         * The id for the product of a store.
         */
        product_id: string;
        /**
         * The store id.
         */
        store_id: string;
    };
};

export type DeleteEcommerceStoresIdProductsIdImagesIdResponse = (void);

export type DeleteEcommerceStoresIdProductsIdImagesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetSearchCampaignsData = {
    query: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * The search query used to filter results.
         */
        query: string;
    };
};

export type GetSearchCampaignsResponse = ({
    /**
     * An array of matching campaigns and snippets.
     */
    results?: Array<{
        /**
         * A summary of an individual campaign's settings and content.
         */
        campaign?: {
            /**
             * A string that uniquely identifies this campaign.
             */
            readonly id?: string;
            /**
             * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
             */
            readonly web_id?: number;
            /**
             * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
             */
            readonly parent_campaign_id?: string;
            /**
             * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
             */
            type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate';
            /**
             * The date and time the campaign was created in ISO 8601 format.
             */
            readonly create_time?: string;
            /**
             * The link to the campaign's archive version in ISO 8601 format.
             */
            readonly archive_url?: string;
            /**
             * The original link to the campaign's archive version.
             */
            readonly long_archive_url?: string;
            /**
             * The current status of the campaign.
             */
            readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'archived';
            /**
             * The total number of emails sent for this campaign.
             */
            readonly emails_sent?: number;
            /**
             * The date and time a campaign was sent.
             */
            readonly send_time?: string;
            /**
             * How the campaign's content is put together.
             */
            content_type?: 'template' | 'html' | 'url' | 'multichannel';
            /**
             * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
             */
            readonly needs_block_refresh?: boolean;
            /**
             * Determines if the campaign qualifies to be resent to non-openers.
             */
            readonly resendable?: boolean;
            /**
             * List settings for the campaign.
             */
            recipients?: {
                /**
                 * The unique list id.
                 */
                list_id?: string;
                /**
                 * The status of the list used, namely if it's deleted or disabled.
                 */
                readonly list_is_active?: boolean;
                /**
                 * The name of the list.
                 */
                readonly list_name?: string;
                /**
                 * A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML.
                 */
                readonly segment_text?: string;
                /**
                 * Count of the recipients on the associated list. Formatted as an integer.
                 */
                readonly recipient_count?: number;
                /**
                 * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
                 */
                segment_opts?: {
                    /**
                     * The id for an existing saved segment.
                     */
                    saved_segment_id?: number;
                    /**
                     * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
                     */
                    prebuilt_segment_id?: string;
                    /**
                     * Segment match type.
                     */
                    match?: 'any' | 'all';
                    /**
                     * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
                     */
                    conditions?: Array<unknown>;
                };
            };
            /**
             * The settings for your campaign, including subject, from name, reply-to address, and more.
             */
            settings?: {
                /**
                 * The subject line for the campaign.
                 */
                subject_line?: string;
                /**
                 * The preview text for the campaign.
                 */
                preview_text?: string;
                /**
                 * The title of the campaign.
                 */
                title?: string;
                /**
                 * The 'from' name on the campaign (not an email address).
                 */
                from_name?: string;
                /**
                 * The reply-to email address for the campaign.
                 */
                reply_to?: string;
                /**
                 * Use Mailchimp Conversation feature to manage out-of-office replies.
                 */
                use_conversation?: boolean;
                /**
                 * The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
                 */
                to_name?: string;
                /**
                 * If the campaign is listed in a folder, the id for that folder.
                 */
                folder_id?: string;
                /**
                 * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.
                 */
                authenticate?: boolean;
                /**
                 * Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
                 */
                auto_footer?: boolean;
                /**
                 * Automatically inline the CSS included with the campaign content.
                 */
                inline_css?: boolean;
                /**
                 * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
                 */
                auto_tweet?: boolean;
                /**
                 * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
                 */
                auto_fb_post?: Array<(string)>;
                /**
                 * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.
                 */
                fb_comments?: boolean;
                /**
                 * Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/).
                 */
                readonly timewarp?: boolean;
                /**
                 * The id for the template used in this campaign.
                 */
                template_id?: number;
                /**
                 * Whether the campaign uses the drag-and-drop editor.
                 */
                readonly drag_and_drop?: boolean;
            };
            /**
             * The settings specific to A/B test campaigns.
             */
            variate_settings?: {
                /**
                 * ID for the winning combination.
                 */
                readonly winning_combination_id?: string;
                /**
                 * ID of the campaign that was sent to the remaining recipients based on the winning combination.
                 */
                readonly winning_campaign_id?: string;
                /**
                 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
                 */
                winner_criteria?: 'opens' | 'clicks' | 'manual' | 'total_revenue';
                /**
                 * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
                 */
                wait_time?: number;
                /**
                 * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
                 */
                test_size?: number;
                /**
                 * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
                 */
                subject_lines?: Array<(string)>;
                /**
                 * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
                 */
                send_times?: Array<(string)>;
                /**
                 * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
                 */
                from_names?: Array<(string)>;
                /**
                 * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
                 */
                reply_to_addresses?: Array<(string)>;
                /**
                 * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.
                 */
                readonly contents?: Array<(string)>;
                /**
                 * Combinations of possible variables used to build emails.
                 */
                readonly combinations?: Array<{
                    /**
                     * Unique ID for the combination.
                     */
                    id?: string;
                    /**
                     * The index of `variate_settings.subject_lines` used.
                     */
                    subject_line?: number;
                    /**
                     * The index of `variate_settings.send_times` used.
                     */
                    send_time?: number;
                    /**
                     * The index of `variate_settings.from_names` used.
                     */
                    from_name?: number;
                    /**
                     * The index of `variate_settings.reply_to_addresses` used.
                     */
                    reply_to?: number;
                    /**
                     * The index of `variate_settings.contents` used.
                     */
                    content_description?: number;
                    /**
                     * The number of recipients for this combination.
                     */
                    recipients?: number;
                }>;
            };
            /**
             * The tracking options for a campaign.
             */
            tracking?: {
                /**
                 * Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns.
                 */
                opens?: boolean;
                /**
                 * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
                 */
                html_clicks?: boolean;
                /**
                 * Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns.
                 */
                text_clicks?: boolean;
                /**
                 * Deprecated
                 */
                goal_tracking?: boolean;
                /**
                 * Whether to enable e-commerce tracking.
                 */
                ecomm360?: boolean;
                /**
                 * The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes).
                 */
                google_analytics?: string;
                /**
                 * The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes).
                 */
                clicktale?: string;
                /**
                 * Deprecated
                 */
                salesforce?: {
                    /**
                     * Create a campaign in a connected Salesforce account.
                     */
                    campaign?: boolean;
                    /**
                     * Update contact notes for a campaign based on subscriber email addresses.
                     */
                    notes?: boolean;
                };
                /**
                 * Deprecated
                 */
                capsule?: {
                    /**
                     * Update contact notes for a campaign based on subscriber email addresses.
                     */
                    notes?: boolean;
                };
            };
            /**
             * [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign.
             */
            rss_opts?: {
                /**
                 * The URL for the RSS feed.
                 */
                feed_url?: string;
                /**
                 * The frequency of the RSS Campaign.
                 */
                frequency?: 'daily' | 'weekly' | 'monthly';
                /**
                 * The schedule for sending the RSS Campaign.
                 */
                schedule?: {
                    /**
                     * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
                     */
                    hour?: number;
                    /**
                     * The days of the week to send a daily RSS Campaign.
                     */
                    daily_send?: {
                        /**
                         * Sends the daily RSS Campaign on Sundays.
                         */
                        sunday?: boolean;
                        /**
                         * Sends the daily RSS Campaign on Mondays.
                         */
                        monday?: boolean;
                        /**
                         * Sends the daily RSS Campaign on Tuesdays.
                         */
                        tuesday?: boolean;
                        /**
                         * Sends the daily RSS Campaign on Wednesdays.
                         */
                        wednesday?: boolean;
                        /**
                         * Sends the daily RSS Campaign on Thursdays.
                         */
                        thursday?: boolean;
                        /**
                         * Sends the daily RSS Campaign on Fridays.
                         */
                        friday?: boolean;
                        /**
                         * Sends the daily RSS Campaign on Saturdays.
                         */
                        saturday?: boolean;
                    };
                    /**
                     * The day of the week to send a weekly RSS Campaign.
                     */
                    weekly_send_day?: 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
                    /**
                     * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
                     */
                    monthly_send_date?: number;
                };
                /**
                 * The date the campaign was last sent.
                 */
                readonly last_sent?: string;
                /**
                 * Whether to add CSS to images in the RSS feed to constrain their width in campaigns.
                 */
                constrain_rss_img?: boolean;
            };
            /**
             * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
             */
            readonly ab_split_opts?: {
                /**
                 * The type of AB split to run.
                 */
                split_test?: 'subject' | 'from_name' | 'schedule';
                /**
                 * How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
                 */
                pick_winner?: 'opens' | 'clicks' | 'manual';
                /**
                 * How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
                 */
                wait_units?: 'hours' | 'days';
                /**
                 * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
                 */
                wait_time?: number;
                /**
                 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
                 */
                split_size?: number;
                /**
                 * For campaigns split on 'From Name', the name for Group A.
                 */
                from_name_a?: string;
                /**
                 * For campaigns split on 'From Name', the name for Group B.
                 */
                from_name_b?: string;
                /**
                 * For campaigns split on 'From Name', the reply-to address for Group A.
                 */
                reply_email_a?: string;
                /**
                 * For campaigns split on 'From Name', the reply-to address for Group B.
                 */
                reply_email_b?: string;
                /**
                 * For campaigns split on 'Subject Line', the subject line for Group A.
                 */
                subject_a?: string;
                /**
                 * For campaigns split on 'Subject Line', the subject line for Group B.
                 */
                subject_b?: string;
                /**
                 * The send time for Group A.
                 */
                send_time_a?: string;
                /**
                 * The send time for Group B.
                 */
                send_time_b?: string;
                /**
                 * The send time for the winning version.
                 */
                send_time_winner?: string;
            };
            /**
             * The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/).
             */
            social_card?: {
                /**
                 * The url for the header image for the card.
                 */
                image_url?: string;
                /**
                 * A short summary of the campaign to display.
                 */
                description?: string;
                /**
                 * The title for the card. Typically the subject line of the campaign.
                 */
                title?: string;
            };
            /**
             * For sent campaigns, a summary of opens, clicks, and e-commerce data.
             */
            report_summary?: {
                /**
                 * The total number of opens for a campaign.
                 */
                readonly opens?: number;
                /**
                 * The number of unique opens.
                 */
                readonly unique_opens?: number;
                /**
                 * The number of unique opens divided by the total number of successful deliveries.
                 */
                readonly open_rate?: number;
                /**
                 * The total number of clicks for an campaign.
                 */
                readonly clicks?: number;
                /**
                 * The number of unique clicks.
                 */
                readonly subscriber_clicks?: number;
                /**
                 * The number of unique clicks divided by the total number of successful deliveries.
                 */
                readonly click_rate?: number;
                /**
                 * E-Commerce stats for a campaign.
                 */
                ecommerce?: {
                    /**
                     * The total orders for a campaign.
                     */
                    readonly total_orders?: number;
                    /**
                     * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
                     */
                    readonly total_spent?: number;
                    /**
                     * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
                     */
                    readonly total_revenue?: number;
                };
            };
            /**
             * Updates on campaigns in the process of sending.
             */
            delivery_status?: {
                /**
                 * Whether Campaign Delivery Status is enabled for this account and campaign.
                 */
                readonly enabled?: boolean;
                /**
                 * Whether a campaign send can be canceled.
                 */
                readonly can_cancel?: boolean;
                /**
                 * The current state of a campaign delivery.
                 */
                readonly status?: 'delivering' | 'delivered' | 'canceling' | 'canceled';
                /**
                 * The total number of emails confirmed sent for this campaign so far.
                 */
                readonly emails_sent?: number;
                /**
                 * The total number of emails canceled for this campaign.
                 */
                readonly emails_canceled?: number;
            };
            /**
             * Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter `include_resend_shortcuts` is `true`.
             */
            resend_shortcut_eligibility?: {
                /**
                 * Determines if the campaign qualifies to be resent to non-openers.
                 */
                to_non_openers?: {
                    /**
                     * Determines if the campaign qualifies to be resent to this segment.
                     */
                    readonly is_eligible?: boolean;
                    /**
                     * The reason the campaign is not eligible to be resent to this segment.
                     */
                    readonly reason?: string;
                };
                /**
                 * Determines if the campaign qualifies to be resent to new subscribers.
                 */
                to_new_subscribers?: {
                    /**
                     * Determines if the campaign qualifies to be resent to this segment.
                     */
                    readonly is_eligible?: boolean;
                    /**
                     * The reason the campaign is not eligible to be resent to this segment.
                     */
                    readonly reason?: string;
                };
                /**
                 * Determines if the campaign qualifies to be resent to non-clickers.
                 */
                to_non_clickers?: {
                    /**
                     * Determines if the campaign qualifies to be resent to this segment.
                     */
                    readonly is_eligible?: boolean;
                    /**
                     * The reason the campaign is not eligible to be resent to this segment.
                     */
                    readonly reason?: string;
                };
            };
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        };
        snippet?: string;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetSearchCampaignsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetSearchMembersData = {
    query: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * The unique id for the list.
         */
        list_id?: string;
        /**
         * The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.
         */
        query: string;
    };
};

export type GetSearchMembersResponse = ({
    /**
     * Exact matches of the provided search query.
     */
    exact_matches?: {
        /**
         * An array of objects, each representing a specific list member.
         */
        members?: Array<{
            /**
             * The MD5 hash of the lowercase version of the list member's email address.
             */
            readonly id?: string;
            /**
             * Email address for a subscriber.
             */
            email_address?: string;
            /**
             * An identifier for the address across all of Mailchimp.
             */
            readonly unique_email_id?: string;
            /**
             * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
             */
            readonly contact_id?: string;
            /**
             * The contact's full name.
             */
            readonly full_name?: string;
            /**
             * The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.
             */
            readonly web_id?: number;
            /**
             * Type of email this member asked to get ('html' or 'text').
             */
            email_type?: string;
            /**
             * Subscriber's current status.
             */
            status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
            /**
             * A subscriber's reason for unsubscribing.
             */
            unsubscribe_reason?: string;
            /**
             * Indicates whether a contact consents to 1:1 messaging.
             */
            readonly consents_to_one_to_one_messaging?: boolean;
            /**
             * A US phone number for SMS contact.
             */
            sms_phone_number?: string;
            /**
             * The status of an SMS subscription.
             */
            sms_subscription_status?: 'subscribed' | 'unsubscribed' | 'nonsubscribed' | 'pending';
            /**
             * The datetime when the SMS subscription was last updated
             */
            sms_subscription_last_updated?: string;
            /**
             * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
             */
            merge_fields?: {
                [key: string]: unknown;
            };
            /**
             * The key of this object's properties is the ID of the interest in question.
             */
            interests?: {
                [key: string]: (boolean);
            };
            /**
             * Open and click rates for this subscriber.
             */
            readonly stats?: {
                /**
                 * A subscriber's average open rate.
                 */
                readonly avg_open_rate?: number;
                /**
                 * A subscriber's average clickthrough rate.
                 */
                readonly avg_click_rate?: number;
                /**
                 * Ecommerce stats for the list member if the list is attached to a store.
                 */
                readonly ecommerce_data?: {
                    /**
                     * The total revenue the list member has brought in.
                     */
                    readonly total_revenue?: number;
                    /**
                     * The total number of orders placed by the list member.
                     */
                    readonly number_of_orders?: number;
                    /**
                     * The three-letter ISO 4217 code for the currency that the store accepts.
                     */
                    readonly currency_code?: string;
                };
            };
            /**
             * IP address the subscriber signed up from.
             */
            readonly ip_signup?: string;
            /**
             * The date and time the subscriber signed up for the list in ISO 8601 format.
             */
            readonly timestamp_signup?: string;
            /**
             * The IP address the subscriber used to confirm their opt-in status.
             */
            readonly ip_opt?: string;
            /**
             * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
             */
            readonly timestamp_opt?: string;
            /**
             * Star rating for this member, between 1 and 5.
             */
            readonly member_rating?: number;
            /**
             * The date and time the member's info was last changed in ISO 8601 format.
             */
            readonly last_changed?: string;
            /**
             * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
             */
            language?: string;
            /**
             * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
             */
            vip?: boolean;
            /**
             * The list member's email client.
             */
            readonly email_client?: string;
            /**
             * Subscriber location information.
             */
            location?: {
                /**
                 * The location latitude.
                 */
                latitude?: number;
                /**
                 * The location longitude.
                 */
                longitude?: number;
                /**
                 * The time difference in hours from GMT.
                 */
                readonly gmtoff?: number;
                /**
                 * The offset for timezones where daylight saving time is observed.
                 */
                readonly dstoff?: number;
                /**
                 * The unique code for the location country.
                 */
                readonly country_code?: string;
                /**
                 * The timezone for the location.
                 */
                readonly timezone?: string;
                /**
                 * The region for the location.
                 */
                readonly region?: string;
            };
            /**
             * The marketing permissions for the subscriber.
             */
            marketing_permissions?: Array<{
                /**
                 * The id for the marketing permission on the list
                 */
                marketing_permission_id?: string;
                /**
                 * The text of the marketing permission.
                 */
                text?: string;
                /**
                 * If the subscriber has opted-in to the marketing permission.
                 */
                enabled?: boolean;
            }>;
            /**
             * The most recent Note added about this member.
             */
            readonly last_note?: {
                /**
                 * The note id.
                 */
                readonly note_id?: number;
                /**
                 * The date and time the note was created in ISO 8601 format.
                 */
                readonly created_at?: string;
                /**
                 * The author of the note.
                 */
                readonly created_by?: string;
                /**
                 * The content of the note.
                 */
                readonly note?: string;
            };
            /**
             * The source from which the subscriber was added to this list.
             */
            readonly source?: string;
            /**
             * The number of tags applied to this member.
             */
            readonly tags_count?: number;
            /**
             * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
             */
            tags?: Array<{
                /**
                 * The tag id.
                 */
                readonly id?: number;
                /**
                 * The name of the tag
                 */
                readonly name?: string;
            }>;
            /**
             * The list id.
             */
            readonly list_id?: string;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        }>;
        /**
         * The total number of items matching the query regardless of pagination.
         */
        readonly total_items?: number;
    };
    /**
     * Partial matches of the provided search query.
     */
    full_search?: {
        /**
         * An array of objects, each representing a specific list member.
         */
        members?: Array<{
            /**
             * The MD5 hash of the lowercase version of the list member's email address.
             */
            readonly id?: string;
            /**
             * Email address for a subscriber.
             */
            email_address?: string;
            /**
             * An identifier for the address across all of Mailchimp.
             */
            readonly unique_email_id?: string;
            /**
             * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.
             */
            readonly contact_id?: string;
            /**
             * The contact's full name.
             */
            readonly full_name?: string;
            /**
             * The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.
             */
            readonly web_id?: number;
            /**
             * Type of email this member asked to get ('html' or 'text').
             */
            email_type?: string;
            /**
             * Subscriber's current status.
             */
            status?: 'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'transactional' | 'archived';
            /**
             * A subscriber's reason for unsubscribing.
             */
            unsubscribe_reason?: string;
            /**
             * Indicates whether a contact consents to 1:1 messaging.
             */
            readonly consents_to_one_to_one_messaging?: boolean;
            /**
             * A US phone number for SMS contact.
             */
            sms_phone_number?: string;
            /**
             * The status of an SMS subscription.
             */
            sms_subscription_status?: 'subscribed' | 'unsubscribed' | 'nonsubscribed' | 'pending';
            /**
             * The datetime when the SMS subscription was last updated
             */
            sms_subscription_last_updated?: string;
            /**
             * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
             */
            merge_fields?: {
                [key: string]: unknown;
            };
            /**
             * The key of this object's properties is the ID of the interest in question.
             */
            interests?: {
                [key: string]: (boolean);
            };
            /**
             * Open and click rates for this subscriber.
             */
            readonly stats?: {
                /**
                 * A subscriber's average open rate.
                 */
                readonly avg_open_rate?: number;
                /**
                 * A subscriber's average clickthrough rate.
                 */
                readonly avg_click_rate?: number;
                /**
                 * Ecommerce stats for the list member if the list is attached to a store.
                 */
                readonly ecommerce_data?: {
                    /**
                     * The total revenue the list member has brought in.
                     */
                    readonly total_revenue?: number;
                    /**
                     * The total number of orders placed by the list member.
                     */
                    readonly number_of_orders?: number;
                    /**
                     * The three-letter ISO 4217 code for the currency that the store accepts.
                     */
                    readonly currency_code?: string;
                };
            };
            /**
             * IP address the subscriber signed up from.
             */
            readonly ip_signup?: string;
            /**
             * The date and time the subscriber signed up for the list in ISO 8601 format.
             */
            readonly timestamp_signup?: string;
            /**
             * The IP address the subscriber used to confirm their opt-in status.
             */
            readonly ip_opt?: string;
            /**
             * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
             */
            readonly timestamp_opt?: string;
            /**
             * Star rating for this member, between 1 and 5.
             */
            readonly member_rating?: number;
            /**
             * The date and time the member's info was last changed in ISO 8601 format.
             */
            readonly last_changed?: string;
            /**
             * If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).
             */
            language?: string;
            /**
             * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
             */
            vip?: boolean;
            /**
             * The list member's email client.
             */
            readonly email_client?: string;
            /**
             * Subscriber location information.
             */
            location?: {
                /**
                 * The location latitude.
                 */
                latitude?: number;
                /**
                 * The location longitude.
                 */
                longitude?: number;
                /**
                 * The time difference in hours from GMT.
                 */
                readonly gmtoff?: number;
                /**
                 * The offset for timezones where daylight saving time is observed.
                 */
                readonly dstoff?: number;
                /**
                 * The unique code for the location country.
                 */
                readonly country_code?: string;
                /**
                 * The timezone for the location.
                 */
                readonly timezone?: string;
                /**
                 * The region for the location.
                 */
                readonly region?: string;
            };
            /**
             * The marketing permissions for the subscriber.
             */
            marketing_permissions?: Array<{
                /**
                 * The id for the marketing permission on the list
                 */
                marketing_permission_id?: string;
                /**
                 * The text of the marketing permission.
                 */
                text?: string;
                /**
                 * If the subscriber has opted-in to the marketing permission.
                 */
                enabled?: boolean;
            }>;
            /**
             * The most recent Note added about this member.
             */
            readonly last_note?: {
                /**
                 * The note id.
                 */
                readonly note_id?: number;
                /**
                 * The date and time the note was created in ISO 8601 format.
                 */
                readonly created_at?: string;
                /**
                 * The author of the note.
                 */
                readonly created_by?: string;
                /**
                 * The content of the note.
                 */
                readonly note?: string;
            };
            /**
             * The source from which the subscriber was added to this list.
             */
            readonly source?: string;
            /**
             * The number of tags applied to this member.
             */
            readonly tags_count?: number;
            /**
             * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
             */
            tags?: Array<{
                /**
                 * The tag id.
                 */
                readonly id?: number;
                /**
                 * The name of the tag
                 */
                readonly name?: string;
            }>;
            /**
             * The list id.
             */
            readonly list_id?: string;
            /**
             * A list of link types and descriptions for the API schema documents.
             */
            readonly _links?: Array<{
                /**
                 * As with an HTML 'rel' attribute, this describes the type of link.
                 */
                readonly rel?: string;
                /**
                 * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
                 */
                readonly href?: string;
                /**
                 * The HTTP method that should be used when accessing the URL defined in 'href'.
                 */
                readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
                /**
                 * For GETs, this is a URL representing the schema that the response should conform to.
                 */
                readonly targetSchema?: string;
                /**
                 * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
                 */
                readonly schema?: string;
            }>;
        }>;
        /**
         * The total number of items matching the query regardless of pagination.
         */
        readonly total_items?: number;
    };
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetSearchMembersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetPingResponse = ({
    /**
     * This will return a constant string value if the request is successful. Ex. "Everything's Chimpy!"
     */
    readonly health_status?: string;
});

export type GetPingError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetAllFacebookAdsData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'created_at' | 'updated_at' | 'end_time';
    };
};

export type GetAllFacebookAdsResponse = ({
    facebook_ads?: Array<({
    /**
     * Unique ID of an Outreach.
     */
    id?: string;
    /**
     * The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    web_id?: number;
    /**
     * Title or name of an Outreach.
     */
    name?: string;
    /**
     * The type of outreach this object is.
     */
    type?: 'regular' | 'email-touchpoint' | 'plaintext' | 'rss' | 'reconfirm' | 'variate' | 'absplit' | 'automation' | 'facebook' | 'google' | 'autoresponder' | 'transactional' | 'page' | 'website' | 'social_post' | 'survey' | 'customer_journey' | 'sms';
    /**
     * The status of this outreach.
     */
    status?: 'save' | 'paused' | 'schedule' | 'scheduled' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'active' | 'disconnected' | 'somepaused' | 'draft' | 'completed' | 'partialRejected' | 'pending' | 'rejected' | 'published' | 'unpublished';
    /**
     * Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context.
     */
    show_report?: boolean;
    /**
     * The date and time the outreach was created in ISO 8601 format.
     */
    create_time?: string;
    /**
     * The date and time the outreach was started in ISO 8601 format.
     */
    start_time?: string;
    /**
     * The date and time the outreach was last updated in ISO 8601 format.
     */
    updated_at?: string;
    /**
     * The date and time the outreach was canceled in ISO 8601 format.
     */
    canceled_at?: string;
    /**
     * The date and time the outreach was (or will be) published in ISO 8601 format.
     */
    published_time?: string;
    /**
     * If this outreach targets a segment of your audience.
     */
    has_segment?: boolean;
    /**
     * High level reporting stats for an outreach.
     */
    report_summary?: {
        opens?: number;
        proxy_excluded_opens?: number;
        unique_opens?: number;
        proxy_excluded_unique_opens?: number;
        open_rate?: number;
        proxy_excluded_open_rate?: number;
        clicks?: number;
        subscriber_clicks?: number;
        click_rate?: number;
        visits?: number;
        unique_visits?: number;
        conversion_rate?: number;
        subscribes?: number;
        ecommerce?: {
            total_revenue?: number;
            currency_code?: string;
            average_order_revenue?: number;
        };
        impressions?: number;
        reach?: number;
        engagements?: number;
        total_sent?: number;
    };
    /**
     * High level audience information for who the outreach targets.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The URL of the thumbnail for this outreach.
     */
    thumbnail?: string;
} & {
    email_source_name?: string;
    /**
     * The date and time the ad was paused in ISO 8601 format.
     */
    paused_at?: string;
    /**
     * The date and time the ad was ended in ISO 8601 format.
     */
    end_time?: string;
    /**
     * If the ad has a problem and needs attention.
     */
    needs_attention?: boolean;
    was_canceled_by_facebook?: boolean;
} & {
    /**
     * Check if this ad is connected to a facebook page
     */
    is_connected?: boolean;
    /**
     * Check if this ad has audience setup
     */
    has_audience?: boolean;
    /**
     * Check if this ad has content
     */
    has_content?: boolean;
    /**
     * Channel settings
     */
    channel?: {
        /**
         * Is this for facebook feed
         */
        fb_placement_feed?: boolean;
        /**
         * Is this for facebook audience
         */
        fb_placement_audience?: boolean;
        /**
         * Is this for instagram feed
         */
        ig_placement_feed?: boolean;
    };
    /**
     * Check if this ad is connected to a facebook page
     */
    feedback?: {
        /**
         * Feedback regarding the content of this Ad.
         */
        content?: string;
        /**
         * Feedback regarding the audience of this Ad.
         */
        audience?: string;
        /**
         * Feedback regarding the budget of this Ad.
         */
        budget?: string;
        /**
         * Feedback regarding the compliance of this Ad.
         */
        compliance?: string;
    };
    /**
     * Connected Site
     */
    site?: {
        /**
         * The ID of this connected site.
         */
        id?: number;
        /**
         * The name of the connected site
         */
        name?: string;
        /**
         * The URL for this connected site.
         */
        url?: string;
    };
    /**
     * Audience settings
     */
    audience?: {
        /**
         * Type of the audience
         */
        type?: 'Custom Audience' | 'Lookalike Audience' | 'Interest-based Audience';
        /**
         * List or Facebook based audience
         */
        source_type?: 'facebook' | 'list';
        email_source?: {
            /**
             * Email source name
             */
            name?: string;
            /**
             * Type of the email source
             */
            type?: string;
            /**
             * Is the source reference a segment
             */
            is_segment?: boolean;
            /**
             * Segment type if this source is tied to a segment
             */
            segment_type?: string;
            /**
             * Associated list name to the source
             */
            list_name?: string;
        };
        /**
         * To include list contacts as part of audience
         */
        include_source_in_target?: boolean;
        /**
         * To find similar audience in given country
         */
        lookalike_country_code?: string;
        targeting_specs?: {
            gender?: 0 | 1 | 2;
            min_age?: number;
            max_age?: number;
            locations?: {
                countries?: Array<(string)>;
                regions?: Array<(string)>;
                cities?: Array<(string)>;
                zips?: Array<(string)>;
            };
            interests?: Array<{
                name?: string;
            }>;
        };
    };
    budget?: {
        /**
         * Duration of the ad in seconds
         */
        duration?: number;
        /**
         * Total budget of the ad
         */
        total_amount?: number;
        /**
         * Currency code
         */
        currency_code?: string;
    };
    content?: {
        title?: string;
        link_url?: string;
        message?: string;
        description?: string;
        image_url?: string;
        call_to_action?: string;
        attachments?: Array<{
            name?: string;
            link_url?: string;
            description?: string;
            image_url?: string;
            call_to_action?: string;
        }>;
    };
} & {
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
})>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetAllFacebookAdsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetFacebookAdsIdData = {
    path: {
        /**
         * The outreach id.
         */
        outreach_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetFacebookAdsIdResponse = (({
    /**
     * Unique ID of an Outreach.
     */
    id?: string;
    /**
     * The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    web_id?: number;
    /**
     * Title or name of an Outreach.
     */
    name?: string;
    /**
     * The type of outreach this object is.
     */
    type?: 'regular' | 'email-touchpoint' | 'plaintext' | 'rss' | 'reconfirm' | 'variate' | 'absplit' | 'automation' | 'facebook' | 'google' | 'autoresponder' | 'transactional' | 'page' | 'website' | 'social_post' | 'survey' | 'customer_journey' | 'sms';
    /**
     * The status of this outreach.
     */
    status?: 'save' | 'paused' | 'schedule' | 'scheduled' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'active' | 'disconnected' | 'somepaused' | 'draft' | 'completed' | 'partialRejected' | 'pending' | 'rejected' | 'published' | 'unpublished';
    /**
     * Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context.
     */
    show_report?: boolean;
    /**
     * The date and time the outreach was created in ISO 8601 format.
     */
    create_time?: string;
    /**
     * The date and time the outreach was started in ISO 8601 format.
     */
    start_time?: string;
    /**
     * The date and time the outreach was last updated in ISO 8601 format.
     */
    updated_at?: string;
    /**
     * The date and time the outreach was canceled in ISO 8601 format.
     */
    canceled_at?: string;
    /**
     * The date and time the outreach was (or will be) published in ISO 8601 format.
     */
    published_time?: string;
    /**
     * If this outreach targets a segment of your audience.
     */
    has_segment?: boolean;
    /**
     * High level reporting stats for an outreach.
     */
    report_summary?: {
        opens?: number;
        proxy_excluded_opens?: number;
        unique_opens?: number;
        proxy_excluded_unique_opens?: number;
        open_rate?: number;
        proxy_excluded_open_rate?: number;
        clicks?: number;
        subscriber_clicks?: number;
        click_rate?: number;
        visits?: number;
        unique_visits?: number;
        conversion_rate?: number;
        subscribes?: number;
        ecommerce?: {
            total_revenue?: number;
            currency_code?: string;
            average_order_revenue?: number;
        };
        impressions?: number;
        reach?: number;
        engagements?: number;
        total_sent?: number;
    };
    /**
     * High level audience information for who the outreach targets.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The URL of the thumbnail for this outreach.
     */
    thumbnail?: string;
} & {
    email_source_name?: string;
    /**
     * The date and time the ad was paused in ISO 8601 format.
     */
    paused_at?: string;
    /**
     * The date and time the ad was ended in ISO 8601 format.
     */
    end_time?: string;
    /**
     * If the ad has a problem and needs attention.
     */
    needs_attention?: boolean;
    was_canceled_by_facebook?: boolean;
} & {
    /**
     * Check if this ad is connected to a facebook page
     */
    is_connected?: boolean;
    /**
     * Check if this ad has audience setup
     */
    has_audience?: boolean;
    /**
     * Check if this ad has content
     */
    has_content?: boolean;
    /**
     * Channel settings
     */
    channel?: {
        /**
         * Is this for facebook feed
         */
        fb_placement_feed?: boolean;
        /**
         * Is this for facebook audience
         */
        fb_placement_audience?: boolean;
        /**
         * Is this for instagram feed
         */
        ig_placement_feed?: boolean;
    };
    /**
     * Check if this ad is connected to a facebook page
     */
    feedback?: {
        /**
         * Feedback regarding the content of this Ad.
         */
        content?: string;
        /**
         * Feedback regarding the audience of this Ad.
         */
        audience?: string;
        /**
         * Feedback regarding the budget of this Ad.
         */
        budget?: string;
        /**
         * Feedback regarding the compliance of this Ad.
         */
        compliance?: string;
    };
    /**
     * Connected Site
     */
    site?: {
        /**
         * The ID of this connected site.
         */
        id?: number;
        /**
         * The name of the connected site
         */
        name?: string;
        /**
         * The URL for this connected site.
         */
        url?: string;
    };
    /**
     * Audience settings
     */
    audience?: {
        /**
         * Type of the audience
         */
        type?: 'Custom Audience' | 'Lookalike Audience' | 'Interest-based Audience';
        /**
         * List or Facebook based audience
         */
        source_type?: 'facebook' | 'list';
        email_source?: {
            /**
             * Email source name
             */
            name?: string;
            /**
             * Type of the email source
             */
            type?: string;
            /**
             * Is the source reference a segment
             */
            is_segment?: boolean;
            /**
             * Segment type if this source is tied to a segment
             */
            segment_type?: string;
            /**
             * Associated list name to the source
             */
            list_name?: string;
        };
        /**
         * To include list contacts as part of audience
         */
        include_source_in_target?: boolean;
        /**
         * To find similar audience in given country
         */
        lookalike_country_code?: string;
        targeting_specs?: {
            gender?: 0 | 1 | 2;
            min_age?: number;
            max_age?: number;
            locations?: {
                countries?: Array<(string)>;
                regions?: Array<(string)>;
                cities?: Array<(string)>;
                zips?: Array<(string)>;
            };
            interests?: Array<{
                name?: string;
            }>;
        };
    };
    budget?: {
        /**
         * Duration of the ad in seconds
         */
        duration?: number;
        /**
         * Total budget of the ad
         */
        total_amount?: number;
        /**
         * Currency code
         */
        currency_code?: string;
    };
    content?: {
        title?: string;
        link_url?: string;
        message?: string;
        description?: string;
        image_url?: string;
        call_to_action?: string;
        attachments?: Array<{
            name?: string;
            link_url?: string;
            description?: string;
            image_url?: string;
            call_to_action?: string;
        }>;
    };
} & {
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
}));

export type GetFacebookAdsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingFacebookAdsData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Determines the order direction for sorted results.
         */
        sort_dir?: 'ASC' | 'DESC';
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'created_at' | 'updated_at' | 'end_time';
    };
};

export type GetReportingFacebookAdsResponse = ({
    facebook_ads?: Array<({
    /**
     * Unique ID of an Outreach.
     */
    id?: string;
    /**
     * The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    web_id?: number;
    /**
     * Title or name of an Outreach.
     */
    name?: string;
    /**
     * The type of outreach this object is.
     */
    type?: 'regular' | 'email-touchpoint' | 'plaintext' | 'rss' | 'reconfirm' | 'variate' | 'absplit' | 'automation' | 'facebook' | 'google' | 'autoresponder' | 'transactional' | 'page' | 'website' | 'social_post' | 'survey' | 'customer_journey' | 'sms';
    /**
     * The status of this outreach.
     */
    status?: 'save' | 'paused' | 'schedule' | 'scheduled' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'active' | 'disconnected' | 'somepaused' | 'draft' | 'completed' | 'partialRejected' | 'pending' | 'rejected' | 'published' | 'unpublished';
    /**
     * Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context.
     */
    show_report?: boolean;
    /**
     * The date and time the outreach was created in ISO 8601 format.
     */
    create_time?: string;
    /**
     * The date and time the outreach was started in ISO 8601 format.
     */
    start_time?: string;
    /**
     * The date and time the outreach was last updated in ISO 8601 format.
     */
    updated_at?: string;
    /**
     * The date and time the outreach was canceled in ISO 8601 format.
     */
    canceled_at?: string;
    /**
     * The date and time the outreach was (or will be) published in ISO 8601 format.
     */
    published_time?: string;
    /**
     * If this outreach targets a segment of your audience.
     */
    has_segment?: boolean;
    /**
     * High level reporting stats for an outreach.
     */
    report_summary?: {
        opens?: number;
        proxy_excluded_opens?: number;
        unique_opens?: number;
        proxy_excluded_unique_opens?: number;
        open_rate?: number;
        proxy_excluded_open_rate?: number;
        clicks?: number;
        subscriber_clicks?: number;
        click_rate?: number;
        visits?: number;
        unique_visits?: number;
        conversion_rate?: number;
        subscribes?: number;
        ecommerce?: {
            total_revenue?: number;
            currency_code?: string;
            average_order_revenue?: number;
        };
        impressions?: number;
        reach?: number;
        engagements?: number;
        total_sent?: number;
    };
    /**
     * High level audience information for who the outreach targets.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The URL of the thumbnail for this outreach.
     */
    thumbnail?: string;
} & {
    email_source_name?: string;
    /**
     * The date and time the ad was paused in ISO 8601 format.
     */
    paused_at?: string;
    /**
     * The date and time the ad was ended in ISO 8601 format.
     */
    end_time?: string;
    /**
     * If the ad has a problem and needs attention.
     */
    needs_attention?: boolean;
    was_canceled_by_facebook?: boolean;
} & {
    /**
     * Channel settings
     */
    channel?: {
        /**
         * Is this for facebook feed
         */
        fb_placement_feed?: boolean;
        /**
         * Is this for facebook audience
         */
        fb_placement_audience?: boolean;
        /**
         * Is this for instagram feed
         */
        ig_placement_feed?: boolean;
    };
    /**
     * Audience settings
     */
    audience?: {
        /**
         * Type of the audience
         */
        type?: 'Custom Audience' | 'Lookalike Audience' | 'Interest-based Audience';
        /**
         * List or Facebook based audience
         */
        source_type?: 'facebook' | 'list';
        email_source?: {
            /**
             * Email source name
             */
            name?: string;
            /**
             * Type of the email source
             */
            type?: string;
            /**
             * Is the source reference a segment
             */
            is_segment?: boolean;
            /**
             * Segment type if this source is tied to a segment
             */
            segment_type?: string;
            /**
             * Associated list name to the source
             */
            list_name?: string;
        };
        /**
         * To include list contacts as part of audience
         */
        include_source_in_target?: boolean;
        /**
         * To find similar audience in given country
         */
        lookalike_country_code?: string;
        targeting_specs?: {
            gender?: 0 | 1 | 2;
            min_age?: number;
            max_age?: number;
            locations?: {
                countries?: Array<(string)>;
                regions?: Array<(string)>;
                cities?: Array<(string)>;
                zips?: Array<(string)>;
            };
            interests?: Array<{
                name?: string;
            }>;
        };
    };
    budget?: {
        /**
         * Duration of the ad in seconds
         */
        duration?: number;
        /**
         * Total budget of the ad
         */
        total_amount?: number;
        /**
         * Currency code
         */
        currency_code?: string;
    };
    /**
     * Report summary of facebook ad
     */
    report_summary?: {
        reach?: number;
        impressions?: number;
        clicks?: number;
        click_rate?: number;
        unique_clicks?: number;
        first_time_buyers?: number;
        ecommerce?: {
            total_revenue?: number;
            currency_code?: string;
        };
        total_products_sold?: number;
        total_orders?: number;
        average_order_amount?: {
            amount?: number;
            currency_code?: string;
        };
        cost_per_click?: {
            amount?: number;
            currency_code?: string;
        };
        average_daily_budget?: {
            amount?: number;
            currency_code?: string;
        };
        likes?: number;
        comments?: number;
        shares?: number;
        has_extended_ad_duration?: boolean;
        extended_at?: {
            datetime?: string;
            timezone?: string;
        };
        return_on_investment?: number;
    };
    audience_activity?: {
        clicks?: Array<{
            date?: string;
            clicks?: number;
        }>;
        impressions?: Array<{
            date?: string;
            impressions?: number;
        }>;
        revenue?: Array<{
            date?: string;
            revenue?: number;
        }>;
    };
} & {
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
})>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingFacebookAdsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingFacebookAdsIdData = {
    path: {
        /**
         * The outreach id.
         */
        outreach_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportingFacebookAdsIdResponse = (({
    /**
     * Unique ID of an Outreach.
     */
    id?: string;
    /**
     * The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.
     */
    web_id?: number;
    /**
     * Title or name of an Outreach.
     */
    name?: string;
    /**
     * The type of outreach this object is.
     */
    type?: 'regular' | 'email-touchpoint' | 'plaintext' | 'rss' | 'reconfirm' | 'variate' | 'absplit' | 'automation' | 'facebook' | 'google' | 'autoresponder' | 'transactional' | 'page' | 'website' | 'social_post' | 'survey' | 'customer_journey' | 'sms';
    /**
     * The status of this outreach.
     */
    status?: 'save' | 'paused' | 'schedule' | 'scheduled' | 'sending' | 'sent' | 'canceled' | 'canceling' | 'active' | 'disconnected' | 'somepaused' | 'draft' | 'completed' | 'partialRejected' | 'pending' | 'rejected' | 'published' | 'unpublished';
    /**
     * Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context.
     */
    show_report?: boolean;
    /**
     * The date and time the outreach was created in ISO 8601 format.
     */
    create_time?: string;
    /**
     * The date and time the outreach was started in ISO 8601 format.
     */
    start_time?: string;
    /**
     * The date and time the outreach was last updated in ISO 8601 format.
     */
    updated_at?: string;
    /**
     * The date and time the outreach was canceled in ISO 8601 format.
     */
    canceled_at?: string;
    /**
     * The date and time the outreach was (or will be) published in ISO 8601 format.
     */
    published_time?: string;
    /**
     * If this outreach targets a segment of your audience.
     */
    has_segment?: boolean;
    /**
     * High level reporting stats for an outreach.
     */
    report_summary?: {
        opens?: number;
        proxy_excluded_opens?: number;
        unique_opens?: number;
        proxy_excluded_unique_opens?: number;
        open_rate?: number;
        proxy_excluded_open_rate?: number;
        clicks?: number;
        subscriber_clicks?: number;
        click_rate?: number;
        visits?: number;
        unique_visits?: number;
        conversion_rate?: number;
        subscribes?: number;
        ecommerce?: {
            total_revenue?: number;
            currency_code?: string;
            average_order_revenue?: number;
        };
        impressions?: number;
        reach?: number;
        engagements?: number;
        total_sent?: number;
    };
    /**
     * High level audience information for who the outreach targets.
     */
    recipients?: {
        /**
         * The unique list id.
         */
        list_id?: string;
        /**
         * The status of the list used, namely if it's deleted or disabled.
         */
        readonly list_is_active?: boolean;
        /**
         * The name of the list.
         */
        readonly list_name?: string;
        /**
         * A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
         */
        readonly segment_text?: string;
        /**
         * Count of the recipients on the associated list. Formatted as an integer.
         */
        readonly recipient_count?: number;
        /**
         * An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options.
         */
        segment_opts?: {
            /**
             * The id for an existing saved segment.
             */
            saved_segment_id?: number;
            /**
             * The prebuilt segment id, if a prebuilt segment has been designated for this campaign.
             */
            prebuilt_segment_id?: string;
            /**
             * Segment match type.
             */
            match?: 'any' | 'all';
            /**
             * Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).
             */
            conditions?: Array<unknown>;
        };
    };
    /**
     * The URL of the thumbnail for this outreach.
     */
    thumbnail?: string;
} & {
    email_source_name?: string;
    /**
     * The date and time the ad was paused in ISO 8601 format.
     */
    paused_at?: string;
    /**
     * The date and time the ad was ended in ISO 8601 format.
     */
    end_time?: string;
    /**
     * If the ad has a problem and needs attention.
     */
    needs_attention?: boolean;
    was_canceled_by_facebook?: boolean;
} & {
    /**
     * Channel settings
     */
    channel?: {
        /**
         * Is this for facebook feed
         */
        fb_placement_feed?: boolean;
        /**
         * Is this for facebook audience
         */
        fb_placement_audience?: boolean;
        /**
         * Is this for instagram feed
         */
        ig_placement_feed?: boolean;
    };
    /**
     * Audience settings
     */
    audience?: {
        /**
         * Type of the audience
         */
        type?: 'Custom Audience' | 'Lookalike Audience' | 'Interest-based Audience';
        /**
         * List or Facebook based audience
         */
        source_type?: 'facebook' | 'list';
        email_source?: {
            /**
             * Email source name
             */
            name?: string;
            /**
             * Type of the email source
             */
            type?: string;
            /**
             * Is the source reference a segment
             */
            is_segment?: boolean;
            /**
             * Segment type if this source is tied to a segment
             */
            segment_type?: string;
            /**
             * Associated list name to the source
             */
            list_name?: string;
        };
        /**
         * To include list contacts as part of audience
         */
        include_source_in_target?: boolean;
        /**
         * To find similar audience in given country
         */
        lookalike_country_code?: string;
        targeting_specs?: {
            gender?: 0 | 1 | 2;
            min_age?: number;
            max_age?: number;
            locations?: {
                countries?: Array<(string)>;
                regions?: Array<(string)>;
                cities?: Array<(string)>;
                zips?: Array<(string)>;
            };
            interests?: Array<{
                name?: string;
            }>;
        };
    };
    budget?: {
        /**
         * Duration of the ad in seconds
         */
        duration?: number;
        /**
         * Total budget of the ad
         */
        total_amount?: number;
        /**
         * Currency code
         */
        currency_code?: string;
    };
    /**
     * Report summary of facebook ad
     */
    report_summary?: {
        reach?: number;
        impressions?: number;
        clicks?: number;
        click_rate?: number;
        unique_clicks?: number;
        first_time_buyers?: number;
        ecommerce?: {
            total_revenue?: number;
            currency_code?: string;
        };
        total_products_sold?: number;
        total_orders?: number;
        average_order_amount?: {
            amount?: number;
            currency_code?: string;
        };
        cost_per_click?: {
            amount?: number;
            currency_code?: string;
        };
        average_daily_budget?: {
            amount?: number;
            currency_code?: string;
        };
        likes?: number;
        comments?: number;
        shares?: number;
        has_extended_ad_duration?: boolean;
        extended_at?: {
            datetime?: string;
            timezone?: string;
        };
        return_on_investment?: number;
    };
    audience_activity?: {
        clicks?: Array<{
            date?: string;
            clicks?: number;
        }>;
        impressions?: Array<{
            date?: string;
            impressions?: number;
        }>;
        revenue?: Array<{
            date?: string;
            revenue?: number;
        }>;
    };
} & {
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
}));

export type GetReportingFacebookAdsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingFacebookAdsIdEcommerceProductActivityData = {
    path: {
        /**
         * The outreach id.
         */
        outreach_id: string;
    };
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
        /**
         * Returns files sorted by the specified field.
         */
        sort_field?: 'title' | 'total_revenue' | 'total_purchased';
    };
};

export type GetReportingFacebookAdsIdEcommerceProductActivityResponse = ({
    products?: Array<{
        title?: string;
        sku?: string;
        image_url?: string;
        total_revenue?: number;
        total_purchased?: number;
        currency_code?: string;
        recommendation_total?: number;
        recommendation_purchased?: number;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingFacebookAdsIdEcommerceProductActivityError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingLandingPagesIdData = {
    path: {
        /**
         * The outreach id.
         */
        outreach_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportingLandingPagesIdResponse = ({
    /**
     * A string that uniquely identifies this landing page.
     */
    readonly id?: string;
    /**
     * The name of this landing page the user will see.
     */
    readonly name?: string;
    /**
     * The name of the landing page the user's customers will see.
     */
    readonly title?: string;
    /**
     * The landing page url.
     */
    readonly url?: string;
    /**
     * The time this landing page was published.
     */
    readonly published_at?: string;
    /**
     * The time this landing page was unpublished.
     */
    readonly unpublished_at?: string;
    /**
     * The status of the landing page.
     */
    readonly status?: string;
    /**
     * The list id connected to this landing page.
     */
    readonly list_id?: string;
    /**
     * The number of visits to this landing pages.
     */
    readonly visits?: number;
    /**
     * The number of unique visits to this landing pages.
     */
    readonly unique_visits?: number;
    /**
     * The number of subscribes to this landing pages.
     */
    readonly subscribes?: number;
    /**
     * The number of clicks to this landing pages.
     */
    readonly clicks?: number;
    /**
     * The percentage of people who visited your landing page and were added to your list.
     */
    readonly conversion_rate?: number;
    timeseries?: {
        /**
         * The clicks and visits data from the last seven days.
         */
        readonly daily_stats?: {
            clicks?: Array<{
                readonly date?: string;
                readonly val?: number;
            }>;
            visits?: Array<{
                readonly date?: string;
                readonly val?: number;
            }>;
            unique_visits?: Array<{
                readonly date?: string;
                readonly val?: number;
            }>;
        };
        /**
         * The clicks and visits data from the last five weeks.
         */
        readonly weekly_stats?: {
            /**
             * The total number of clicks in a week.
             */
            clicks?: Array<{
                readonly date?: string;
                readonly val?: number;
            }>;
            /**
             * The total number of visits in a week.
             */
            visits?: Array<{
                readonly date?: string;
                readonly val?: number;
            }>;
            unique_visits?: Array<{
                readonly date?: string;
                readonly val?: number;
            }>;
        };
    };
    ecommerce?: {
        /**
         * The total revenue of this landing page.
         */
        readonly total_revenue?: number;
        /**
         * The user's currency code.
         */
        readonly currency_code?: string;
        /**
         * The total number of orders associated with this landing page.
         */
        readonly total_orders?: number;
        /**
         * The average order revenue of this landing page.
         */
        readonly average_order_revenue?: number;
    };
    /**
     * The ID used in the Mailchimp web application.
     */
    readonly web_id?: number;
    /**
     * List Name
     */
    readonly list_name?: string;
    /**
     * A list of tags associated to the landing page.
     */
    readonly signup_tags?: Array<{
        /**
         * The unique id for the tag.
         */
        readonly tag_id?: number;
        /**
         * The name of the tag.
         */
        readonly tag_name?: string;
    }>;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingLandingPagesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingLandingPagesData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetReportingLandingPagesResponse = ({
    landing_pages?: Array<{
        /**
         * A string that uniquely identifies this landing page.
         */
        readonly id?: string;
        /**
         * The name of this landing page the user will see.
         */
        readonly name?: string;
        /**
         * The name of the landing page the user's customers will see.
         */
        readonly title?: string;
        /**
         * The landing page url.
         */
        readonly url?: string;
        /**
         * The time this landing page was published.
         */
        readonly published_at?: string;
        /**
         * The time this landing page was unpublished.
         */
        readonly unpublished_at?: string;
        /**
         * The status of the landing page.
         */
        readonly status?: string;
        /**
         * The list id connected to this landing page.
         */
        readonly list_id?: string;
        /**
         * The number of visits to this landing pages.
         */
        readonly visits?: number;
        /**
         * The number of unique visits to this landing pages.
         */
        readonly unique_visits?: number;
        /**
         * The number of subscribes to this landing pages.
         */
        readonly subscribes?: number;
        /**
         * The number of clicks to this landing pages.
         */
        readonly clicks?: number;
        /**
         * The percentage of people who visited your landing page and were added to your list.
         */
        readonly conversion_rate?: number;
        timeseries?: {
            /**
             * The clicks and visits data from the last seven days.
             */
            readonly daily_stats?: {
                clicks?: Array<{
                    readonly date?: string;
                    readonly val?: number;
                }>;
                visits?: Array<{
                    readonly date?: string;
                    readonly val?: number;
                }>;
                unique_visits?: Array<{
                    readonly date?: string;
                    readonly val?: number;
                }>;
            };
            /**
             * The clicks and visits data from the last five weeks.
             */
            readonly weekly_stats?: {
                /**
                 * The total number of clicks in a week.
                 */
                clicks?: Array<{
                    readonly date?: string;
                    readonly val?: number;
                }>;
                /**
                 * The total number of visits in a week.
                 */
                visits?: Array<{
                    readonly date?: string;
                    readonly val?: number;
                }>;
                unique_visits?: Array<{
                    readonly date?: string;
                    readonly val?: number;
                }>;
            };
        };
        ecommerce?: {
            /**
             * The total revenue of this landing page.
             */
            readonly total_revenue?: number;
            /**
             * The user's currency code.
             */
            readonly currency_code?: string;
            /**
             * The total number of orders associated with this landing page.
             */
            readonly total_orders?: number;
            /**
             * The average order revenue of this landing page.
             */
            readonly average_order_revenue?: number;
        };
        /**
         * The ID used in the Mailchimp web application.
         */
        readonly web_id?: number;
        /**
         * List Name
         */
        readonly list_name?: string;
        /**
         * A list of tags associated to the landing page.
         */
        readonly signup_tags?: Array<{
            /**
             * The unique id for the tag.
             */
            readonly tag_id?: number;
            /**
             * The name of the tag.
             */
            readonly tag_name?: string;
        }>;
        /**
         * A list of link types and descriptions for the API schema documents.
         */
        readonly _links?: Array<{
            /**
             * As with an HTML 'rel' attribute, this describes the type of link.
             */
            readonly rel?: string;
            /**
             * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
             */
            readonly href?: string;
            /**
             * The HTTP method that should be used when accessing the URL defined in 'href'.
             */
            readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
            /**
             * For GETs, this is a URL representing the schema that the response should conform to.
             */
            readonly targetSchema?: string;
            /**
             * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
             */
            readonly schema?: string;
        }>;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingLandingPagesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingSurveysData = {
    query?: {
        /**
         * The number of records to return. Default value is 10. Maximum value is 1000
         */
        count?: number;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         */
        offset?: number;
    };
};

export type GetReportingSurveysResponse = ({
    /**
     * The surveys that have reports available.
     */
    surveys?: Array<{
        /**
         * A string that uniquely identifies this survey.
         */
        readonly id?: string;
        /**
         * The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`.
         */
        readonly web_id?: number;
        /**
         * The ID of the list connected to this survey.
         */
        readonly list_id?: string;
        /**
         * The name of the list connected to this survey.
         */
        readonly list_name?: string;
        /**
         * The title of the survey.
         */
        readonly title?: string;
        /**
         * The URL for the survey.
         */
        readonly url?: string;
        /**
         * The survey's status.
         */
        readonly status?: 'published' | 'unpublished';
        /**
         * The date and time the survey was published in ISO 8601 format.
         */
        readonly published_at?: string;
        /**
         * The date and time the survey was created in ISO 8601 format.
         */
        readonly created_at?: string;
        /**
         * The date and time the survey was last updated in ISO 8601 format.
         */
        readonly updated_at?: string;
        /**
         * The total number of responses to this survey.
         */
        readonly total_responses?: number;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingSurveysError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingSurveysIdData = {
    path: {
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportingSurveysIdResponse = ({
    /**
     * A string that uniquely identifies this survey.
     */
    readonly id?: string;
    /**
     * The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`.
     */
    readonly web_id?: number;
    /**
     * The ID of the list connected to this survey.
     */
    readonly list_id?: string;
    /**
     * The name of the list connected to this survey.
     */
    readonly list_name?: string;
    /**
     * The title of the survey.
     */
    readonly title?: string;
    /**
     * The URL for the survey.
     */
    readonly url?: string;
    /**
     * The survey's status.
     */
    readonly status?: 'published' | 'unpublished';
    /**
     * The date and time the survey was published in ISO 8601 format.
     */
    readonly published_at?: string;
    /**
     * The date and time the survey was created in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the survey was last updated in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The total number of responses to this survey.
     */
    readonly total_responses?: number;
});

export type GetReportingSurveysIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingSurveysIdQuestionsData = {
    path: {
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportingSurveysIdQuestionsResponse = ({
    /**
     * An array of reports for each question on the survey.
     */
    questions?: Array<{
        /**
         * The ID of the survey question.
         */
        readonly id?: string;
        /**
         * The unique ID of the survey.
         */
        readonly survey_id?: string;
        /**
         * The query of the survey question.
         */
        readonly query?: string;
        /**
         * The response type of the survey question.
         */
        readonly type?: 'pickOne' | 'pickMany' | 'range' | 'text' | 'email';
        /**
         * The total number of responses to this question.
         */
        readonly total_responses?: number;
        /**
         * Whether this survey question is required to answer.
         */
        readonly is_required?: boolean;
        /**
         * Whether this survey question has an 'other' option.
         */
        readonly has_other?: boolean;
        /**
         * Label used for the 'other' option of this survey question.
         */
        readonly other_label?: string;
        /**
         * The average rating for this range question.
         */
        readonly average_rating?: number;
        /**
         * Label for the low end of the range.
         */
        readonly range_low_label?: string;
        /**
         * Label for the high end of the range.
         */
        readonly range_high_label?: string;
        /**
         * Placeholder text for this survey question's answer box.
         */
        readonly placeholder_label?: string;
        /**
         * Whether the subscribe checkbox is shown for this email question.
         */
        readonly subscribe_checkbox_enabled?: boolean;
        /**
         * Label used for the subscribe checkbox for this email question.
         */
        readonly subscribe_checkbox_label?: string;
        /**
         * A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience.
         */
        readonly merge_field?: {
            /**
             * An unchanging id for the merge field.
             */
            readonly id?: number;
            /**
             * The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
             */
            readonly label?: string;
            /**
             * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
             */
            readonly type?: 'text' | 'number' | 'address' | 'phone' | 'date' | 'url' | 'imageurl' | 'radio' | 'dropdown' | 'birthday' | 'zip';
        };
        /**
         * The answer choices for this question.
         */
        readonly options?: Array<{
            /**
             * The label for this survey question option.
             */
            label?: string;
            /**
             * The ID for this survey question option.
             */
            id?: string;
            /**
             * The count of responses that selected this survey question option.
             */
            count?: number;
        }>;
        /**
         * For email question types, how many are new, known, or unknown contacts.
         */
        contact_counts?: {
            /**
             * The number of known contacts that responded to this survey.
             */
            known?: number;
            /**
             * The number of unknown contacts that responded to this survey.
             */
            unknown?: number;
            /**
             * The number of new contacts that responded to this survey.
             */
            new?: number;
        };
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingSurveysIdQuestionsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingSurveysIdQuestionsIdData = {
    path: {
        /**
         * The ID of the survey question.
         */
        question_id: string;
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
    };
};

export type GetReportingSurveysIdQuestionsIdResponse = ({
    /**
     * The ID of the survey question.
     */
    readonly id?: string;
    /**
     * The unique ID of the survey.
     */
    readonly survey_id?: string;
    /**
     * The query of the survey question.
     */
    readonly query?: string;
    /**
     * The response type of the survey question.
     */
    readonly type?: 'pickOne' | 'pickMany' | 'range' | 'text' | 'email';
    /**
     * The total number of responses to this question.
     */
    readonly total_responses?: number;
    /**
     * Whether this survey question is required to answer.
     */
    readonly is_required?: boolean;
    /**
     * Whether this survey question has an 'other' option.
     */
    readonly has_other?: boolean;
    /**
     * Label used for the 'other' option of this survey question.
     */
    readonly other_label?: string;
    /**
     * The average rating for this range question.
     */
    readonly average_rating?: number;
    /**
     * Label for the low end of the range.
     */
    readonly range_low_label?: string;
    /**
     * Label for the high end of the range.
     */
    readonly range_high_label?: string;
    /**
     * Placeholder text for this survey question's answer box.
     */
    readonly placeholder_label?: string;
    /**
     * Whether the subscribe checkbox is shown for this email question.
     */
    readonly subscribe_checkbox_enabled?: boolean;
    /**
     * Label used for the subscribe checkbox for this email question.
     */
    readonly subscribe_checkbox_label?: string;
    /**
     * A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience.
     */
    readonly merge_field?: {
        /**
         * An unchanging id for the merge field.
         */
        readonly id?: number;
        /**
         * The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
         */
        readonly label?: string;
        /**
         * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
         */
        readonly type?: 'text' | 'number' | 'address' | 'phone' | 'date' | 'url' | 'imageurl' | 'radio' | 'dropdown' | 'birthday' | 'zip';
    };
    /**
     * The answer choices for this question.
     */
    readonly options?: Array<{
        /**
         * The label for this survey question option.
         */
        label?: string;
        /**
         * The ID for this survey question option.
         */
        id?: string;
        /**
         * The count of responses that selected this survey question option.
         */
        count?: number;
    }>;
    /**
     * For email question types, how many are new, known, or unknown contacts.
     */
    contact_counts?: {
        /**
         * The number of known contacts that responded to this survey.
         */
        known?: number;
        /**
         * The number of unknown contacts that responded to this survey.
         */
        unknown?: number;
        /**
         * The number of new contacts that responded to this survey.
         */
        new?: number;
    };
});

export type GetReportingSurveysIdQuestionsIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingSurveysIdQuestionsIdAnswersData = {
    path: {
        /**
         * The ID of the survey question.
         */
        question_id: string;
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
    query?: {
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Filter survey responses by familiarity of the respondents.
         */
        respondent_familiarity_is?: 'new' | 'known' | 'unknown';
    };
};

export type GetReportingSurveysIdQuestionsIdAnswersResponse = ({
    /**
     * An array of answers for a question on the survey.
     */
    answers?: Array<{
        /**
         * The ID of the answer.
         */
        readonly id?: string;
        /**
         * The raw text answer.
         */
        readonly value?: string;
        /**
         * The ID of the survey response.
         */
        readonly response_id?: string;
        /**
         * The date and time when the survey response was submitted in ISO 8601 format.
         */
        readonly submitted_at?: string;
        /**
         * Information about the contact.
         */
        readonly contact?: {
            /**
             * The MD5 hash of the lowercase version of the list member's email address.
             */
            readonly email_id?: string;
            /**
             * The ID of this contact.
             */
            readonly contact_id?: string;
            /**
             * The contact's current status.
             */
            readonly status?: 'Subscribed' | 'Unsubscribed' | 'Non-Subscribed' | 'Cleaned' | 'Archived';
            /**
             * The contact's email address.
             */
            readonly email?: string;
            /**
             * The contact's sms phone number.
             */
            readonly phone?: string;
            /**
             * The contact's full name.
             */
            readonly full_name?: string;
            /**
             * Indicates whether a contact consents to 1:1 messaging.
             */
            readonly consents_to_one_to_one_messaging?: boolean;
            /**
             * URL for the contact's avatar or profile image.
             */
            readonly avatar_url?: string;
        };
        /**
         * If this contact was added to the Mailchimp audience via this survey.
         */
        is_new_contact?: boolean;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingSurveysIdQuestionsIdAnswersError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingSurveysIdResponsesData = {
    path: {
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
    query?: {
        /**
         * The ID of the question that was answered.
         */
        answered_question?: number;
        /**
         * The ID of the option chosen to filter responses on.
         */
        chose_answer?: string;
        /**
         * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         */
        exclude_fields?: Array<string>;
        /**
         * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         */
        fields?: Array<string>;
        /**
         * Filter survey responses by familiarity of the respondents.
         */
        respondent_familiarity_is?: 'new' | 'known' | 'unknown';
    };
};

export type GetReportingSurveysIdResponsesResponse = ({
    /**
     * An array of responses to a survey.
     */
    responses?: Array<{
        /**
         * The ID for the survey response.
         */
        readonly response_id?: string;
        /**
         * The date and time when the survey response was submitted in ISO 8601 format.
         */
        readonly submitted_at?: string;
        /**
         * Information about the contact.
         */
        readonly contact?: {
            /**
             * The MD5 hash of the lowercase version of the list member's email address.
             */
            readonly email_id?: string;
            /**
             * The ID of this contact.
             */
            readonly contact_id?: string;
            /**
             * The contact's current status.
             */
            readonly status?: 'Subscribed' | 'Unsubscribed' | 'Non-Subscribed' | 'Cleaned' | 'Archived';
            /**
             * The contact's email address.
             */
            readonly email?: string;
            /**
             * The contact's sms phone number.
             */
            readonly phone?: string;
            /**
             * The contact's full name.
             */
            readonly full_name?: string;
            /**
             * Indicates whether a contact consents to 1:1 messaging.
             */
            readonly consents_to_one_to_one_messaging?: boolean;
            /**
             * URL for the contact's avatar or profile image.
             */
            readonly avatar_url?: string;
        };
        /**
         * If this contact was added to the Mailchimp audience via this survey.
         */
        is_new_contact?: boolean;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
    /**
     * A list of link types and descriptions for the API schema documents.
     */
    readonly _links?: Array<{
        /**
         * As with an HTML 'rel' attribute, this describes the type of link.
         */
        readonly rel?: string;
        /**
         * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
         */
        readonly href?: string;
        /**
         * The HTTP method that should be used when accessing the URL defined in 'href'.
         */
        readonly method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
        /**
         * For GETs, this is a URL representing the schema that the response should conform to.
         */
        readonly targetSchema?: string;
        /**
         * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
         */
        readonly schema?: string;
    }>;
});

export type GetReportingSurveysIdResponsesError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetReportingSurveysIdResponsesIdData = {
    path: {
        /**
         * The ID of the survey response.
         */
        response_id: string;
        /**
         * The ID of the survey.
         */
        survey_id: string;
    };
};

export type GetReportingSurveysIdResponsesIdResponse = ({
    /**
     * The ID for the survey response.
     */
    readonly response_id?: string;
    /**
     * The date and time when the survey response was submitted in ISO 8601 format.
     */
    readonly submitted_at?: string;
    /**
     * Information about the contact.
     */
    readonly contact?: {
        /**
         * The MD5 hash of the lowercase version of the list member's email address.
         */
        readonly email_id?: string;
        /**
         * The ID of this contact.
         */
        readonly contact_id?: string;
        /**
         * The contact's current status.
         */
        readonly status?: 'Subscribed' | 'Unsubscribed' | 'Non-Subscribed' | 'Cleaned' | 'Archived';
        /**
         * The contact's email address.
         */
        readonly email?: string;
        /**
         * The contact's sms phone number.
         */
        readonly phone?: string;
        /**
         * The contact's full name.
         */
        readonly full_name?: string;
        /**
         * Indicates whether a contact consents to 1:1 messaging.
         */
        readonly consents_to_one_to_one_messaging?: boolean;
        /**
         * URL for the contact's avatar or profile image.
         */
        readonly avatar_url?: string;
    };
    /**
     * If this contact was added to the Mailchimp audience via this survey.
     */
    is_new_contact?: boolean;
    /**
     * The survey questions and the answers to those questions.
     */
    results?: Array<{
        /**
         * The unique ID for this question.
         */
        question_id?: string;
        /**
         * The type of question this is.
         */
        question_type?: 'pickOne' | 'pickMany' | 'range' | 'text' | 'email';
        /**
         * The survey question.
         */
        query?: string;
        /**
         * The answer to this survey question.
         */
        answer?: string;
    }>;
});

export type GetReportingSurveysIdResponsesIdError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetVerifiedDomainData = {
    path: {
        /**
         * The domain name.
         */
        domain_name: string;
    };
};

export type GetVerifiedDomainResponse = ({
    /**
     * The name of this domain.
     */
    readonly domain?: string;
    /**
     * Whether the domain has been verified for sending.
     */
    readonly verified?: boolean;
    /**
     * Whether domain authentication is enabled for this domain.
     */
    readonly authenticated?: boolean;
    /**
     * The e-mail address receiving the two-factor challenge for this domain.
     */
    readonly verification_email?: string;
    /**
     * The date/time that the two-factor challenge was sent to the verification email.
     */
    readonly verification_sent?: string;
    /**
     * The Domain's current status.
     */
    readonly status?: 'VERIFICATION_IN_PROGRESS' | 'VERIFIED' | 'EXPIRED' | 'ERROR' | 'AUTHENTICATION_IN_PROGRESS' | 'AUTHENTICATION_ERROR' | 'AUTHENTICATED';
    /**
     * Returns whether the domain used is a public / free email provider. See [Limitations of Free Email Addresses](https://mailchimp.com/help/limitations-of-free-email-addresses/) for more details.
     */
    readonly is_free_email_provider?: boolean;
});

export type GetVerifiedDomainError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type DeleteVerifiedDomainData = {
    path: {
        /**
         * The domain name.
         */
        domain_name: string;
    };
};

export type DeleteVerifiedDomainResponse = (void);

export type DeleteVerifiedDomainError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type VerifyDomainData = {
    body: {
        /**
         * The code that was sent to the email address provided when adding a new domain to verify.
         */
        code: string;
    };
    path: {
        /**
         * The domain name.
         */
        domain_name: string;
    };
};

export type VerifyDomainResponse = ({
    /**
     * The name of this domain.
     */
    readonly domain?: string;
    /**
     * Whether the domain has been verified for sending.
     */
    readonly verified?: boolean;
    /**
     * Whether domain authentication is enabled for this domain.
     */
    readonly authenticated?: boolean;
    /**
     * The e-mail address receiving the two-factor challenge for this domain.
     */
    readonly verification_email?: string;
    /**
     * The date/time that the two-factor challenge was sent to the verification email.
     */
    readonly verification_sent?: string;
    /**
     * The Domain's current status.
     */
    readonly status?: 'VERIFICATION_IN_PROGRESS' | 'VERIFIED' | 'EXPIRED' | 'ERROR' | 'AUTHENTICATION_IN_PROGRESS' | 'AUTHENTICATION_ERROR' | 'AUTHENTICATED';
    /**
     * Returns whether the domain used is a public / free email provider. See [Limitations of Free Email Addresses](https://mailchimp.com/help/limitations-of-free-email-addresses/) for more details.
     */
    readonly is_free_email_provider?: boolean;
});

export type VerifyDomainError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type GetVerifiedDomainsResponse = ({
    /**
     * The domains on the account
     */
    readonly domains?: Array<{
        /**
         * The name of this domain.
         */
        readonly domain?: string;
        /**
         * Whether the domain has been verified for sending.
         */
        readonly verified?: boolean;
        /**
         * Whether domain authentication is enabled for this domain.
         */
        readonly authenticated?: boolean;
        /**
         * The e-mail address receiving the two-factor challenge for this domain.
         */
        readonly verification_email?: string;
        /**
         * The date/time that the two-factor challenge was sent to the verification email.
         */
        readonly verification_sent?: string;
        /**
         * The Domain's current status.
         */
        readonly status?: 'VERIFICATION_IN_PROGRESS' | 'VERIFIED' | 'EXPIRED' | 'ERROR' | 'AUTHENTICATION_IN_PROGRESS' | 'AUTHENTICATION_ERROR' | 'AUTHENTICATED';
        /**
         * Returns whether the domain used is a public / free email provider. See [Limitations of Free Email Addresses](https://mailchimp.com/help/limitations-of-free-email-addresses/) for more details.
         */
        readonly is_free_email_provider?: boolean;
    }>;
    /**
     * The total number of items matching the query regardless of pagination.
     */
    readonly total_items?: number;
});

export type GetVerifiedDomainsError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});

export type CreateVerifiedDomainData = {
    body: {
        /**
         * The e-mail address at the domain you want to verify. This will receive a two-factor challenge to be used in the verify action.
         */
        verification_email: string;
    };
};

export type CreateVerifiedDomainResponse = ({
    /**
     * The name of this domain.
     */
    readonly domain?: string;
    /**
     * Whether the domain has been verified for sending.
     */
    readonly verified?: boolean;
    /**
     * Whether domain authentication is enabled for this domain.
     */
    readonly authenticated?: boolean;
    /**
     * The e-mail address receiving the two-factor challenge for this domain.
     */
    readonly verification_email?: string;
    /**
     * The date/time that the two-factor challenge was sent to the verification email.
     */
    readonly verification_sent?: string;
    /**
     * The Domain's current status.
     */
    readonly status?: 'VERIFICATION_IN_PROGRESS' | 'VERIFIED' | 'EXPIRED' | 'ERROR' | 'AUTHENTICATION_IN_PROGRESS' | 'AUTHENTICATION_ERROR' | 'AUTHENTICATED';
    /**
     * Returns whether the domain used is a public / free email provider. See [Limitations of Free Email Addresses](https://mailchimp.com/help/limitations-of-free-email-addresses/) for more details.
     */
    readonly is_free_email_provider?: boolean;
});

export type CreateVerifiedDomainError = ({
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
     */
    detail: string;
    /**
     * A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
     */
    instance: string;
});